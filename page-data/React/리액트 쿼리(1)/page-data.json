{"componentChunkName":"component---src-templates-blog-post-js","path":"/React/리액트 쿼리(1)/","result":{"data":{"site":{"siteMetadata":{"title":"Jeong.io","author":"JeongYeonJae","siteUrl":"https://jeongyeon9254.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"c6b738a1-153b-5403-82ab-5e973acee8b7","excerpt":"프론트의 역할? 제 개인적인 의견이지만, 누군가가 프론트의 중요한 역할이 무엇이냐고 물어본다면 가장 심플하게 데이터를 잘 받아와, 유저에게 잘 보여주는 것 이라고 대답할것입니다. 물론 그것이 전부는 아니겠지만, 일반적인 웹&앱 서비스에서 가장 많은 부분을 차지하는것은 데이터를 보여주는 일입니다. 그래서 우리는 잘 보여주기 위해 리액트나 뷰, 스벨트 등의 프레임워크를 사용하곤 합니다. DOM을 더 쉽고 간단하게 컨트롤해서 유저에게 더 좋은 UI…","html":"<h1 id=\"프론트의-역할\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"프론트의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트의 역할?</h1>\n<p>제 개인적인 의견이지만, 누군가가 프론트의 중요한 역할이 무엇이냐고 물어본다면 가장 심플하게 데이터를 잘 받아와, 유저에게 잘 보여주는 것 이라고 대답할것입니다.</p>\n<p>물론 그것이 전부는 아니겠지만, 일반적인 웹&#x26;앱 서비스에서 가장 많은 부분을 차지하는것은 데이터를 보여주는 일입니다.</p>\n<p>그래서 우리는 잘 보여주기 위해 리액트나 뷰, 스벨트 등의 프레임워크를 사용하곤 합니다. DOM을 더 쉽고 간단하게 컨트롤해서 유저에게 더 좋은 UI를 보여주기 위함이죠.</p>\n<p>하지만 그만큼 중요한것이 데이터를 잘 받아오는 일입니다. 아마 fetch 이벤트나 대부분의 경우 axios를 사용하여 백엔드와 통신을 할 것입니다. 그리고 대부분의 경우 내부 state 내지 전역상태관리 라이브러리를 이용하여 백엔드에서 받은 데이터를 보여줄 것입니다.</p>\n<p>이 과정을 좀 더 쉽고 간단하게 바꿔줄 리액트 쿼리에 대해 알아보겠습니다.</p>\n<br>\n<h1 id=\"리액트-쿼리\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BF%BC%EB%A6%AC\" aria-label=\"리액트 쿼리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 쿼리</h1>\n<p><img src=\"/content/react/query_1.png\" alt=\"ex_screenshot\"></p>\n<p>대부분 기존 상태관리 라이브러리는 내부 state관리에는 용이하나, 서버 상태관리에는 어려움이 있었습니다.</p>\n<h4 id=\"클라이언트에서-관리하는-서버상태\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EC%84%9C%EB%B2%84%EC%83%81%ED%83%9C\" aria-label=\"클라이언트에서 관리하는 서버상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트에서 관리하는 서버상태</h4>\n<ul>\n<li>유저가 소유하거나 통제할수 없는 원격의 위치되어 있습니다.</li>\n<li>읽고, 쓰기 위한 비동기 API가 필요합니다.</li>\n<li>공공소유권으로 유저의 의사와 상관없이 변할수 있습니다.</li>\n<li>금방 “오래된” 데이터가 될 수 있습니다.</li>\n</ul>\n<h4 id=\"해당-문제가-일으키는-더-많은-문제들\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EB%8B%B9-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9D%BC%EC%9C%BC%ED%82%A4%EB%8A%94-%EB%8D%94-%EB%A7%8E%EC%9D%80-%EB%AC%B8%EC%A0%9C%EB%93%A4\" aria-label=\"해당 문제가 일으키는 더 많은 문제들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해당 문제가 일으키는 더 많은 문제들</h4>\n<ul>\n<li>캐싱</li>\n<li>동일한 데이터에 대한 여러 요청을 단일 요청으로 중복 제거</li>\n<li>오래된 데이터 업데이트</li>\n<li>데이터가 오래된 시점 알기</li>\n<li>신속한 데이터 반영</li>\n<li>성능 최적화</li>\n<li>서버상태 메모리 및 가비지 관리</li>\n<li>구조적 공유로 쿼리 결과 메모하기</li>\n</ul>\n<p>이러한 문제들을 해결하기 위해 리액트 쿼리가 개발되었습니다.</p>\n<br>\n<h1 id=\"라이프사이클과-기본-개념\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4%EA%B3%BC-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90\" aria-label=\"라이프사이클과 기본 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라이프사이클과 기본 개념</h1>\n<h4 id=\"기본문법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95\" aria-label=\"기본문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본문법</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  useQuery<span class=\"token punctuation\">,</span>\n  useMutation<span class=\"token punctuation\">,</span>\n  useQueryClient<span class=\"token punctuation\">,</span>\n  QueryClient<span class=\"token punctuation\">,</span>\n  QueryClientProvider<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n<span class=\"token comment\">// 서버와 통신하기 위한 fetch 및 axios api 모듈</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getTodos<span class=\"token punctuation\">,</span> postTodo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../my-api'</span>\n\n<span class=\"token comment\">// 쿼리 클라이언트를 생성합니다.</span>\n<span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 쿼리 프로바이더로 APP을 감싸줍니다.</span>\n    <span class=\"token comment\">// 해당 context 는 비동기를 처리하는 background 계층이 됩니다.</span>\n    <span class=\"token operator\">&lt;</span>QueryClientProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>queryClient<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Todos <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>QueryClientProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// APP내에서 쿼리클라이언트를 사용할수 있습니다.</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// userQuert = R</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isLoading<span class=\"token punctuation\">,</span> isError<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">queryFn</span><span class=\"token operator\">:</span> getTodos<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// useMutations = C,U,D</span>\n  <span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">mutationFn</span><span class=\"token operator\">:</span> postTodo<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 객체가 성공한다면..</span>\n      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">invalidateQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>data<span class=\"token operator\">?.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>button\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Do Laundry'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        Add Todo\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"라이프-사이클\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9D%B4%ED%94%84-%EC%82%AC%EC%9D%B4%ED%81%B4\" aria-label=\"라이프 사이클 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라이프 사이클</h4>\n<p>리액트 쿼리로 가져온 쿼리데이터는 다음과 같은 라이프 사이클을 가지고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fetching => fresh => stale => inactive => delete</code></pre></div>\n<p>각각에 대한 상세내용은 다음과 같습니다.</p>\n<ul>\n<li>fetching : 데이터 요청 상태입니다.</li>\n<li>fresh : 갱신될 필요가 없는 신선한 상태입니다.</li>\n<li>stale : 데이터가 갱신될 필요가 있는 상태입니다. fresh 상테에서 넘어오기까지 기본값은 0입니다</li>\n<li>inactive : 사용하지 않는 상태이며, 일정시간 이후 가비지 컬렉터가 캐시에서 제거합니다. 기본값은 5분입니다.</li>\n<li>delete : 데이터가 제거된 상태입니다.</li>\n</ul>\n<h4 id=\"usequery\" style=\"position:relative;\"><a href=\"#usequery\" aria-label=\"usequery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useQuery</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isLoading<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">queryFn</span><span class=\"token operator\">:</span> fetchTodoList<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>서버데이터를 가져오며, 읽는것에 특화되어 있습니다.</li>\n<li>첫번째 인자로 unique key, 두번째 인자로 프로미스 기반의 비동기 함수를 받습니다.</li>\n<li>각각의 status code와 관련된 상태를 가지고 있으며, 비동기 작업이 끝난후 업데이트 합니다.</li>\n<li>isLoading : 데이터의 로딩중인 status 입니다.</li>\n<li>data : 요청이 성공한 경우 리턴받는 값입니다.</li>\n<li>error : 요청이 실패한 경우 리턴받는 값입니다.</li>\n</ul>\n<h4 id=\"queryfn\" style=\"position:relative;\"><a href=\"#queryfn\" aria-label=\"queryfn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>queryFn</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> todoId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchTodoById</span><span class=\"token punctuation\">(</span>todoId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 이런식으로도 표현 가능하다</span>\n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> todoId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchTodoById</span><span class=\"token punctuation\">(</span>todoId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> data\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>useQuery두번째 인자의 비동기 함수입니다.</li>\n<li>함수를 직접 정의할수 있습니다.</li>\n</ul>\n<h4 id=\"usemutation\" style=\"position:relative;\"><a href=\"#usemutation\" aria-label=\"usemutation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useMutation</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newTodo</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// setQueryData를 통한 데이터 갱신</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token function\">useQueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>fetchAddSuperHero<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">prevData</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>prevData<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prevData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>mutation으로 서버데이터를 패칭합니다.</li>\n<li>주로 post,patch,delete 작업에 사용합니다.</li>\n<li>인자로는 비동기 함수를 받으며, 해당 작업이 끝난 이후 setQueryData,invalidateQueries 를 통해 쿼리키를 갱신하여 해당 쿼리키에 쿼리데이터를 stale한 상태로 변경합니다.</li>\n<li>단 setQueryData를 사용할 경우 data의 불변성을 지켜줘야 하기에 immer같은 라이브러리 사용을 권장합니다.</li>\n</ul>\n<h4 id=\"querykey\" style=\"position:relative;\"><a href=\"#querykey\" aria-label=\"querykey permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>queryKey</h4>\n<ul>\n<li>리액트 쿼리에서 상당히 중요한 개념인 쿼리키입니다.</li>\n<li>인자로 넘겨줬던 unique key는 쿼리키로 사용되어 쿼리캐싱을 관리합니다.</li>\n<li>쿼리키는 해시되기 때문에 다음과 같은 경우 주의가 필요합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 다음 쿼리들의 쿼리키는 모두 동일합니다.</span>\n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> page <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> status <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> page<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">other</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 다음 쿼리들의 쿼리키는 모두 동일하지 않습니다.</span>\n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>리액트 쿼리 v4부터는 모든 쿼리키는 배열형태로만 제공됩니다.</li>\n<li>기본적으로 같은 쿼리키를 공유하는 쿼리는 특정 조건이 아닌 경우 다시 쿼리가 마운트 되어도 리패칭 되지 않습니다.</li>\n</ul>\n<h4 id=\"staletime\" style=\"position:relative;\"><a href=\"#staletime\" aria-label=\"staletime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StaleTime</h4>\n<p>기본적으로 캐싱된 쿼리는 상태가 stale하지 않으면 리패칭을 진행하지 않습니다. 쿼리의 상태가 stale로 변화하는 시간이 StaleTime이며 default값은 0입니다.</p>\n<p>stale한 쿼리는 다음의 경우 리패칭을 시도합니다.</p>\n<ul>\n<li>\n<p>stlae 쿼리 인스턴스가 마운트되었을 때</p>\n<ul>\n<li>refetchOnMount 해당 옵션으로 조절가능</li>\n</ul>\n</li>\n<li>\n<p>브라우저 윈도우가 다시 포커스되었을 때 (탭이나 윈도우 이동)</p>\n<ul>\n<li>refetchOnWindowFocus 해당옵션으로 조절가능</li>\n</ul>\n</li>\n<li>\n<p>네트워크가 다시 연결되었을 때</p>\n<ul>\n<li>refetchOnReconnect 해당 옵션으로 조절가능</li>\n</ul>\n</li>\n<li>\n<p>refetchInterval 옵션이 있을 때</p>\n<ul>\n<li>해당옵션으로 폴링이 가능</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"parallel-queries\" style=\"position:relative;\"><a href=\"#parallel-queries\" aria-label=\"parallel queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parallel Queries</h4>\n<p>하나의 컴포넌트에서 2개이상의 쿼리를 실행시킬 경우 특별한 경우가 아니라면 병렬(공식문서에서 병렬이라 칭함)적으로 실행될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 병렬로 실행되는 쿼리들</span>\n  <span class=\"token keyword\">const</span> usersQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">queryFn</span><span class=\"token operator\">:</span> fetchUsers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> todoQuery <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'teams'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">queryFn</span><span class=\"token operator\">:</span> fetchTodo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// useQueries를 사용할수도 있습니다.</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token function\">useQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'teams'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">queryFn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"dependent-queries\" style=\"position:relative;\"><a href=\"#dependent-queries\" aria-label=\"dependent queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependent Queries</h4>\n<p>비동기함수를 체이닝하여 선,후행으로 사용해야 할 경우가 있을것입니다. 그럴 경우에 사용하는것이 종속쿼리입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 유저 정보를 가져옵니다</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">queryFn</span><span class=\"token operator\">:</span> getUser<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> user<span class=\"token operator\">?.</span>id\n\n<span class=\"token comment\">// 종속쿼리 user쿼리가 요청에 성공하여 userId가 반환될 경우 실행됩니다.</span>\n<span class=\"token comment\">// 이 경우 promise.all과 같이 하나의 배열에 각 객체값이 들어옵니다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> fetchStatus<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> todos <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">queryFn</span><span class=\"token operator\">:</span> getTodos<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 유저아이디가 있을경우 해당 속성이 변경됩니다</span>\n  <span class=\"token literal-property property\">enabled</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>userId<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"querycache\" style=\"position:relative;\"><a href=\"#querycache\" aria-label=\"querycache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QueryCache</h4>\n<p>전체 쿼리 클라이언트에 대한 성공/실패 분기처리를 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">queryCache</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> query</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        toast<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">에러가 났어요!!: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"option\" style=\"position:relative;\"><a href=\"#option\" aria-label=\"option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>option</h4>\n<ul>\n<li>enabled<br>\nfalse로 설정하면 쿼리가 자동으로 실행되지 않습니다.</li>\n<li>retry<br>\n쿼리가 실패한 경우에 대한 재시도 횟수</li>\n<li>staleTime<br>\n데이터가 stale state로 변경되는 시간 (Infinity로 설정하면 stale state로 변경되지 않습니다)</li>\n<li>cacheTime<br>\ninactive state의 캐시 데이터가 메모리에 남아있는 시간</li>\n<li>refetchInterval<br>\n설정한 시간(밀리초)에 따라 주기적으로 fetching 실행.</li>\n<li>refetchOnWindowFocus<br>\n창에 포커스가 된 경우에 대한 refetch 여부.</li>\n<li>sinitialData<br>\n쿼리의 초기값 설정</li>\n</ul>\n<br>\n<h1 id=\"vs-reudx\" style=\"position:relative;\"><a href=\"#vs-reudx\" aria-label=\"vs reudx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VS Reudx</h1>\n<p>우선적으로 리액트 쿼리는 전역 상태관리를 위한 라이브러리가 아닌점을 기본개념으로 가져가야 합니다. 대부분 많은 경우 Redux와 같은 전역 상태관리 라이브러리와 많이 비교하지만, 실질적으로는 개념이 다르며 동시에 사용하는 경우도 있습니다.</p>\n<p>다만 Redux thunk를 이용한 API 비동기 처리와 그 이후 데이터 핸들링을 주 목적으로 Redux를 사용하고 있었다면, 아주 좋은 대안으로 리액트 쿼리를 사용할 수 있습니다.</p>\n<h4 id=\"redux-case\" style=\"position:relative;\"><a href=\"#redux-case\" aria-label=\"redux case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux case</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// User.jsx</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setUser</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">changeToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUsersMeThunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>loading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>로그인 성공<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// Redux thunk middleware</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getUsersThunk <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/getUserState'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">get_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> userSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'User Info'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">birthdate</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">extraReducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>getUsersThunk<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>payload <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"react-query-case\" style=\"position:relative;\"><a href=\"#react-query-case\" aria-label=\"react query case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React query case</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isLoading<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">queryKey</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">queryFn</span><span class=\"token operator\">:</span> get_user<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>로그인 성공<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>다만 이경우는 단적인 예시일 뿐이며, 다양한 경우를 고려하여 잘 조합해 사용해야 합니다.</p>","frontmatter":{"title":"React Query","date":"February 16, 2023"}}},"pageContext":{"slug":"/React/리액트 쿼리(1)/","previous":{"fields":{"slug":"/Error/젠킨스 에러로그 개선기/"},"frontmatter":{"title":"FE CI/CD Jenkins 적용기"}},"next":{"fields":{"slug":"/WEB/2023.03.02 CORS/"},"frontmatter":{"title":"CORS에 대하여"}}}},"staticQueryHashes":["2486386679","3128451518"]}