<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Jeong.io]]></title><description><![CDATA[한걸음씩 천천히]]></description><link>https://jeongyeon9254.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 02 Mar 2023 18:36:14 GMT</lastBuildDate><item><title><![CDATA[CORS에 대하여]]></title><description><![CDATA[CORS 많이 들어보셨죠? 개발하다보면 CORS 관련 이슈는 항상 들어보실겁니다. 로컬환경에서 공공 API를 사용하거나, 웹 브라우저에서 CORS…]]></description><link>https://jeongyeon9254.github.io/WEB/2023.03.02 CORS/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/WEB/2023.03.02 CORS/</guid><pubDate>Thu, 02 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;cors-많이-들어보셨죠&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cors-%EB%A7%8E%EC%9D%B4-%EB%93%A4%EC%96%B4%EB%B3%B4%EC%85%A8%EC%A3%A0&quot; aria-label=&quot;cors 많이 들어보셨죠 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CORS 많이 들어보셨죠?&lt;/h1&gt;
&lt;p&gt;개발하다보면 CORS 관련 이슈는 항상 들어보실겁니다. 로컬환경에서 공공 API를 사용하거나, 웹 브라우저에서 CORS가 허용되지 않은 요청을 할때 많이 에러가 발생합니다.&lt;/p&gt;
&lt;p&gt;아마 대부분 클라이언트 개발을 하며 많이들 경험하시는 에러일것입니다. 다양한 api를 가져다 쓰며 한번쯤은 경험했던 CORS 에러에 대해 궁금했었지만 제대로 알지는 못했었는데&lt;/p&gt;
&lt;p&gt;오늘은 간단하게 CORS에 대해 정리를 해보겠습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;cors란-뭔가요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cors%EB%9E%80-%EB%AD%94%EA%B0%80%EC%9A%94&quot; aria-label=&quot;cors란 뭔가요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CORS란 뭔가요?&lt;/h2&gt;
&lt;p&gt;CORS는 교차 출처 리소스 공유(Cross-Origin Resource Sharing) 의 약자로 교차, 한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 브라우저에 알려주는 정책입니다.&lt;/p&gt;
&lt;p&gt;Cross야 그렇다 치는데.. 출처란 어떤의미인지 잘 모르신다면 지금 당장 크롬 개발자모드를 여시고, 콘솔창에 window.location.origin을 입력해 보시길 바랍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// naver 에서 입력해본다면..&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;origin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// https://www.naver.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그렇다면 url이 origin인 걸까요?&lt;br&gt;
정답은 부분적으로는 맞다는 것입니다.&lt;/p&gt;
&lt;p&gt;네이버 홈페이지에서 검색을 하고 네이버 검색페이지로 넘어가봅시다. 그 경우 url은 다음과 같은 값을 나타냅니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;https://search.naver.com/search.naver?where=nexearch&amp;amp;sm=top_hty&amp;amp;fbm=0&amp;amp;ie=utf8&amp;amp;query=123123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이때 해당 url에서 유심히 봐야할 부분은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;프로토콜 |     호스트      | 포트번호
https://search.naver.com:443&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;origin이란 프로토콜과 호스트(도메인), 그리고 포트번호를 합한값을 뜻합니다. 헌데, 일반적으로 우리는 &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; 과 같은 포트번호를 붙은 url을 본적이 없을겁니다.&lt;/p&gt;
&lt;p&gt;그 이유는 특별한 경우가 아닌 이상 http와 https 프로토콜의 경우 포트번호가 80과 443으로 고정되어 있기 때문입니다. 만약 포트번호를 직접 입력하거나, 다른 포트번호를 입력한다면 어떻게 될까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;https://naver.com:443 // 잘 접속이 됩니다
https://naver.com:444 // 접속이 되지 않습니다&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉 이러하듯 브라우저는 각각의 origin을 가지고 있고, &lt;b&gt;다른(교차) origin(출처) 에 대한 요청(리소스)을 받아오는것(공유)에 대한 정책&lt;/b&gt;이 바로 우리가 겪고있는 CORS입니다.&lt;/p&gt;
&lt;Br&gt;
&lt;h2 id=&quot;cors는-왜-있는걸까요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cors%EB%8A%94-%EC%99%9C-%EC%9E%88%EB%8A%94%EA%B1%B8%EA%B9%8C%EC%9A%94&quot; aria-label=&quot;cors는 왜 있는걸까요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CORS는 왜 있는걸까요?&lt;/h2&gt;
&lt;p&gt;CORS에 대해 정의를 간단하게 알아보았습니다. 그러면 이 정책이 왜 필요할까에 대한 의문점이 생깁니다. 그냥 이것저것 받아오게 하면 안되나 싶습니다.&lt;/p&gt;
&lt;p&gt;하지만 만약, 다음과 같은 경우가 발생한다면 사용자는 큰 위험에 빠질 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A 브라우저에서 로그인과 같은 권환이 필요한 인증절차를 수행함&lt;/li&gt;
&lt;li&gt;해커가 A 브라우저에서 개인정보를 가져와 자신에게 넘기는 명령을 만들어 유저에게 뿌림&lt;/li&gt;
&lt;li&gt;한 유저가 모른채로 해당 명령어를 받아 수행함&lt;/li&gt;
&lt;li&gt;A 브라우저에서는 이미 권한이 있으므로, 유저의 개인정보가 해커에게 넘어감&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;정말 간단해보이지만 이러한 방식을 CSRF(Cross Site Request Forgery) 라고 하며, 이런 공격을 막기 위해 브라우저는 정책을 가지게 되는데, 이를 SOP라고 합니다.&lt;/p&gt;
&lt;p&gt;SOP(Same-Origin Policy)는 2011년, 국제 인터넷 표준화 기구에서 RFC(Request for Comments) 6454에서 발표한 보안 정책으로 말 그대로 “같은 출처에서만 리소스를 공유할 수 있다”라는 규칙을 가진 정책입니다.&lt;br&gt;
출처 : &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6454#page-5&quot;&gt;https://www.rfc-editor.org/rfc/rfc6454#page-5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 공격을 막기위해 SOP정책을 세웠지만, 인터넷이 발달하며 다양한 리소스를 사용하는것은 불가피한 선택이 되었습니다. 이에 SOP에서도 다음과 같은 예외를 두기로 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;script: 다른 출처(cross-origin)의 스크립트를 문서에 삽입(embed)하는 것은 가능하지만, fetch API 등을 이용하여 다른 출처로 요청을 날리는 것은 불가능합니다.&lt;/li&gt;
&lt;li&gt;css: link 혹은 @import로 다른 출처의 css를 삽입할 수 있습니다. 이때 올바른 Content-Type 헤더가 설정되어야 할 수도 있습니다.&lt;/li&gt;
&lt;li&gt;iframe: X-Frame-Options 응답 헤더가 DENY 혹은 SAMEORIGIN이 아닌 이상, 일반적으로 다른 출처의 iframe을 삽입하는 것은 가능합니다. 하지만 자바스크립트 등을 이용하여 다른 출처의 iframe에 접근하는 것은 불가능합니다.&lt;/li&gt;
&lt;li&gt;form: form 태그의 action 속성값으로 출처가 다른 URL을 사용할 수 있습니다. 즉, 다른 출처로 폼 데이터를 전송하는 것이 가능합니다.&lt;/li&gt;
&lt;li&gt;image: 다른 출처의 이미지를 삽입하는 것은 가능합니다. 하지만 자바스크립트 등을 이용하여 다른 출처의 이미지를 읽는 것은 불가능합니다 (자바스크립트를 이용하여 다른 출처의 이미지를 canvas에 삽입하는 경우)&lt;/li&gt;
&lt;li&gt;multimedia: 다른 출처의 오디오·비디오를 삽입할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;프로토콜 |     호스트      | 포트번호
https://search.naver.com:443&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위에서 보았던 origin을 다시한번 가져와서 볼 경우 SOP는 프로토콜과 호스트, 포트번호가 모두 같은 출처에서 온 요청만을 허락합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;프로토콜 |     호스트      | 포트번호
https://search.naver.com:443/about  // origin 일치
http://search.naver.com:443         // 프로토콜 불일치
https://search.daum.com:443         // 호스트 불일치
https://search.naver.net:443        // 호스트 불일치
https://search.naver.com:131        // 포트번호 불일치

* origin 이후 패스나 파라미터를 통해 같은 출처에서 자원을 받습니다.
* IE의 경우 origin에서 포트번호를 보지 않는다고 합니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 결국 다른 출처에 대한 요청이 불가피해지면서 이를 해결하기 위한 방법으로 CORS정책이 나오게 됩니다.&lt;/p&gt;
&lt;p&gt;즉 SOP정책의 예외 중 하나의 케이스로 CORS정책이 존재하며, 이 덕분에 우리는 다른 출처에 대한 요청을 할수 있게 됩니다.&lt;/p&gt;
&lt;Br&gt;
&lt;h2 id=&quot;cors는-어떻게-동작하나요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cors%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%98%EB%82%98%EC%9A%94&quot; aria-label=&quot;cors는 어떻게 동작하나요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CORS는 어떻게 동작하나요?&lt;/h2&gt;
&lt;p&gt;기본적으로 웹 클라이언트 어플리케이션이 다른 출처의 리소스를 요청할 때는 HTTP 프로토콜을 사용하여 요청을 보내게 되는데, 이때 브라우저는 요청 헤더에 Origin이라는 필드에 요청을 보내는 출처를 함께 담아보냅니다.&lt;/p&gt;
&lt;p&gt;이후 서버가 이 요청에 대한 응답을 할 때 응답 헤더의 Access-Control-Allow-Origin이라는 값에 “이 리소스를 접근하는 것이 허용된 출처 또는 *”를 내려주고, 이후 응답을 받은 브라우저는 자신이 보냈던 요청의 Origin과 서버가 보내준 응답의 Access-Control-Allow-Origin을 비교해본 후 이 응답이 유효한 응답인지 아닌지를 결정합니다.&lt;/p&gt;
&lt;p&gt;보기에는 간단해 보이지만 조금 더 깊게 들어가면 CORS 요청은 다음과 같이 세 가지 유형으로 나눠질 수 있습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;프리플라이트-요청-preflight-request&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A6%AC%ED%94%8C%EB%9D%BC%EC%9D%B4%ED%8A%B8-%EC%9A%94%EC%B2%AD-preflight-request&quot; aria-label=&quot;프리플라이트 요청 preflight request permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프리플라이트 요청 (Preflight Request)&lt;/h3&gt;
&lt;p&gt;서버에 실제 요청을 보내기 전에 예비 요청에 해당하는 프리플라이트 요청(Preflight Request)을 먼저 보내서 실제 요청이 전송하기에 안전한지 확인하는 방법입니다.&lt;/p&gt;
&lt;p&gt;예비요청이 안전하다면 본 요청을 서버에게 보내며 총 두번의 요청을 보내게 됩니다.&lt;/p&gt;
&lt;p&gt;프리플라이트 요청의 특징은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메소드로 OPTIONS를 사용합니다.&lt;/li&gt;
&lt;li&gt;Origin 헤더에 자신의 Origin을 설정합니다.&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Method 헤더에 실제 요청에 사용할 메소드를 설정합니다.&lt;/li&gt;
&lt;li&gt;Access-Control-Request-Headers 헤더에 실제 요청에 사용할 헤더들을 설정합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;이후 서버는 이러한 프리플라이트 요청에 대해 다음과 같은 특징을 가진 응답을 제공해야 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access-Control-Allow-Origin 헤더에 허용되는 Origin들의 목록 혹은 와일드카드(*)를 설정합니다.&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Methods 헤더에 허용되는 메소드들의 목록 혹은 와일드카드(*)를 설정합니다.&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Headers 헤더에 허용되는 헤더들의 목록 혹은 와일드카드(*)를 설정합니다.&lt;/li&gt;
&lt;li&gt;Access-Control-Max-Age 헤더에 해당 프리플라이트 요청이 브라우저에 캐시 될 수 있는 시간을 초 단위로 설정합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;이러한 응답을 받고 나면 브라우저는 이 응답의 정보를 자신이 전송한 요청의 정보와 비교하여 실제 요청의 안전성을 검사합니다. 예비 요청의 200응답이 오더라도 이 응답 이후 CORS를 판단하므로, 200응답과는 별개의 과정을 거칩니다.&lt;/p&gt;
&lt;p&gt;만약 이 안전성 검사에 통과하게 된다면, 그때서야 실제 요청을 서버에게 보내게 됩니다. 이후 Access-Control-Request-XXX 형태의 헤더는 보내지 않습니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;/content/cors/cors_1.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;단순-요청-simple-request&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%88%9C-%EC%9A%94%EC%B2%AD-simple-request&quot; aria-label=&quot;단순 요청 simple request permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단순 요청 (Simple Request)&lt;/h3&gt;
&lt;p&gt;단순요청의 조건은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메소드가 GET, HEAD, POST 중 하나여야 합니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User Agent가 자동으로 설정한 헤더를 제외하면, 아래와 같은 헤더들만 사용할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;Accept-Language&lt;/li&gt;
&lt;li&gt;Content-Language&lt;/li&gt;
&lt;li&gt;Content-Type&lt;/li&gt;
&lt;li&gt;DPR&lt;/li&gt;
&lt;li&gt;Downlink (en-US)&lt;/li&gt;
&lt;li&gt;Save-Data&lt;/li&gt;
&lt;li&gt;Viewport-Width&lt;/li&gt;
&lt;li&gt;Width&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content-Type 헤더에는 아래와 같은 값들만 설정할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application/x-www-form-urlencode&lt;/li&gt;
&lt;li&gt;multipart/form-data&lt;/li&gt;
&lt;li&gt;text/plain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위와 같은 조건을 만족할 경우 안전한 요청으로 취급하여 단순요청을 보낼수 있게 됩니다. 이 경우 프리플라이트 요청와는 다르게 단 한번의 요청만을 보내게 됩니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;/content/cors/cors_3.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;인증-정보를-포함한-요청-credentialed-request&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EC%A6%9D-%EC%A0%95%EB%B3%B4%EB%A5%BC-%ED%8F%AC%ED%95%A8%ED%95%9C-%EC%9A%94%EC%B2%AD-credentialed-request&quot; aria-label=&quot;인증 정보를 포함한 요청 credentialed request permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인증 정보를 포함한 요청 (Credentialed Request)&lt;/h3&gt;
&lt;p&gt;인증 정보(Credential)란 쿠키(Cookie) 혹은 Authorization 헤더에 설정하는 토큰 값 등을 말합니다. 만약 이러한 인증 정보를 함께 보내야 하는 요청(Credentialed Request)이라면, 별도로 따라줘야 하는 CORS 정책이 존재합니다.&lt;/p&gt;
&lt;p&gt;XMLHttpRequest, jQuery의 ajax, 또는 axios를 사용한다면 withCredentials 옵션을 true로 설정해줘야 합니다.&lt;/p&gt;
&lt;p&gt;fetch API를 사용한다면 credentials 옵션을 include로 설정해줘야 합니다.&lt;/p&gt;
&lt;p&gt;이러한 별도의 설정을 해주지 않으면 쿠키 등의 인증 정보는 절대로 자동으로 서버에게 전송되지 않습니다&lt;/p&gt;
&lt;p&gt;그리고 이 경우 서버의 응답 또한 위 경우와는 차이가 있습니다. 응답의 Access-Control-Allow-Origin 헤더가 와일드카드(*)가 아닌 분명한 Origin으로 설정되어야 하고, Access-Control-Allow-Credentials 헤더는 true로 설정되어야 합니다.&lt;/p&gt;
&lt;p&gt;그렇지 않으면 브라우저에 의해 응답이 거부될 수 있습니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;/content/cors/cors_2.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;Br&gt;
&lt;h2 id=&quot;cors는-어떻게-해결하나요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cors%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%82%98%EC%9A%94&quot; aria-label=&quot;cors는 어떻게 해결하나요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CORS는 어떻게 해결하나요?&lt;/h2&gt;
&lt;h3 id=&quot;서버의-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B2%84%EC%9D%98-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;서버의 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서버의 경우&lt;/h3&gt;
&lt;p&gt;스프링의 경우 @CrossOrigin 어노테이션을 사용하고, 장고의 경우 django-cors-headers를 통해 특정 도메인이나 모든 요청에 대해 CORS 정책을 허용해 줄 수 있습니다. 이후 브라우저에서는 기본적으로 허용이 된 서버에서 약속한 도메인에서 요청을 호출하는 방법이 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;클라이언트의-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%9D%98-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;클라이언트의 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클라이언트의 경우&lt;/h3&gt;
&lt;p&gt;npm에서는 http-proxy-middleware같은 라이브러리를 이용하여 프록시 설정을 통해 브라우저를 속일수 있습니다. 가령 origin/api 에서 cross-origin/api에 대한 요청을 받고싶을 경우 앱이 cross-origin/api으로 요청을 프록싱해주어 CORS이슈를 회피할수 있습니다.&lt;/p&gt;
&lt;p&gt;또는 내장 라이브러리중 fetch의 경우 mode : no-cors 라는 옵션이 있는데, 해당 옵션으로 요청을 보낼 경우 CORS정책을 무시하고 응답을 받게 됩니다. 다만 이 경우 “HEAD”, “GET”, 또는 “POST” 이외의 명령을 금지하며 브라우저는 Response로 전달되는 객체의 어떤값도 접근할수 없습니다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;참고&lt;br&gt;
&lt;a href=&quot;https://it-eldorado.tistory.com/163&quot;&gt;https://it-eldorado.tistory.com/163&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://evan-moon.github.io/2020/05/21/about-cors/#%EA%B0%99%EC%9D%80-%EC%B6%9C%EC%B2%98%EC%99%80-%EB%8B%A4%EB%A5%B8-%EC%B6%9C%EC%B2%98%EC%9D%98-%EA%B5%AC%EB%B6%84&quot;&gt;https://evan-moon.github.io/2020/05/21/about-cors/#%EA%B0%99%EC%9D%80-%EC%B6%9C%EC%B2%98%EC%99%80-%EB%8B%A4%EB%A5%B8-%EC%B6%9C%EC%B2%98%EC%9D%98-%EA%B5%AC%EB%B6%84&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React Query]]></title><description><![CDATA[…]]></description><link>https://jeongyeon9254.github.io/React/리액트 쿼리(1)/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/React/리액트 쿼리(1)/</guid><pubDate>Thu, 16 Feb 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;프론트의-역할&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%9D%98-%EC%97%AD%ED%95%A0&quot; aria-label=&quot;프론트의 역할 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프론트의 역할?&lt;/h1&gt;
&lt;p&gt;제 개인적인 의견이지만, 누군가가 프론트의 중요한 역할이 무엇이냐고 물어본다면 가장 심플하게 데이터를 잘 받아와, 유저에게 잘 보여주는 것 이라고 대답할것입니다.&lt;/p&gt;
&lt;p&gt;물론 그것이 전부는 아니겠지만, 일반적인 웹&amp;#x26;앱 서비스에서 가장 많은 부분을 차지하는것은 데이터를 보여주는 일입니다.&lt;/p&gt;
&lt;p&gt;그래서 우리는 잘 보여주기 위해 리액트나 뷰, 스벨트 등의 프레임워크를 사용하곤 합니다. DOM을 더 쉽고 간단하게 컨트롤해서 유저에게 더 좋은 UI를 보여주기 위함이죠.&lt;/p&gt;
&lt;p&gt;하지만 그만큼 중요한것이 데이터를 잘 받아오는 일입니다. 아마 fetch 이벤트나 대부분의 경우 axios를 사용하여 백엔드와 통신을 할 것입니다. 그리고 대부분의 경우 내부 state 내지 전역상태관리 라이브러리를 이용하여 백엔드에서 받은 데이터를 보여줄 것입니다.&lt;/p&gt;
&lt;p&gt;이 과정을 좀 더 쉽고 간단하게 바꿔줄 리액트 쿼리에 대해 알아보겠습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h1 id=&quot;리액트-쿼리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BF%BC%EB%A6%AC&quot; aria-label=&quot;리액트 쿼리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리액트 쿼리&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/content/react/query_1.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;대부분 기존 상태관리 라이브러리는 내부 state관리에는 용이하나, 서버 상태관리에는 어려움이 있었습니다.&lt;/p&gt;
&lt;h4 id=&quot;클라이언트에서-관리하는-서버상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EC%84%9C%EB%B2%84%EC%83%81%ED%83%9C&quot; aria-label=&quot;클라이언트에서 관리하는 서버상태 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클라이언트에서 관리하는 서버상태&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;유저가 소유하거나 통제할수 없는 원격의 위치되어 있습니다.&lt;/li&gt;
&lt;li&gt;읽고, 쓰기 위한 비동기 API가 필요합니다.&lt;/li&gt;
&lt;li&gt;공공소유권으로 유저의 의사와 상관없이 변할수 있습니다.&lt;/li&gt;
&lt;li&gt;금방 “오래된” 데이터가 될 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;해당-문제가-일으키는-더-많은-문제들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EB%8B%B9-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9D%BC%EC%9C%BC%ED%82%A4%EB%8A%94-%EB%8D%94-%EB%A7%8E%EC%9D%80-%EB%AC%B8%EC%A0%9C%EB%93%A4&quot; aria-label=&quot;해당 문제가 일으키는 더 많은 문제들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해당 문제가 일으키는 더 많은 문제들&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;캐싱&lt;/li&gt;
&lt;li&gt;동일한 데이터에 대한 여러 요청을 단일 요청으로 중복 제거&lt;/li&gt;
&lt;li&gt;오래된 데이터 업데이트&lt;/li&gt;
&lt;li&gt;데이터가 오래된 시점 알기&lt;/li&gt;
&lt;li&gt;신속한 데이터 반영&lt;/li&gt;
&lt;li&gt;성능 최적화&lt;/li&gt;
&lt;li&gt;서버상태 메모리 및 가비지 관리&lt;/li&gt;
&lt;li&gt;구조적 공유로 쿼리 결과 메모하기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 문제들을 해결하기 위해 리액트 쿼리가 개발되었습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h1 id=&quot;라이프사이클과-기본-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4%EA%B3%BC-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;라이프사이클과 기본 개념 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;라이프사이클과 기본 개념&lt;/h1&gt;
&lt;h4 id=&quot;기본문법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95&quot; aria-label=&quot;기본문법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기본문법&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  useQuery&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  useMutation&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  useQueryClient&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  QueryClient&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  QueryClientProvider&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@tanstack/react-query&apos;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 서버와 통신하기 위한 fetch 및 axios api 모듈&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getTodos&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; postTodo &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../my-api&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 쿼리 클라이언트를 생성합니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;QueryClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 쿼리 프로바이더로 APP을 감싸줍니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 해당 context 는 비동기를 처리하는 background 계층이 됩니다.&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;QueryClientProvider client&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;queryClient&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Todos &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;QueryClientProvider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Todos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// APP내에서 쿼리클라이언트를 사용할수 있습니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQueryClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// userQuert = R&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; isLoading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isError&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;queryFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; getTodos&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// useMutations = C,U,D&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mutation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useMutation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;mutationFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; postTodo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 객체가 성공한다면..&lt;/span&gt;
      queryClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invalidateQueries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button
        onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          mutation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Do Laundry&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        Add Todo
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;라이프-사이클&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%9D%BC%EC%9D%B4%ED%94%84-%EC%82%AC%EC%9D%B4%ED%81%B4&quot; aria-label=&quot;라이프 사이클 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;라이프 사이클&lt;/h4&gt;
&lt;p&gt;리액트 쿼리로 가져온 쿼리데이터는 다음과 같은 라이프 사이클을 가지고 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;fetching =&gt; fresh =&gt; stale =&gt; inactive =&gt; delete&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각각에 대한 상세내용은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fetching : 데이터 요청 상태입니다.&lt;/li&gt;
&lt;li&gt;fresh : 갱신될 필요가 없는 신선한 상태입니다.&lt;/li&gt;
&lt;li&gt;stale : 데이터가 갱신될 필요가 있는 상태입니다. fresh 상테에서 넘어오기까지 기본값은 0입니다&lt;/li&gt;
&lt;li&gt;inactive : 사용하지 않는 상태이며, 일정시간 이후 가비지 컬렉터가 캐시에서 제거합니다. 기본값은 5분입니다.&lt;/li&gt;
&lt;li&gt;delete : 데이터가 제거된 상태입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;usequery&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#usequery&quot; aria-label=&quot;usequery permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useQuery&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; isLoading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;queryFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; fetchTodoList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;서버데이터를 가져오며, 읽는것에 특화되어 있습니다.&lt;/li&gt;
&lt;li&gt;첫번째 인자로 unique key, 두번째 인자로 프로미스 기반의 비동기 함수를 받습니다.&lt;/li&gt;
&lt;li&gt;각각의 status code와 관련된 상태를 가지고 있으며, 비동기 작업이 끝난후 업데이트 합니다.&lt;/li&gt;
&lt;li&gt;isLoading : 데이터의 로딩중인 status 입니다.&lt;/li&gt;
&lt;li&gt;data : 요청이 성공한 경우 리턴받는 값입니다.&lt;/li&gt;
&lt;li&gt;error : 요청이 실패한 경우 리턴받는 값입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;queryfn&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#queryfn&quot; aria-label=&quot;queryfn permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;queryFn&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; todoId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchTodoById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;todoId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 이런식으로도 표현 가능하다&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; todoId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchTodoById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;todoId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; data
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;useQuery두번째 인자의 비동기 함수입니다.&lt;/li&gt;
&lt;li&gt;함수를 직접 정의할수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;usemutation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#usemutation&quot; aria-label=&quot;usemutation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useMutation&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mutation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useMutation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newTodo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newTodo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// setQueryData를 통한 데이터 갱신&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;addTodos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQueryClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useMutation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetchAddSuperHero&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      queryClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setQueryData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;prevData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;prevData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;prevData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;mutation으로 서버데이터를 패칭합니다.&lt;/li&gt;
&lt;li&gt;주로 post,patch,delete 작업에 사용합니다.&lt;/li&gt;
&lt;li&gt;인자로는 비동기 함수를 받으며, 해당 작업이 끝난 이후 setQueryData,invalidateQueries 를 통해 쿼리키를 갱신하여 해당 쿼리키에 쿼리데이터를 stale한 상태로 변경합니다.&lt;/li&gt;
&lt;li&gt;단 setQueryData를 사용할 경우 data의 불변성을 지켜줘야 하기에 immer같은 라이브러리 사용을 권장합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;querykey&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#querykey&quot; aria-label=&quot;querykey permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;queryKey&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;리액트 쿼리에서 상당히 중요한 개념인 쿼리키입니다.&lt;/li&gt;
&lt;li&gt;인자로 넘겨줬던 unique key는 쿼리키로 사용되어 쿼리캐싱을 관리합니다.&lt;/li&gt;
&lt;li&gt;쿼리키는 해시되기 때문에 다음과 같은 경우 주의가 필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 다음 쿼리들의 쿼리키는 모두 동일합니다.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; status&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; page &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 다음 쿼리들의 쿼리키는 모두 동일하지 않습니다.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;리액트 쿼리 v4부터는 모든 쿼리키는 배열형태로만 제공됩니다.&lt;/li&gt;
&lt;li&gt;기본적으로 같은 쿼리키를 공유하는 쿼리는 특정 조건이 아닌 경우 다시 쿼리가 마운트 되어도 리패칭 되지 않습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;staletime&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#staletime&quot; aria-label=&quot;staletime permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;StaleTime&lt;/h4&gt;
&lt;p&gt;기본적으로 캐싱된 쿼리는 상태가 stale하지 않으면 리패칭을 진행하지 않습니다. 쿼리의 상태가 stale로 변화하는 시간이 StaleTime이며 default값은 0입니다.&lt;/p&gt;
&lt;p&gt;stale한 쿼리는 다음의 경우 리패칭을 시도합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;stlae 쿼리 인스턴스가 마운트되었을 때&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;refetchOnMount 해당 옵션으로 조절가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;브라우저 윈도우가 다시 포커스되었을 때 (탭이나 윈도우 이동)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;refetchOnWindowFocus 해당옵션으로 조절가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;네트워크가 다시 연결되었을 때&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;refetchOnReconnect 해당 옵션으로 조절가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;refetchInterval 옵션이 있을 때&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당옵션으로 폴링이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;parallel-queries&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#parallel-queries&quot; aria-label=&quot;parallel queries permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Parallel Queries&lt;/h4&gt;
&lt;p&gt;하나의 컴포넌트에서 2개이상의 쿼리를 실행시킬 경우 특별한 경우가 아니라면 병렬(공식문서에서 병렬이라 칭함)적으로 실행될 것입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 병렬로 실행되는 쿼리들&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; usersQuery &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;users&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; fetchUsers &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; todoQuery &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;teams&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;queryFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; fetchTodo &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// useQueries를 사용할수도 있습니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQueries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;users&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function-variable function&quot;&gt;queryFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;teams&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token function-variable function&quot;&gt;queryFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;dependent-queries&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dependent-queries&quot; aria-label=&quot;dependent queries permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependent Queries&lt;/h4&gt;
&lt;p&gt;비동기함수를 체이닝하여 선,후행으로 사용해야 할 경우가 있을것입니다. 그럴 경우에 사용하는것이 종속쿼리입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 유저 정보를 가져옵니다&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; user &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;queryFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; getUser&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; userId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; user&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;id

&lt;span class=&quot;token comment&quot;&gt;// 종속쿼리 user쿼리가 요청에 성공하여 userId가 반환될 경우 실행됩니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 이 경우 promise.all과 같이 하나의 배열에 각 객체값이 들어옵니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; status&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fetchStatus&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; todos &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;queryFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; getTodos&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 유저아이디가 있을경우 해당 속성이 변경됩니다&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;querycache&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#querycache&quot; aria-label=&quot;querycache permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;QueryCache&lt;/h4&gt;
&lt;p&gt;전체 쿼리 클라이언트에 대한 성공/실패 분기처리를 할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;QueryClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;queryCache&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;QueryCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        toast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;에러가 났어요!!: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;option&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#option&quot; aria-label=&quot;option permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;option&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;enabled&lt;br&gt;
false로 설정하면 쿼리가 자동으로 실행되지 않습니다.&lt;/li&gt;
&lt;li&gt;retry&lt;br&gt;
쿼리가 실패한 경우에 대한 재시도 횟수&lt;/li&gt;
&lt;li&gt;staleTime&lt;br&gt;
데이터가 stale state로 변경되는 시간 (Infinity로 설정하면 stale state로 변경되지 않습니다)&lt;/li&gt;
&lt;li&gt;cacheTime&lt;br&gt;
inactive state의 캐시 데이터가 메모리에 남아있는 시간&lt;/li&gt;
&lt;li&gt;refetchInterval&lt;br&gt;
설정한 시간(밀리초)에 따라 주기적으로 fetching 실행.&lt;/li&gt;
&lt;li&gt;refetchOnWindowFocus&lt;br&gt;
창에 포커스가 된 경우에 대한 refetch 여부.&lt;/li&gt;
&lt;li&gt;sinitialData&lt;br&gt;
쿼리의 초기값 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;vs-reudx&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vs-reudx&quot; aria-label=&quot;vs reudx permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VS Reudx&lt;/h1&gt;
&lt;p&gt;우선적으로 리액트 쿼리는 전역 상태관리를 위한 라이브러리가 아닌점을 기본개념으로 가져가야 합니다. 대부분 많은 경우 Redux와 같은 전역 상태관리 라이브러리와 많이 비교하지만, 실질적으로는 개념이 다르며 동시에 사용하는 경우도 있습니다.&lt;/p&gt;
&lt;p&gt;다만 Redux thunk를 이용한 API 비동기 처리와 그 이후 데이터 핸들링을 주 목적으로 Redux를 사용하고 있었다면, 아주 좋은 대안으로 리액트 쿼리를 사용할 수 있습니다.&lt;/p&gt;
&lt;h4 id=&quot;redux-case&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#redux-case&quot; aria-label=&quot;redux case permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Redux case&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// User.jsx&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setLoading&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;setUser&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;changeToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;token&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUsersMeThunk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;loading &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;로그인 성공&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Redux thunk middleware&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getUsersThunk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createAsyncThunk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;user/getUserState&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; data
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; userSlice &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createSlice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;User Info&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;birthdate&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;reducers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;extraReducers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;getUsersThunk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fulfilled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; payload &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;info &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;payload &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;react-query-case&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react-query-case&quot; aria-label=&quot;react query case permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React query case&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; isLoading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;queryKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;queryFn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; get_user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;로그인 성공&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다만 이경우는 단적인 예시일 뿐이며, 다양한 경우를 고려하여 잘 조합해 사용해야 합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[FE CI/CD Jenkins 적용기]]></title><description><![CDATA[따듯한 netlify에서 젠킨스로 이동하며.. 이전 FE CI/CD는 netlify를 이용하고 있었습니다. netlify는 CI/CD뿐만 아니라 배포부터 CDN,DNS까지 모두 제공해주는 좋은 플랫폼입니다. 하지만 이번에 인프라를 전체적으로 AWS…]]></description><link>https://jeongyeon9254.github.io/Error/젠킨스 에러로그 개선기/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Error/젠킨스 에러로그 개선기/</guid><pubDate>Thu, 09 Feb 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;따듯한-netlify에서-젠킨스로-이동하며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%94%B0%EB%93%AF%ED%95%9C-netlify%EC%97%90%EC%84%9C-%EC%A0%A0%ED%82%A8%EC%8A%A4%EB%A1%9C-%EC%9D%B4%EB%8F%99%ED%95%98%EB%A9%B0&quot; aria-label=&quot;따듯한 netlify에서 젠킨스로 이동하며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;따듯한 netlify에서 젠킨스로 이동하며..&lt;/h2&gt;
&lt;p&gt;이전 FE CI/CD는 netlify를 이용하고 있었습니다. netlify는 CI/CD뿐만 아니라 배포부터 CDN,DNS까지 모두 제공해주는 좋은 플랫폼입니다.&lt;/p&gt;
&lt;p&gt;하지만 이번에 인프라를 전체적으로 AWS로 통합할 계획이 있었고(전체적인 스택 통일과 개발비관리, 그리고 액세스로그를 보고싶었습니다) CI/CD 는 젠킨스, 전체적인 배포 인프라는 s3를 통한 정적 웹호스팅을 기반으로 clodfront와 route53을 이용하기로 했습니다.&lt;/p&gt;
&lt;p&gt;사실 배포 이후 과정은 크게 어렵지 않아 문제가 없었습니다.&lt;/p&gt;
&lt;p&gt;다만 젠킨스는 이번에 첫 이용이며 이미 BE서버에 올라간 젠킨스를 통해 배포를 하려다 보니 이해도가 낮아 자잘한 이슈들이 많았습니다. 그 자잘한 이슈들을 정리해보려 합니다.&lt;/p&gt;
&lt;h2 id=&quot;1-env파일을-어떻게-관리할것인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-env%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B4%80%EB%A6%AC%ED%95%A0%EA%B2%83%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;1 env파일을 어떻게 관리할것인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. env파일을 어떻게 관리할것인가?&lt;/h2&gt;
&lt;p&gt;레포에 올라가면 안되는 key값의 관리들은 netlify에서는 environment variables를 통해 관리했습니다. 하지만 젠킨스를 통해 배포가 될 경우 결국 정적인 파일을 s3에 올리는것뿐이기에 env파일이 필요했습니다.&lt;/p&gt;
&lt;p&gt;그렇다고 env파일을 레포에 올릴수는 없기에 젠킨스 파이프 라인에서 매개변수를 등록하고 해당 매개변수를 받아 스크립트에서 env 파일을 만드는 방식으로 진행했습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;젠킨스 스트링 파라미터로 매개변수를 등록합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/error/jenkins_1.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매개변수를 받아 파이프라인에서 env 파일을 만듭니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// package install &amp;amp;&amp;amp; create .env
stage(&apos;yarn install&apos;) {
    steps {
        echo &apos;yarn install start&apos;
        sh &apos;&apos;&apos;
        yarn install
        echo &apos;REACT_APP_EARLY_URI=&quot;${REACT_APP_EARLY_URI}&quot;&apos; &gt; .env
        &apos;&apos;&apos;
        echo &apos;yarn install done&apos;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-빌드가-멈추지-않고-젠킨스가-뻗어버렸다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%B9%8C%EB%93%9C%EA%B0%80-%EB%A9%88%EC%B6%94%EC%A7%80-%EC%95%8A%EA%B3%A0-%EC%A0%A0%ED%82%A8%EC%8A%A4%EA%B0%80-%EB%BB%97%EC%96%B4%EB%B2%84%EB%A0%B8%EB%8B%A4&quot; aria-label=&quot;2 빌드가 멈추지 않고 젠킨스가 뻗어버렸다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 빌드가 멈추지 않고 젠킨스가 뻗어버렸다&lt;/h2&gt;
&lt;p&gt;파이프라인 작성 후 실질적으로 젠킨스를 이용해 build를 진행해 보는데, 자꾸만 install 이후 build job에서 무한 루프에 빠지기 시작합니다. 이 job때문에 아예 젠킨스로 접속도 되지않는 사태가 발생합니다.&lt;/p&gt;
&lt;p&gt;여차저차해서 이유를 알게 됬는데, build 시에 젠킨스의 할당된 메모리가 부족한 메모리 이슈임을 알게됬습니다.&lt;/p&gt;
&lt;p&gt;일단 엄청나게 많은 메모리가 필요할거라고 생각하진 않고, 팀원분의 도움을 받아 젠킨스 스왑메모리를 설정했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. 젠킨스가 있는 ec2에서 스왑파일을 잡아줍니다.
sudo dd if=/dev/zero of=/swapfile bs=128M count=32

2. 스왑파일에 권한을 바꿔줍니다.
sudo chmod 600 /swapfile

3. 스왑파일 영역을 설정해줍니다.
sudo mkswap /swapfile

4. 스왑공간에 파일을 추가합니다.
sudo swapon /swapfile

5. 편집기를 열어 아래파일을 열어줍니다.
sudo vi /etc/fstab

6. 아래 명령어를 끝에 추가해줍니다.
/swapfile swap swap defaults 0 0

7. 이후 젠킨스 config파일을 열어줍니다.
vi /etc/default/jenkins

8. JVM 용량을 알아서 적어줍니다.
# Allow graphs etc. to work even when an X server is present
JAVA_ARGS = &quot;-Django.awt.headless = true&quot;
JAVA_ARGS = &quot;-Xm1024m&quot; &amp;lt;--해당 명령어를 적어줍니다

9. 이후 젠킨스를 리스타트해줍니다.

build success!!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;3-다시-뻗어버린-젠킨스-왜&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%8B%A4%EC%8B%9C-%EB%BB%97%EC%96%B4%EB%B2%84%EB%A6%B0-%EC%A0%A0%ED%82%A8%EC%8A%A4-%EC%99%9C&quot; aria-label=&quot;3 다시 뻗어버린 젠킨스 왜 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 다시 뻗어버린 젠킨스 왜..&lt;/h2&gt;
&lt;p&gt;CI/CD를 젠킨스로 변경한 이후 잘만 배포하다가 갑자기 build가 30분이상 진행되면서 또다시 젠킨스가 뻗어버립니다.&lt;/p&gt;
&lt;p&gt;젠킨스를 재시작하고 콘솔 아웃풋을 확인했지만 별다른 에러로그가 남지 않았으며, 어느시간부터 어떤과정이 메모리를 크게 잡아먹었는지도 알수가 없었습니다.&lt;/p&gt;
&lt;p&gt;다만 에러를 확인하려 리트라이를 눌렀을때 다른 배포가 없었음에도 정상적으로 build가 완료되었습니다. 이에 앞으로의 사후처리를 위해 로그를 좀더 꼼꼼하게 남기도록 변경했습니다.&lt;/p&gt;
&lt;p&gt;우선적으로 빌드시 메모리를 많이 사용해 다시 뻗는일이 없게하기 위해 타임아웃을 설정하고, 해당 과정에서 어느시간대에 무슨일이 일어났는지 확인하기 위해 타임스태프 옵션도 추가합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    // 전역 options
    options {
        timestamps()
        timeout(time: 180, unit: &quot;SECONDS&quot;)
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 react build시에 어떤과정에서 얼만큼의 시간이 소요되는지 확인을 위해 speed-measure-webpack-plugin 을 사용하려 합니다.&lt;/p&gt;
&lt;p&gt;다만 저희 회사에 프로젝트는 CRA기반이며 eject는 고려대상이 아니었습니다. 그래서 webpack 오버라이딩을 위해 react-app-rewired 와 customize-cra를 사용했습니다.&lt;/p&gt;
&lt;p&gt;우선 2가지 라이브러리를 설치해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add react-app-rewired
yarn add customize-cra -D&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이후 package.json에서 스크립트를 변경해줍니다. 제 경우는 start와 build만 변경해주었습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;scripts&quot;: {
    &quot;start&quot;: &quot;react-app-rewired start&quot;,
    &quot;build&quot;: &quot;react-app-rewired build&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 최상위 루트에서 config-overrides.js 파일을 생성하고 다음과 같이 작성합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; SpeedMeasurePlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;speed-measure-webpack-plugin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; smp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SpeedMeasurePlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;config&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; smp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; config
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런데 해당 에러가 발생합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Error: You forgot to add &apos;mini-css-extract-plugin&apos; plugin
(i.e. `{ plugins: [new MiniCssExtractPlugin()] }`),
please read https://github.com/webpack-contrib/mini-css-extract-plugin#getting-started&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mini-css-extract-plugin을 install하고 플러그인 안에 넣었음에도, 자꾸 해당에러가 발생합니다. 검색을 해보니 mini-css-extract-plugin을 직접 빼서 넣어주면 된다고 합니다. 코드를 다음과 같이 수정합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; SpeedMeasurePlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;speed-measure-webpack-plugin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; MiniCssExtractPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;mini-css-extract-plugin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// config 플러그인 배열에서 MiniCssExtractPlugin 인스턴스가 있다면 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; miniCssExtractPluginOrigin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token parameter&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; plugin &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MiniCssExtractPlugin&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// MiniCssExtractPlugin를 제외한 나머지 배열을 반환합니다.&lt;/span&gt;
  config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugins &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token parameter&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;plugin &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MiniCssExtractPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// smp 옵션을 설정합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; smp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SpeedMeasurePlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;outputFormat&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;humanVerbose&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;loaderTopFiles&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// smp 안에 config 값을 넣습니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; smp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  newConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;miniCssExtractPluginOrigin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newConfig
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이후 build를 해보니 최적화 과정에 대한 log가 기록되는것을 확인했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; SMP  ⏱
General output time took 12,179 ms

 SMP  ⏱  Plugins
TerserPlugin took 6,677 ms
ESLintWebpackPlugin took 555 ms
CssMinimizerPlugin took 418 ms
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런데 build 실행은 잘 되더니 갑자기 start 스크립트를 실행하면 또 처음보는 에러가 발생합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.plugins[11] should be one of these:
   object { apply, … } | function
   -&gt; Plugin of type object or instanceof Function.
   Details:
    * configuration.plugins[11] should be an object:
      object { apply, … }
      -&gt; Plugin instance.
    * configuration.plugins[11] should be an instance of function.
      -&gt; Function acting as plugin.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;대충 웹팩 플러그인의 잘못된 값이 들어갈 경우 발생할 수 있는 에러라고 합니다.&lt;/p&gt;
&lt;p&gt;일단 build는 잘됬으니 해당과정에서 config 값을 conslog.log로 찍어보며 추적을 해본결과, build의 경우 MiniCssExtractPlugin가 플러그인에 존재했습니다.&lt;/p&gt;
&lt;p&gt;하지만 start에 경우 없어 miniCssExtractPluginOrigin의 값이 undefind인채로 플러그인 배열안에 들어가 에러를 발생시켰습니다.&lt;/p&gt;
&lt;p&gt;마지막 줄만 코드를 다음과 같이 변경해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// miniCssExtractPluginOrigin -&gt; undefind일 경우 병합 연산자로 처리&lt;/span&gt;
newConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;miniCssExtractPluginOrigin &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MiniCssExtractPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;hr&gt;
참고
&lt;p&gt;&lt;a href=&quot;https://devroach.tistory.com/32&quot;&gt;https://devroach.tistory.com/32&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Pynecone 체험기]]></title><description><![CDATA[Build anything,Faster! Pynecone ex_screenshot pynecone은 순수 파이썬만을 이용한 웹 풀스택 프레임워크 입니다. NEXT.JS 와 fastAPI를 기본 베이스로 사용하고 있습니다. 파이썬(3.7+)과 노드(1…]]></description><link>https://jeongyeon9254.github.io/Python/23.01.19 pynecone/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Python/23.01.19 pynecone/</guid><pubDate>Thu, 19 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;build-anythingfaster-pynecone&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#build-anythingfaster-pynecone&quot; aria-label=&quot;build anythingfaster pynecone permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Build anything,Faster! Pynecone&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/py_1.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pynecone은 순수 파이썬만을 이용한 웹 풀스택 프레임워크 입니다.&lt;/li&gt;
&lt;li&gt;NEXT.JS 와 fastAPI를 기본 베이스로 사용하고 있습니다.&lt;/li&gt;
&lt;li&gt;파이썬(3.7+)과 노드(12.22.0+)가 필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-시작하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0&quot; aria-label=&quot;1 시작하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 시작하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// venv에 pynecone을 설치합니다.
$ pip install pynecone-io

// root에 프로젝트 폴더를 생성하고, 그 안에서 pc init을 입력합니다.
$ mkdir my_app_name
$ cd my_app_name
$ pc init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;해당 명령어를 통해 pynecone를 시작할 수 있습니다.&lt;/li&gt;
&lt;li&gt;이후 &lt;b&gt;pc run&lt;/b&gt; 커맨드를 통해 프로젝트를 실행합니다.&lt;/li&gt;
&lt;li&gt;특이하게 3000번 포트는 NEXT.JS, 8000번 포트는 fastAPI가 동시에 실행됩니다.&lt;br&gt;
(fastAPI가 실행된다는 점이 중요합니다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;survey // 생성한 프로젝트 폴더
├── assets // 기본 assets 폴더
│   └── favicon.ico
├── pcconfig.py // 기본 pyneconf config 파일
├── pynecone.db // 기본적으로 제공하는 sqliteDB
├── .web // 기본적으로 생성되는 NEXT.JS 프로젝트 폴더
└── survey // 생성한 프로젝트 폴더명과 같은 App 폴더
    ├── __init__.py
    ├── base_state.py // 추가한 state class 관리 파일
    ├── end.py // 추가 페이지
    ├── home.py // 추가 페이지
    ├── landing.py // 추가 페이지
    └── survey.py // 기본 App 파일&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;기본으로 생성되는 폴더구조입니다.&lt;/li&gt;
&lt;li&gt;{프로젝트명}/{프로젝트명}/{프로젝트명.py} 의 신기한 구조를 가지고 있습니다.&lt;/li&gt;
&lt;li&gt;프로젝트폴더에선 App 폴더 변경이 가능합니다. {프로젝트명}/{변경한이름}/{변경한이름.py}&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/py_2.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬과 노드 패키지가 모두 생성됩니다.&lt;/li&gt;
&lt;li&gt;파이썬패키지 중에서는 base backend인 fastAPI와 sqlalchemy가 기본적으로 설치되어 있는것을 확인할 수 있습니다.&lt;br&gt;
(openai도 있는데, 기본 튜토리얼때문에 있는것인지 모르겠습니다)&lt;/li&gt;
&lt;li&gt;노드패키지 중에서는 Pynecone 주요 컴포넌트 프레임워크인 chakra-ui 를 볼수 있으며, 그 외에도 emotion css와 d3같은 차트 라이브러리를 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pynecone &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; pc


config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Config&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    app_name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    bun_path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;$HOME/.bun/bin/bun&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    db_url&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;sqlite:///pynecone.db&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    env&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DEV&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;config 설정은 위와 같으며, 요즘 JS에서 빠르다는 build 툴 bun.js 사용을 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;db는 기본적으로 sqlit가 연결되어 있으며, sql계열은 모두 가능하다고 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-실제-사용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;2 실제 사용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 실제 사용&lt;/h2&gt;
&lt;p&gt;예시용 깃허브 : &lt;a href=&quot;https://github.com/pynecone-io/pynecone-examples/tree/main/twitter&quot;&gt;https://github.com/pynecone-io/pynecone-examples/tree/main/twitter&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;a. App 파일 준비&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pynecone &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; pc
&lt;span class=&quot;token comment&quot;&gt;# bsae State 파일&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;base_state &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; State
&lt;span class=&quot;token comment&quot;&gt;# 추가 페이지들&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;landing &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Landing
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;home &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Home
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;end &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; End


&lt;span class=&quot;token comment&quot;&gt;# Add state and page to the app.&lt;/span&gt;
app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;State&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Add Pages&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add_page&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Landing&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;파인콘&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add_page&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Home&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/home&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;설문조사&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add_page&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;End&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/end&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;결과&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로 실행시 config 파일에 입력된 App을 실행합니다.&lt;/li&gt;
&lt;li&gt;따라서 가장 기본적인 state등록과 컴파일은 App파일에서 이루어져야 합니다.&lt;/li&gt;
&lt;li&gt;기본적으로 State Class는 한개만 등록할 수 있습니다.&lt;/li&gt;
&lt;li&gt;단 root State를 상속받아 새로운 State를 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;pynecone에서는 대부분 모든것들이 pc를 이용해 호출합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;b. state 및 db 준비&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pynecone &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; pc


&lt;span class=&quot;token comment&quot;&gt;# DB Model Class&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SurveyUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; table&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    username&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;
    q_1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;
    q_2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;
    q_3&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;# Bse State Class&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;State&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;얼리페이&quot;&lt;/span&gt;
    q_1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
    q_2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    q_3&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
    answers&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;SurveyUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# ------------------------------- Model.py ------------------------------&lt;/span&gt;

&lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;Database built into Pynecone.&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; sqlmodel

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; pynecone &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; utils
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; pynecone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;base &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Base


&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_engine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;Get the database engine.

    Returns:
        The database engine.
    &quot;&quot;&quot;&lt;/span&gt;
    url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_config&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db_url
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sqlmodel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;create_engine&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; echo&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sqlmodel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SQLModel&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;Base class to define a table in the database.&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create_all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;Create all the tables.&quot;&quot;&quot;&lt;/span&gt;
        engine &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; get_engine&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        sqlmodel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SQLModel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;metadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;create_all&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;engine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;pc.Model을 넘겨준 모델 클래스는 앱 실행시 자동으로 db를 조회하여 해당 테이블을 생성합니다. 만약 테이블이 존재한다면 생성하지 않습니다.&lt;/li&gt;
&lt;li&gt;기본적으로 sqlalchemy를 사용합니다.&lt;/li&gt;
&lt;li&gt;State의 경우 기본적으로 한개만 App과 연결할 수 있습니다. 단, 상속하여 다른 State를 사용할 수는 있습니다.&lt;/li&gt;
&lt;li&gt;사실상 State내에 사용되는 함수 == API 라는 느낌입니다.&lt;br&gt;
(따로 fastAPI를 구동하지 않기 때문..)&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;c. 페이지 준비&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pynecone &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; pc
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;base_state &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; State


&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Landing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;center&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vstack&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&quot;TODAY SURVEY!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                font_size&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;40px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                font_weight&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bold&quot;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                on_change&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;State&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;change_name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                placeholder&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Enter your name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                margin&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;20px 0 20px 0!important&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            pc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&quot;Start&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                display&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                href&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/home&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                width&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;100%&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                bg&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#8262FE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                color&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#fff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                padding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;10px&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                text_align&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                font_weight&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bold&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                border_radius&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;5px&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                _hover&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;opacity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.85&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            width&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;600px&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            bg&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            padding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;40px&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            shadow&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            border_radius&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        width&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;100%&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        height&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;100vh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        bg&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;linear-gradient(222.47deg, #8262FE 13.82%, #8238BC 50.46%, #561674 87.1%)&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로 랩핑된 chakra-ui를 사용하며 emotion으로 추가 스타일링을 할 수도 있습니다.&lt;/li&gt;
&lt;li&gt;컴포넌트는 공식문서에 정리가 되어 있습니다.&lt;/li&gt;
&lt;li&gt;만든 페에지는 App파일에서 불러 등록해줍니다.&lt;/li&gt;
&lt;li&gt;기본적으로 라우팅에는 link 컴포넌트를 사용합니다.&lt;/li&gt;
&lt;li&gt;State를 받아 렌더링하거나, State를 조작하는 이벤트를 등록할 수 있습니다.&lt;/li&gt;
&lt;li&gt;State와 props값을 받아 JS code를 만들어 .web에 Page를 &lt;b&gt;실시간&lt;/b&gt; 포맷팅하여 등록합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/py_4.png&quot; alt=&quot;ex_screenshot&quot;&gt;
&lt;img src=&quot;/content/python/py_5.png&quot; alt=&quot;ex_screenshot&quot;&gt;
&lt;img src=&quot;/content/python/py_6.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-내가-생각한-장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%82%B4%EA%B0%80-%EC%83%9D%EA%B0%81%ED%95%9C-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;3 내가 생각한 장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 내가 생각한 장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;모든것을 편하고 쉽게 만들수 있다는 말처럼 간단한 코드만으로 완전한 앱을 만들수 있습니다. 같은 풀스택 프레임워크인 장고나 플라스크와 비교해봐도 훨씬 쉬운 수준입니다.&lt;/li&gt;
&lt;li&gt;모든 State는 단발성이 아닌 backend에 기록되어 있기때문에 data가 휘발되지 않습니다.&lt;/li&gt;
&lt;li&gt;db커넥션도 쉽고(sqlite) 테이블 생성도 자동으로 해주는 기능이 있습니다.&lt;/li&gt;
&lt;li&gt;이미 랩핑된 좋은 UI들이 많고, 해당 UI를 통해 컴포넌트를 만들어 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;기존 UI 말고도 다른 UI프레임워크를 설치해 랩핑하여 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;API 방식이 아닌 직접 백엔드 코드를 앞단에서 호출하여 사용하는 느낌이라 추가적인 개발이 필요 없습니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fastAPI를 사용하기 때문에 fastAPI에 장점을 모두 가지고 있습니다.&lt;br&gt;
(docs가 의미있을지는 모르겠습니다)&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-내가-생각한-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%82%B4%EA%B0%80-%EC%83%9D%EA%B0%81%ED%95%9C-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;4 내가 생각한 단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 내가 생각한 단점&lt;/h2&gt;
&lt;p&gt;a. 리액트를 사용함으로서 생기는 문제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NEXT.JS도 근본이 리액트기 때문에, 리액트내에서 중요한 라이프사이클을 현재로서는 완전히 제어할 수 없습니다. 이로 인해 디버깅이 어려워 질 수 있습니다.&lt;/li&gt;
&lt;li&gt;직접 dom의 정보를 받아와야 할 경우 현재로서는 컨트롤이 상당히 힘든부분이 있습니다.&lt;/li&gt;
&lt;li&gt;react 의 useState는 기본적으로 비동기적 처리를 진행합니다. 이로 인해 새로운 문제가 발생할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;b. 상당히 많은 이슈
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/py_8.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pynecone는 아직 나온지 얼마 되지않은 프레임워크이며, 2명의 개발자가 개발하고 있는 프로젝트입니다. 그렇다보니 아직 많은 이슈와 진행되지 않은 개발이 많습니다.&lt;/li&gt;
&lt;li&gt;불안정하며, 연결이 가끔 끊기는 등에 이슈가 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;c. 컴파일 이후 자동 등록.. 삭제는?
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/py_9.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;State와 prop값을 받아 포맷팅 이후 .web &gt; pages에 자동으로 생성이 됩니다. 하지만 생성만 될뿐 해당 페이지를 없앤다고 해서 pages내에 있는 js파일이 삭제되는것은 아닙니다.&lt;/li&gt;
&lt;li&gt;해당 파일을 잘 관리하지 않으면, 잘못된 페이지로 라우팅이 될수도 있고 불필요한 파일이 build될 수도 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;d. 반쪽짜리 라우팅
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/py_10.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 pynecone에서 다이나믹 라우팅을 지원하고 있지 않습니다.&lt;/li&gt;
&lt;li&gt;추후 개발이 진행됨에 따라 업데이트가 되기를 기다려야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;e. 배포이슈
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/py_11.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특이한 구조로 인해 배포를 어떻게 해야하는지 모르던 중, 배포에 대해 공식문서를 찾아본 결과 현재 개발진행중입니다.&lt;/li&gt;
&lt;li&gt;역시 추후 개발이 진행됨에 따라 업데이트가 되기를 기다려야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;5-후기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%ED%9B%84%EA%B8%B0&quot; aria-label=&quot;5 후기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 후기&lt;/h2&gt;
&lt;p&gt;적어놓고 보니 단점에 적어둔 것들이 react를 사용하는 단점외에는 모두 개발이 진행됨에 따라 해결이 되는 단점들뿐입니다. 그에 반해 장점은 정말 쉬운 난이도로 풀스택 웹을 빠르게 만들수 있다는 장점이 있어 앞으로가 기대되는 프레임 워크인것 같습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[algorithm] 옹알이]]></title><description><![CDATA[옹알이 링크 : https://school.programmers.co.kr/learn/courses/30/lessons/120956 이전에…]]></description><link>https://jeongyeon9254.github.io/Algorithm/23.01.15 옹알이/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Algorithm/23.01.15 옹알이/</guid><pubDate>Sun, 15 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;옹알이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%B9%EC%95%8C%EC%9D%B4&quot; aria-label=&quot;옹알이 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;옹알이&lt;/h2&gt;
&lt;p&gt;링크 : &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120956&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120956&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;babbling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; word &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;aya&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ye&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;woo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ma&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; babbling&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    word&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; count
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이전에 0레벨이 없었던 것 같은데, 그 중 가장 정답률 적은것으로 풀어봤습니다.&lt;/p&gt;
&lt;p&gt;뭔가 정규표현식을 사용하면 더 쉽게도 가능하겠지만, 나쁘지 않은것 같습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[algorithm] 1차 비밀지도]]></title><description><![CDATA[2018 KAKAO BLIND RECRUITMENT 1차 비밀지도 링크 : https://school.programmers.co.kr/learn/courses/30/lessons/1768…]]></description><link>https://jeongyeon9254.github.io/Algorithm/23.01.15 비밀지도/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Algorithm/23.01.15 비밀지도/</guid><pubDate>Sun, 15 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;2018-kakao-blind-recruitment-1차-비밀지도&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2018-kakao-blind-recruitment-1%EC%B0%A8-%EB%B9%84%EB%B0%80%EC%A7%80%EB%8F%84&quot; aria-label=&quot;2018 kakao blind recruitment 1차 비밀지도 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2018 KAKAO BLIND RECRUITMENT 1차 비밀지도&lt;/h2&gt;
&lt;p&gt;링크 : &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/17681&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/17681&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 숫자를 2진수로 바꾸고 만약 x의 length가 n보다 작다면 n만큼 0을 붙여줍니다&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;changedArr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 받은 배열을 map&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newArr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 1. 2진수로 바꿉니다&lt;/span&gt;
      x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// 만약 숫자가 작다면 n의 길이로 만들어줍니다&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; addZero &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; addZero &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newArr
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newArr1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;changedArr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newArr2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;changedArr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 배열을 겹쳐 지도를 만듭니다&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;overlapArr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; map &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; xIdx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mapLine &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; yIdx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;xIdx&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;yIdx&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;xIdx&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;yIdx&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#&apos;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; mapLine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; map
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;overlapArr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newArr1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newArr2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;어떻게 풀어야하는지는 머리속에서 바로 떠올랐지만, 다소 무식하게 푼 느낌이 있습니다.&lt;/p&gt;
&lt;p&gt;여전히 다른사람들의 풀이를 보면 신가할 따름입니다.&lt;/p&gt;
&lt;p&gt;그래도 이정도면 하루10분 말랑말랑하게 풀만 할 것 같습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[조금 늦어버린 2022년 회고]]></title><description><![CDATA[2022년 회고록 2022년은 개발자로서 시작할수 있었던 의미있는 해였습니다. 그렇게까지 다사다난하지는 않았지만, 여러가지로 많은것을 알게된 해였습니다. 제가 느꼈던 점과 배운점을 적어보며, 2023년 길라잡이를 잡아보려합니다. 1. 항해9…]]></description><link>https://jeongyeon9254.github.io/LIFE/23.01.10 늦은 회고/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/LIFE/23.01.10 늦은 회고/</guid><pubDate>Tue, 10 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;2022년-회고록&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2022%EB%85%84-%ED%9A%8C%EA%B3%A0%EB%A1%9D&quot; aria-label=&quot;2022년 회고록 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2022년 회고록&lt;/h1&gt;
&lt;p&gt;2022년은 개발자로서 시작할수 있었던 의미있는 해였습니다.&lt;br&gt;
그렇게까지 다사다난하지는 않았지만, 여러가지로 많은것을 알게된 해였습니다.&lt;/p&gt;
&lt;p&gt;제가 느꼈던 점과 배운점을 적어보며, 2023년 길라잡이를 잡아보려합니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;1-항해99-수료&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%95%AD%ED%95%B499-%EC%88%98%EB%A3%8C&quot; aria-label=&quot;1 항해99 수료 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 항해99 수료&lt;/h2&gt;
&lt;p&gt;개발자로서 시작을 하기 위해 부트캠프 항해99를 시작하고 2월에 수료하게 되었습니다. 개인적으로 항해99는 나름 만족한 부트캠프 였습니다.&lt;/p&gt;
&lt;p&gt;물론 퀄리티라던가 강의의 질이 엄청 좋았다라고 하기에는 다소 부족한점이 많았지만, 무언가에 몰두해서 하루 12시간 이상을 매달리며 열정있게 끝내본적이 정말 오랜만이라 부트캠프를 진행하며 나도 할수있겠다는 자신감을 얻게 되었습니다.&lt;/p&gt;
&lt;p&gt;다른 사람들과 협업을 하며 의견을 주고받고 더 나은 제품을 만들기 위한 노력은, 실제 업무를 하며 느꼈던 느낌과 거의 비슷했습니다. 물론 비기너 6명이 머리를 모은수준이었지만 하나씩 개선해나가는 과정은 정말 좋았습니다.&lt;/p&gt;
&lt;p&gt;다만 FE와 BE간 교육의 방향성이 달라서 그런지, 아니면 FE라는 개념떄문에 그런지 교육자체가 기본부터 쌓아올린다는 느낌보다는 일단 만든다! 라는 느낌이어서 조금 아쉬운 부분이었습니다. 결과적으로 리액트로 프로덕트를 만들순 있었겠지만 좀 더 딥하게 왜 자바스크립트가 이렇게 동작하는지 그리고 기본적인 db구조, cs지식등 백엔드분들이 배운것들을 저를 포함한 프론트분들은 배우지 못했다는건 조금 아쉬웠습니다.&lt;/p&gt;
&lt;p&gt;다연히 부트캠프자체가 실질적인 업무실력을 길러주고, 이러한 바탕지식들은 개인이 알아서 공부해야하는것이기 때문에 아쉬운거 빼고는 나머지 경험은 정말 좋았습니다.&lt;/p&gt;
&lt;p&gt;그리고 가장 좋은건 스스로 해결하는 습관을 좋은쪽으로 기른것같아 만족했습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;2-수료식-그리고-생각보다-빠른-취업&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%88%98%EB%A3%8C%EC%8B%9D-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%83%9D%EA%B0%81%EB%B3%B4%EB%8B%A4-%EB%B9%A0%EB%A5%B8-%EC%B7%A8%EC%97%85&quot; aria-label=&quot;2 수료식 그리고 생각보다 빠른 취업 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 수료식 그리고 생각보다 빠른 취업&lt;/h2&gt;
&lt;p&gt;항해99는 굉장히 만족스런 부트캠프였지만, 그와는 별개로 과연 취업이 될까싶었습니다. 실전 프로젝트를 했다한들, 비기너 수준이고 ‘이정도 수준은 다른 컴퓨터공학과의 학생들은 기본으로 하는수준이지 않을까’라는 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;그건 백엔드분들도 비슷했는데 이것저것 했지만 결론은 간단한 페이지 만들기, CRUD 구현, API.. 저희가 생각하기로는 기본적인 내용뿐이라 과연 실제 면접에서 우리의 경험을 어필할수 있을지는 미지수였습니다.&lt;/p&gt;
&lt;p&gt;그래서 개인적으로 정말 많은 이력서를 냈습니다. 대충 5~60개는 냈던거 같았습니다. 지금와서 생각해보면 이력서 자체도 엄청 성의있게 느껴지지 않았을 수 있고, 내용도 다소 정리되지 않았던거 같아서 더 수정했어야 했는데 그 부분이 아쉬웠습니다.&lt;/p&gt;
&lt;p&gt;다행히 면접이 몇개 잡히긴했어서 총 5개의 면접이 잡히게 되었습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JAVA,React(아마..) 기반의 SI&lt;/li&gt;
&lt;li&gt;부동산 및 홈쉐어&lt;/li&gt;
&lt;li&gt;선정산 핀테크&lt;/li&gt;
&lt;li&gt;애견관련 APP&lt;/li&gt;
&lt;li&gt;테이블 오더 솔루션&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1번의 경우 개인적으로 자체 서비스가 있는 회사에 가고싶기도 헸고, React를 사용한다고 말씀은 하셨지만 실 면접에서는 추후 바꿀 예정이다라고 말씀하셔서 면접 이후 다시 생각해보겠다고 말씀을 드렸습니다. 지금에서야 꼭 React가 아니었어도, 좋은 동료와 확실한 비즈니스만 있다면 문제없을거라고 생각하겠지만 그 당시에는 아직 면접이 더 남아있어서 거절했습니다.&lt;/p&gt;
&lt;p&gt;2번의 경우 서비스업체다보니 면접에서 1번보다는 좀더 많은 얘기를 나누었습니다. 기술면접 이후에 대표님과 면접을 진행했는데 여러가지 비즈니스적인 이야기와 우리와 핏이 맞겠느냐는 얘기를 주로 나눴던거같습니다. CTO님도 계셨었는데, CTO님의 인상이 좋아보이셔서 면접을 편하게 진행했습니다. 다만 대표님과 이야기를 하며 전체적인 결이 맞지 않을거같다는 느낌이 들었습니다. 면잡 당일날 저녁 합격헀다는 전화를 주셨지만, 너무 죄송하게도 조금 더 다른곳을 찾아보겠다고 말씀드렸습니다.&lt;/p&gt;
&lt;p&gt;3번의 경우 선정산 핀테크 회사였는데, 사실 핀테크에 대한 막연한 두려움이 있었습니다. 물론 FE라서 그렇게까지 중요한 로직을 수정할 일이 있을거같지는 않았습니다. 기술면접 합격 이후 대표님과 면접을 보게되었는데 대화를 나누며 제가 이전에 외식업에 종사하며 느꼈던 어려움을 어떤식으로 해결할 수 있는지, 현재의 비즈니스가 어떻고 앞으로 어떻게 발전할것인지 자세하게 말씀해주셨습니다. 저 또한 외식업에 종사하며 자영업자분들이 얼마나 힘든지 느낄수 있었기 때문에 해당 비즈니스가 굉장히 매력적으로 들렸습니다. 면접 이후 약 1주일 후에 합격전화를 받게 되었고, 결과적으로 3번의 회사로 취업할수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;이후 4번회사와 5번회사의 면접이 남아있었는데 합격여부를 받기전 정했던 일정이라, 합격 이후 면접을 본다는게 뭔가 아닌거같아서 전화를 드려 취업사실을 말씀드리고 면접일정을 취소하는것으로 했습니다. 지금 생각해보면 면접은 봐도 좋았을거란 생각이 듭니다. 좀더 많은 분들과 얘기를 해보고 내가 어떤점이 부족한지 알기에는 면접만큼 좋은것이 없다고 생각하기 때문입니다.&lt;/p&gt;
&lt;p&gt;여하튼 굉장히 많은 걱정과 고민속에서 다행히도 면접기회가 조금 있었고, 그중 너무 감사하게도 합격소식을 주어 지금의 회사에 근무할 수 있게 되었습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-사수가-없는-회사생활&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%82%AC%EC%88%98%EA%B0%80-%EC%97%86%EB%8A%94-%ED%9A%8C%EC%82%AC%EC%83%9D%ED%99%9C&quot; aria-label=&quot;3 사수가 없는 회사생활 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 사수가 없는 회사생활&lt;/h2&gt;
&lt;p&gt;면접 당시에도 말씀은 해주셨지만 기존 시니어FE가 나가고, 제가 보충으로 들어오는 형식의 취업이었습니다. 게다가 React가 아닌 Vue를 사용한다고 하셨습니다. Vue를 사용하는것은 문제가 되지 않았습니다. 사용해본적은 없지만 비슷한 느낌일거라고 생각을 했고, 실제로 배워보니 React와 굉장히 큰 차이는 없었던것으로 느꼈습니다. 딱 부모가 자식의 상태를 직접 제어할수 있냐의 차이정도라고 느꼈습니다. 그 외에는 조금더 편한 React라고 생각을 했기 때문에 오히려 굉장히 재밌는 경험이었습니다.&lt;/p&gt;
&lt;p&gt;가장 걱정이 됬던것은 사수가 없는 점이었습니다. 다른 백엔드 개발자분들이 계시지만 그분들께 직접 코드리뷰를 받기도 애매하고, 내가 무얼 잘못하는지를 파악하기가 쉽지가 않았습니다.&lt;/p&gt;
&lt;p&gt;그 단점은 지금도 느끼고 있는데.. 사수가 아닌 동료라도 있었으면 좋지 않았을까 싶었습니다. 아무리 개인공부를 하고 지식을 쌓으면 된다지만, 결국 회사는 협업을 하게되고 다른 FE개발자와 협업을 하는 경험이 필요하다고 생각했습니다.&lt;/p&gt;
&lt;p&gt;그래도 회사에서 많은 기회를 주었습니다. Vue기반 프로젝트를 React로 마이그레이션 해보기도 하고, 제가 기획한 페이지라던가 직접 UI를 디자인해서 바꾸기도 하는 등 다양한 업무를 진행했습니다. 그 점은 아마 다른회사에서는 하지 못했을 경험이라고 생각하기 때문에 사수가 없다고 정체되거나 회사가 부족하다고는 생각하지 않았습니다.&lt;/p&gt;
&lt;p&gt;그리고 이런 부족한 경험을 쌓으려면 역시 개인적으로 노력해야한다고 생각해서, 2023년에는 사이드 프로젝트를 다른사람과 하거나 개인적으로 코드리뷰를 받는 교육을 진행하는것으로 보충할거 같습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;4-fe개발자-이전에-개발자가-되자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-fe%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9D%B4%EC%A0%84%EC%97%90-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EC%9E%90&quot; aria-label=&quot;4 fe개발자 이전에 개발자가 되자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. FE개발자 이전에 개발자가 되자&lt;/h2&gt;
&lt;p&gt;제가 FE사수는 없었지만 정말 훌륭한 백엔드 동료분들이 계셨습니다. 다소 개발자분들이 많이 바뀌기는 했지만 그때마다 항상 좋은 개발자분들이 합류하셔서 저에게는 큰 자극이 되었습니다.&lt;/p&gt;
&lt;p&gt;다만 이전부터 느꼈던 것이고, 동료 백엔드 개발자분들과 이야기를 하다보면 정말 제가 많이 부족하구나라는것을 느끼게 됬습니다. 단순히 백엔드를 경험해보지 않은것이라고 말 할수도 있을겁니다. 다만 내가 만든 결과물이 어떻게 유저에게 전송되는지 확실하게 설명해줄수 있냐고 물어본다면 정말 상세하고 정확하게 대답할수 없겠다고 생각이 들었습니다. 그리고 이런 생각은 기본기가 부족하기 떄문이라고 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;당연히 중요한 기본지식들을 배우는것은 어렵지 않습니다. 요즘같은 정보의 시대에 질 좋은 교육을 찾아 배우는것은 어렵지 않습니다. 다만 보통 4년동안 배우는 기본 지식들을 당장 배우려하니 조바심이 나고, 언제 다 배우나 싶은 느낌이 들었습니다. 이러다보니 결국 더 빠른방법을 찾게되고 진정으로 즐겁게 공부하지는 못했던거 같습니다.&lt;/p&gt;
&lt;p&gt;작년 10월까지 이렇게 조급한 마음으로 공부를 했는데, 최근에서는 환경이 변한건지 사람이 변한건지 이전보다는 더 길게 보게 된거 같습니다. 내가 개발자라는 직업으로 개발을 함에 있어서 단순히3~5년으로 끝날것도 아니고, 남들보다 늦는것을 보기보다 내가 해나가고 배워가는 과정에 집중하기로 했습니다. 그렇게 마음을 바꾸고 나니 이전보다 더 개발이 즐거워졌습니다.&lt;/p&gt;
&lt;p&gt;비록 사수가 없긴하지만 정말 좋은 백엔드 동료분들과 PM분들이 계셔서 앞으로 더 좋은 개발자가 될 수 있을거 같습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;5-2023년은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-2023%EB%85%84%EC%9D%80&quot; aria-label=&quot;5 2023년은 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 2023년은…&lt;/h2&gt;
&lt;p&gt;두서없이 글을 쓰긴했는데, 뭐 이런저런 많은 배움이 있었습니다. 하지만 당연히 부족했던점은 더 채우려고 합니다. 2023년에는 나 자신과의 약속을 더 잘 지키는 해가 되었으면 합니다.&lt;/p&gt;
&lt;p&gt;더 다양한 사람들과 함께 개발해보고, 더 많은 분야에 대해 알아보며, 더 깊게 공부할 수 있는 한해가 되기를 바랍니다.&lt;/p&gt;
&lt;p&gt;적어도 어제보다는 더 나은 나를 위해 노력해야겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[fastApi (2)]]></title><description><![CDATA[fastAPI vs django 지난번에 fastAPI에 대해 간단하게 알아보았습니다. 그렇다면 이번에는 장고와 함께 간단하게 비교해보며, fastAPI에 장점을 알아보려합니다. 테스트 환경은 로컬테스트이며, 간단하게 db…]]></description><link>https://jeongyeon9254.github.io/Python/23.01.05 fastAPI2/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Python/23.01.05 fastAPI2/</guid><pubDate>Thu, 05 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;fastapi-vs-django&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#fastapi-vs-django&quot; aria-label=&quot;fastapi vs django permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fastAPI vs django&lt;/h2&gt;
&lt;p&gt;지난번에 fastAPI에 대해 간단하게 알아보았습니다.&lt;br&gt;
그렇다면 이번에는 장고와 함께 간단하게 비교해보며, fastAPI에 장점을 알아보려합니다.&lt;br&gt;
테스트 환경은 로컬테스트이며, 간단하게 db에 연동된 퀴즈정보를 받아오는것으로 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/fast_4.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;테스트에는 jmeter를 사용했습니다.&lt;br&gt;
테스트 시나리오는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/fast_5.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;500명이 10초동안 10번의 리퀘스트를 날리는것으로 간단하게 테스트해보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;1-django-get-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-django-get-api&quot; aria-label=&quot;1 django get api permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. django get API&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/fast_6.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;총 4회 테스트를 진행한 결과입니다.&lt;/p&gt;
&lt;p&gt;총 요청회수 : 20001회 / 평균 응답시간 : 23ms&lt;br&gt;
최소응답시간 : 3ms / 최대응답시간 : 169ms&lt;br&gt;
표준편차 : 20.85 / 에러율 : 0%&lt;br&gt;
초당 처리건수 : 15.7건 / 초당 처리량KB : 2.35kb&lt;/p&gt;
&lt;h2 id=&quot;2-fastapi-get-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-fastapi-get-api&quot; aria-label=&quot;2 fastapi get api permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. fastAPI get API&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/fast_7.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;총 4회 테스트를 진행한 결과입니다.&lt;/p&gt;
&lt;p&gt;총 요청회수 : 20000회 / 평균 응답시간 : 1ms&lt;br&gt;
최소응답시간 : 0ms / 최대응답시간 : 56ms&lt;br&gt;
표준편차 : 2.36 / 에러율 : 0%&lt;br&gt;
초당 처리건수 : 262건 / 초당 처리량KB : 37kb&lt;/p&gt;
&lt;h2 id=&quot;3-결과&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EA%B2%B0%EA%B3%BC&quot; aria-label=&quot;3 결과 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 결과&lt;/h2&gt;
&lt;p&gt;결과는 생각보다는 차이가 꽤 났습니다.&lt;/p&gt;
&lt;p&gt;로컬에 정말 간단한 get api 테스트였음에도 불구하고 상당히 큰 차이를 보여주며, fastAPI가 더 높은 성능을 보여주었습니다.&lt;/p&gt;
&lt;p&gt;물론 해당 테스트에 대한 정확도는 확신할수 없고, 단순히 한 테이블의 정보를 받아오는 간단한 api였기 때문에 실제 서버의 성능과 db설계에 따라 다른 결과를 보여줄수도 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 ‘node.js보다 빠르고 go와 필적하는 속도를 가진 프레임워크’ 라는 fastAPI소개에 걸맞는 성능을 보여준거 같습니다.&lt;/p&gt;
&lt;h2 id=&quot;4-why&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-why&quot; aria-label=&quot;4 why permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. why?&lt;/h2&gt;
&lt;p&gt;그러면 이제 왜 이렇게 차이가 나는지에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;fastAPI의 중요한점은 Uvicorn을 사용한다는 점이었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/fast_8.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;그리고 Uvicorn은 uvloop 및 사용하는 ASGI web server이기 때문에 성능이 빠르다고 했습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/fast_9.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;해당 개념에 대한 정리글:&lt;br&gt;
&lt;a href=&quot;https://it-eldorado.tistory.com/159?category=749661&quot;&gt;https://it-eldorado.tistory.com/159?category=749661&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-비교에-대한-개인적인-느낌&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EB%B9%84%EA%B5%90%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B0%9C%EC%9D%B8%EC%A0%81%EC%9D%B8-%EB%8A%90%EB%82%8C&quot; aria-label=&quot;5 비교에 대한 개인적인 느낌 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 비교에 대한 개인적인 느낌&lt;/h2&gt;
&lt;p&gt;django와 fastAPI를 짧게 배워보고, 사용해보며 FE관점에서 느낀점은 장고는 앵귤러, fastAPI는 리액트와 비슷하다는 느낌이 들었습니다.&lt;/p&gt;
&lt;p&gt;omr도 제대로 사용도 안해보고 완벽한 비교는 아니겠지만, 장고의 경우 풀스택 프레임워크이며 결이 완전한 웹서비스 완성에 포커스가 있다고 느껴지는 반면, fastAPI는 보다 쉽고 빠르게 api서버구축에만 포커스를 두었으며 그 과정이 django 보다는 조금 더 자유롭다고 느껴졌습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[fastApi (1)]]></title><description><![CDATA[fastApi 한줄요약 fastAPI란 파이썬 버전 3.6버전 이상부터 사용가능한 타입힌트를 바탕으로 쉽고 빠르게, 성능이 좋은 API서버를 개발할 수 있는 훌륭한 오픈소스 프레임워크입니다. 아래에서 세부사항에 대해 조금씩 공부해보며, fastAPI…]]></description><link>https://jeongyeon9254.github.io/Python/22.12.22 fastAPI/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Python/22.12.22 fastAPI/</guid><pubDate>Tue, 20 Dec 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;fastapi-한줄요약&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#fastapi-%ED%95%9C%EC%A4%84%EC%9A%94%EC%95%BD&quot; aria-label=&quot;fastapi 한줄요약 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fastApi 한줄요약&lt;/h2&gt;
&lt;p&gt;fastAPI란 파이썬 버전 3.6버전 이상부터 사용가능한 &lt;b&gt;타입힌트를 바탕&lt;/b&gt;으로 &lt;b&gt;쉽고 빠르게&lt;/b&gt;, &lt;b&gt;성능이 좋은&lt;/b&gt; API서버를 개발할 수 있는 &lt;b&gt;훌륭한&lt;/b&gt; 오픈소스 프레임워크입니다.&lt;/p&gt;
&lt;p&gt;아래에서 세부사항에 대해 조금씩 공부해보며, fastAPI에 장점을 배워보겠습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;타입힌트-바탕--타입힌트와-pydantic-기반의-validation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%83%80%EC%9E%85%ED%9E%8C%ED%8A%B8-%EB%B0%94%ED%83%95--%ED%83%80%EC%9E%85%ED%9E%8C%ED%8A%B8%EC%99%80-pydantic-%EA%B8%B0%EB%B0%98%EC%9D%98-validation&quot; aria-label=&quot;타입힌트 바탕  타입힌트와 pydantic 기반의 validation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;타입힌트 바탕 : 타입힌트와 Pydantic 기반의 Validation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 3.5버전부터 지원하는 타입힌트 기능을 지원합니다.&lt;/li&gt;
&lt;li&gt;pydantic을 기반으로 Validation이 잘 작동합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; datetime
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; typing &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Optional
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; pydantic &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; BaseModel &lt;span class=&quot;token comment&quot;&gt;# 베이스모델&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BaseModel&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 타입어노테이션만 할 경우 해당 필드는 required 하다는 것을 알려줍니다.&lt;/span&gt;
    name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;홍길동&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 아무것도 들어오지 않을경우 기본값이며, str을 추론합니다.&lt;/span&gt;
    date_joined&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Optional&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;datetime&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;
    friends&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;


data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;date_joined&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2021-12-08 10:02&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;friends&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;4&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date_joined&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# datetime.datetime(2019, 6, 1, 12, 22)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;friends&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 2, 3, 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보통 DRF Serializer와 많이 비교되는것으로 알고있습니다. 이런 DRF Serializer와 pydantic의 차이점은 pydantic의 파싱 라이브러리라는 점입니다.&lt;/p&gt;
&lt;p&gt;위를 보면 아시겠지만, id의 타입을 int로 했음에도 불구하고, str값을 넣어주었을때 에러가 나지않고 파싱되어 int로 출력되는것을 볼수 있습니다.&lt;/p&gt;
&lt;p&gt;파싱할수 있는 데이터가 들어오면 어노테이션한 타입으로 파싱해주며, 그것이 아니라면 에러를 출력합니다.&lt;/p&gt;
&lt;p&gt;평균적으로 DRF Serializer 보다는 pydantic이 더 빠르다고 합니다.&lt;/p&gt;
&lt;p&gt;다만 pydantic의 경우 Validation이 가능하지만 Serializer와는 약간 결이 다르다고 하니 Serializer에서 어떤 기능을 사용하는지 파악 후에, pydantic을 사용해야 할 것 같습니다&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;쉽고-빠르다--간결한-코드와-swagger기반의-문서자동화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%89%BD%EA%B3%A0-%EB%B9%A0%EB%A5%B4%EB%8B%A4--%EA%B0%84%EA%B2%B0%ED%95%9C-%EC%BD%94%EB%93%9C%EC%99%80-swagger%EA%B8%B0%EB%B0%98%EC%9D%98-%EB%AC%B8%EC%84%9C%EC%9E%90%EB%8F%99%ED%99%94&quot; aria-label=&quot;쉽고 빠르다  간결한 코드와 swagger기반의 문서자동화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쉽고 빠르다 : 간결한 코드와 Swagger기반의 문서자동화&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;쉽고 빠른 API서버개발을 위한 프레임워크인 만큼 코드가 간결하다고 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# main.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; uvicorn

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; fastapi &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; FastAPI


app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; FastAPI&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; __name__ &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    uvicorn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main:app&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;장고를 사용해보지 않아서 모르지만, 실제로 ‘hello world’를 받을때까지 2분도 걸리지 않았습니다.&lt;/p&gt;
&lt;p&gt;가상환경을 만들고 fastApi를 설치하고 uvicorn을 설치한 뒤 fastAPI를 불러서 간단하게 helloWold를 화면에 출력해볼수 있었습니다.&lt;/p&gt;
&lt;p&gt;해당 내용은 다른 python 프레임워크를 사용해봐야 체감할 수 있겠지만, 장고 튜토리얼만 살짝봐도 fastAPI 가 더 간결하다는것을 쉽게 느낄수 있었습니다.&lt;/p&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Swagger기반의 자동문서화를 지원합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/user&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;covy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;user의 정보를 받기위해 다음과 같은 API를 개발했다고 생각해봅시다.&lt;/p&gt;
&lt;p&gt;일반적으로 Swagger같은 툴로 API의 테스트 겸 문서화를 많이들 한다고 합니다.&lt;/p&gt;
&lt;p&gt;그런 Swagger를 fastAPI에서는 자동으로 생성해줍니다.&lt;/p&gt;
&lt;p&gt;포트번호 뒤에 /docs를 입력해주면..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/fast_1.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;위와 같이 자동으로 Swagger가 생성되며 아래처럼 똑같이 사용 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/fast_2.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;성능이-좋다--빠른-속도와-동시성concurrency-기반의-비동기-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%B1%EB%8A%A5%EC%9D%B4-%EC%A2%8B%EB%8B%A4--%EB%B9%A0%EB%A5%B8-%EC%86%8D%EB%8F%84%EC%99%80-%EB%8F%99%EC%8B%9C%EC%84%B1concurrency-%EA%B8%B0%EB%B0%98%EC%9D%98-%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;성능이 좋다  빠른 속도와 동시성concurrency 기반의 비동기 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;성능이 좋다 : 빠른 속도와 동시성(Concurrency) 기반의 비동기 동작&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;node.js보다 빠르고 go와 필적하는 속도를 가진 프레임워크&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;fastAPI 개발자는 fastAPI 의 성능이 node.js 보다 빠르고 go와 비교될 정도로 빠른 속도를 자랑한다고 합니다.&lt;/p&gt;
&lt;p&gt;그렇다면 fastAPI는 어떻게 이런 빠른속도를 가질 수 있는것일까요?&lt;/p&gt;
&lt;p&gt;이에대한 답으로 개발자 Sebastián Ramírez 는 다음과 같이 답했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Why is FastAPI fast?

It&apos;s built on top of Starlette, normally run with Uvicorn,
that uses Uvloop, a high-performance drop-in replacement for asyncio
(it powers all the async/await stuff).

And Uvloop and Pydantic are both built with Cython. A sort-of compiled Python. 🚅&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/content/python/fast_3.png&quot; alt=&quot;ex_screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;요약하면 fastAPI는 Starlette기반으로 만들어졌는데,Starlette는 Uvicorn을 써서 빠르고, Uvicorn은 Uvloop를 사용해서 빠르고, Uvloop은 Cython을 기반으로 만들어져 빠르다는 것입니다.&lt;/p&gt;
&lt;p&gt;간략하게 알아봅시다.&lt;/p&gt;
&lt;h3 id=&quot;starlette&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#starlette&quot; aria-label=&quot;starlette permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Starlette&lt;/h3&gt;
&lt;p&gt;Starlette의 설명 문구인 ‘The little ASGI framework that shines’ 와 같이 Starlette은 ASGI 웹 서버인 Uvicorn 위에서 실행되는 프레임워크입니다.&lt;/p&gt;
&lt;p&gt;fastAPI가 Starlette를 기반으로 개발되었기 때문에 Starlette를 직접 사용하는것보다는 조금 성능이 떨어질 수 있지만, fastAP의 장점과 Starlette의 장점이 더해져서 더 막강한 프레임워크라고 할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;uvicorn-그리고-asgi&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#uvicorn-%EA%B7%B8%EB%A6%AC%EA%B3%A0-asgi&quot; aria-label=&quot;uvicorn 그리고 asgi permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Uvicorn 그리고 ASGI&lt;/h3&gt;
&lt;p&gt;Starlette도 가장 중요한 포인트는 Uvicorn을 사용한다는 점입니다. 물론 이는 fastAPI에서도 가장 중요한 핵심입니다.&lt;/p&gt;
&lt;p&gt;Uvicorn(ASGI Web Server)은 uvloop 및 httptools를 사용하는 ASGI web server입니다.&lt;/p&gt;
&lt;p&gt;그렇다면 ASGI란 무엇일까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ASGI(Asynchronous Server Gateway Interface)는 비동기 Python 웹 서버입니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉 비동기 서버 게이트웨이 인터페이스인데, ASGI덕분에 비동기 처리를 할 수 있나봅니다. 그러다보니 당연한 의문이 생깁니다. 파이썬은 비동기처리가 안되나? 그리고 ASGI가 있다면 반대개념도 있을까?&lt;/p&gt;
&lt;p&gt;맞습니다 장고와 플라스크는 WSGI(Web Server Gateway Interface)를 이용한다고 합니다.&lt;/p&gt;
&lt;p&gt;클라이언트에서 동적인 요청을 보내면 웹서버는 웹 어플리케이션에게 요청을 위임하고 요청한 위임에 대한 결과를 받습니다. 그런데 웹서버가 웹 어플리케이션과 대화하려면 중간에 인터페이스가 필요합니다.&lt;/p&gt;
&lt;p&gt;CGI,WAS(ex.톰캣)같은 것이 있으나 파이썬에서는 WSGI를 사용합니다. WSGI의 대표적인 예시로는 장고에서 사용중인 Gunicorn이 있습니다.&lt;/p&gt;
&lt;p&gt;다만 WSGI는 요청에 대한 콜백이 동기적인 형태를 가졌습니다. 이는 파이썬자체가 동기적인 방식으로 동작하는 언어이기 때문에 WSGI또한 함께 가지는 문제점입니다.&lt;br&gt;
(물론 셀러리와 비동기 큐를 이용하면 비동기처리를 할 수는 있습니다.)&lt;/p&gt;
&lt;p&gt;이러한 문제점을 해결하기 위해 ASGI가 나오게 되었으며, 훌륭하게 비동기 처리를 할 수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;이런 비동기처리는 파이썬의 asyncio와 코루틴에 대한 지식이 있다면 더 쉽게 이해 할수 있을것입니다.&lt;/p&gt;
&lt;p&gt;또한 Uvicorn은 동시성을 기반으로 싱글 프로세스로 동작하는데, 병렬처리를 헤야할 필요가 있다면 Gunicorn을 통해 추가적인 프로세스를 실행해 병렬성을 확보할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이때 Gunicorn은 Uvicorn을 관리하며 여러 프로세스를 실행시킬수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;uvloop&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#uvloop&quot; aria-label=&quot;uvloop permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Uvloop&lt;/h3&gt;
&lt;p&gt;uvloop는 asyncio를 대체하기 위해 만들어졌습니다. Uvloop는 Cython으로 작성되었으며 libuv 위에 구축되었습니다.&lt;/p&gt;
&lt;p&gt;참고로 libuv는 nodejs에서 사용하는 고성능 다중 플랫폼 비동기 I / O 라이브러리입니다 해당 라이브러리에 대해 제대로 알기 위해서는 더 깊은 지식이 필요하니 일단 비동기 입출력, 이벤트 기반에 초점을 맞춘 라이브러리라고 인지하겠습니다.&lt;br&gt;
(nodejs v8엔진에서도 사용한다고 합니다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# pip로 설치해서 사용할수 있습니다.&lt;/span&gt;
pip install uvloop

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; asyncio
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; uvloop

asyncio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set_event_loop_policy&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uvloop&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EventLoopPolicy&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;cython&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cython&quot; aria-label=&quot;cython permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Cython&lt;/h3&gt;
&lt;p&gt;Cython은 파이썬 언어로 작성된 파일을 c/c++로 컴파일 해주는 컴파일언어라고 합니다. python 기반으로 C 루틴을 호출하기 때문에 컴퓨터 내에 c/c++이 설치되어 있어야 한다고 합니다.&lt;/p&gt;
&lt;p&gt;파이썬을 컴파일해서 c로 실행시키는 만큼 빠른 속도를 가지고 있습니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;즉 Cython을 기반으로 Uvloop를 개발하였으며, Uvloop와 httptools를 이용해서 ASGI를 구현한 Uvicorn위에서 실행되기 때문에 보다 빠른 성능을 가질수 있게 된것입니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;훌륭하다--공식문서가-정말-훌륭합니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9B%8C%EB%A5%AD%ED%95%98%EB%8B%A4--%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C%EA%B0%80-%EC%A0%95%EB%A7%90-%ED%9B%8C%EB%A5%AD%ED%95%A9%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;훌륭하다  공식문서가 정말 훌륭합니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;훌륭하다 : 공식문서가 정말 훌륭합니다&lt;/h2&gt;
&lt;p&gt;요즘 정말 많은 블로그글들이 있고, 스택오버플로우며 어떤 기술에 대한 정보를 쉽게 알 수 있습니다. 다만 fastAPI는 장고나 플라스크와는 다르게 아직 커뮤니티가 많이 형성되지는 않았습니다.&lt;/p&gt;
&lt;p&gt;하지만 첫 시작을 하려고 한다면 공식문서만 보아도 이해하는데에 충분한 도움을 줍니다.&lt;/p&gt;
&lt;p&gt;상세하고 친절한 설명과 충분한 예제, 사진으로 이해도를 높여주며, 부분적이지만 한글로 번역된 점은 역시 처음 fastAPI를 배워가는 입장에서는 더 쉽게 다가갈 수 있었습니다.&lt;/p&gt;
&lt;p&gt;무엇보다 훌륭한 공식문서는 가장 좋은 지름길이라고 생각합니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;후기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9B%84%EA%B8%B0&quot; aria-label=&quot;후기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;후기&lt;/h2&gt;
&lt;p&gt;fastAPI를 짧게 배워보면서 쿼리변수를 알아서 넘겨준다던지, 스웨거를 자동으로 생성해준다던지, 몇 안되는 코드로 쉽고 빠르게 API를 만들어본 경험은 충분히 매력적이었습니다.&lt;/p&gt;
&lt;p&gt;다만, 다른 프레임워크(특히 플라스크와 주로 비교가된다고 합니다)와 서버개발의 경험이 없기때문에 fastAPI가 다른것과 비교해서 이것이 강점이다! 라고 느끼기에는 다소 무리가 있었습니다.&lt;/p&gt;
&lt;p&gt;다음번에는 장고를 배워보며 fastAPI에서 했던것과 비교해보겠습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&quot;참조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EC%A1%B0&quot; aria-label=&quot;참조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참조&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fastapi.tiangolo.com/ko/&quot;&gt;https://fastapi.tiangolo.com/ko/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wookkl.tistory.com/62&quot;&gt;https://wookkl.tistory.com/62&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devocean.sk.com/blog/techBoardDetail.do?ID=163772&quot;&gt;https://devocean.sk.com/blog/techBoardDetail.do?ID=163772&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Docker! 왜 좋은걸까요?]]></title><description><![CDATA[…]]></description><link>https://jeongyeon9254.github.io/docker/2022.11.26도커 왜 좋은걸까요/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/docker/2022.11.26도커 왜 좋은걸까요/</guid><pubDate>Sat, 26 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;개발환경관리-어떻게-하고-있으신가요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B4%80%EB%A6%AC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EA%B3%A0-%EC%9E%88%EC%9C%BC%EC%8B%A0%EA%B0%80%EC%9A%94&quot; aria-label=&quot;개발환경관리 어떻게 하고 있으신가요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발환경관리 어떻게 하고 있으신가요?&lt;/h2&gt;
&lt;p&gt;열심히 개발환경을 셋팅하고, 열심히 일하고, 열심히 퇴근했습니다. 그런데 마침 좋은 코드가 생각나서 집에서 코드를 수정해보려 합니다.&lt;/p&gt;
&lt;p&gt;그런데 생각해보니 집에서는 회사와 같이 개발환경을 셋팅하지 않았네요. 문득 여러가지 생각이 듭니다. 귀찮기도 하고, 내일할까 싶기도 하고.. 아니 애초에 좀 간단하게 개발환경 셋팅하면 안되나..&lt;/p&gt;
&lt;p&gt;이런 고민을 해결하기 위해 여러 방법을 찾던 중 도커에 대해 알게됩니다. 도커가 소프트웨어를 패키징해 쉽고 빠르게 배포를 도와준다고 합니다.&lt;/p&gt;
&lt;p&gt;무슨말인지 잘 모르겠으니 상세하게 찾아보겠습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;도커의-정의&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4%EC%9D%98-%EC%A0%95%EC%9D%98&quot; aria-label=&quot;도커의 정의 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커의 정의&lt;/h2&gt;
&lt;p&gt;자, 도커는 2013년 출시된 컨테이너 기반의 오픈소스 가상화 플랫폼입니다.&lt;/p&gt;
&lt;p&gt;이 도커를 사용하면 개발자는 쉽고 빠르게 여러 어플리케이션을 구축할수 있습니다. 그런데 컨테이너 기반이라고 한다면 컨테이너는 뭐고 가상화는 뭘까요?&lt;/p&gt;
&lt;h4 id=&quot;컨테이너&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88&quot; aria-label=&quot;컨테이너 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨테이너&lt;/h4&gt;
&lt;p&gt;컨테이너는 호스트OS (기본적으로 설치되어있는 운영체제) 상에 논리적인 구획(컨테이너)를 만들고, 어플리케이션을 작동시키기 위해 필요한 라이브러리나 여러 패키지들을 하나로 모아 마치 별도의 서버인것처럼 사용할수 있게 만든것입니다. 물론 도커를 사용하지 않고도 컨테이너를 사용할수 있긴 합니다.&lt;/p&gt;
&lt;h4 id=&quot;가상화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94&quot; aria-label=&quot;가상화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상화&lt;/h4&gt;
&lt;p&gt;가상화란 물리적인 하드웨어 장치를 논리적인 객체로 추상화하는 기술을 의미한다고 합니다. 일반적으로 우리는 하나의 OS위에서 어플리케이션이 실행됩니다. 하지만 가상화를 이용하면 기본 하드웨어의 자산인 CPU,MEMORY,Network등을 분산하거나 합쳐서 더 효율적으로 사용할수 있다고 합니다.&lt;/p&gt;
&lt;p&gt;사실 도커이전에도 이러한 고민은 많았었고, 해결책중 하나가 바로 가상화롤 통한 VM이었습니다.&lt;/p&gt;
&lt;h4 id=&quot;vm가상-머신&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vm%EA%B0%80%EC%83%81-%EB%A8%B8%EC%8B%A0&quot; aria-label=&quot;vm가상 머신 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VM(가상 머신)&lt;/h4&gt;
&lt;p&gt;가상머신은 우리 컴퓨터의 호스트OS위에 Hyperviso같은 가상머신을 관리하는 별도의 소프트웨어를 통해 가상의 하드웨어 위에 새로운 게스트OS를 설치하여 사용하는 기술입니다. 이런 가상머신은 윈도우에서 우분투를 돌리거나 할때 사용하기도 했습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;그래서-왜-도커를-쓰나요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%99%9C-%EB%8F%84%EC%BB%A4%EB%A5%BC-%EC%93%B0%EB%82%98%EC%9A%94&quot; aria-label=&quot;그래서 왜 도커를 쓰나요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그래서 왜 도커를 쓰나요?&lt;/h2&gt;
&lt;p&gt;잠깐 알아보았지만, 이전 문제를 해결하기 위한 방법으로 VM도 있었고, 그 이후에 컨테이너라는 기술도 생겼습니다. 그런데 왜 다들 도커에 열광하는걸까요?&lt;/p&gt;
&lt;p&gt;이전에 있었던 기술의 문제점은 무엇인지, 도커는 이를 어떻게 해결했는지 잠깐 알아보겠습니다.&lt;/p&gt;
&lt;h4 id=&quot;1-가상머신은-너무-무거워&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B0%80%EC%83%81%EB%A8%B8%EC%8B%A0%EC%9D%80-%EB%84%88%EB%AC%B4-%EB%AC%B4%EA%B1%B0%EC%9B%8C&quot; aria-label=&quot;1 가상머신은 너무 무거워 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 가상머신은 너무 무거워!&lt;/h4&gt;
&lt;p&gt;가상머신은 또하나의 OS를 설치하는 것입니다. 만약 100MB의 게스트OS를 10개 설치한다면? 그 메모리만 해도 벌써 많은 양을 차지하고 있습니다. 또한 가상화는 하드웨어 자원들을 쪼개거나 합친다고 했습니다. 그렇다면 CPU또한 나눠서 사용되어야 하고, 이로 인해 CPU자원을 확보하는것 또한 쉽지 않을것입니다.&lt;/p&gt;
&lt;h4 id=&quot;2-컨테이너-만들수는-있습니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%A7%8C%EB%93%A4%EC%88%98%EB%8A%94-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;2 컨테이너 만들수는 있습니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 컨테이너 만들’수’는 있습니다.&lt;/h4&gt;
&lt;p&gt;컨테이너를 직접 만들수 있습니다. 다만 해당 개념에대한 깊은 이해도가 필요하며, 이를 유지하고 관리하는것은 또 별개로 힘든 작업이 될것입니다. 애초에 도커는 LXC(리눅스 컨테이너)를 기반으로한 상위레벨의 컨테이너 기술입니다. 도커를 사용하는것은 어찌보면 더 쉽고 빠른 선택지인것이 당연합니다.&lt;/p&gt;
&lt;p&gt;우리는 ‘다양한 환경의 어플리케이션’을 개발하기 위한 방법으로 가상머신을 사용할 수 있었고, 그보다 더 빠르고 가벼운 컨테이너라는 기술을 알게 되었습니다.&lt;/p&gt;
&lt;p&gt;그리고 그 컨테이너를 기반으로 만들어진 도커는 이러한 컨테이너 기술을 개발자들이 더 쉽게 사용하고, 유지보수 할 수 있게 도와주는 소프트웨어 플랫폼입니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;도커-사용해보자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;도커 사용해보자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커 사용해보자!&lt;/h2&gt;
&lt;p&gt;자 정말 간단하게 도커에 대해 알아보았습니다. 물론 더 깊게 알기위해서는 컨테이너에 대한 깊은 이해도와 더불어 운영체제에 대한 이해도 필요할 것 입니다.&lt;/p&gt;
&lt;p&gt;하지만 그 부분은 추후에 채우도록하고, 이제 도커를 직접 사용해 봅시다.&lt;/p&gt;
&lt;p&gt;참고로 저는 WSL2를 이용하여 Ubuntu20.04.5 버전을 이용했습니다.&lt;/p&gt;
&lt;p&gt;여러가지 설치 방법중 스크립트를 이용한 설치를 진행해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ curl -fsSL https://get.docker.com/ | sudo sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;해당 명령어를 입력해주시고 좀 기다려 주시면 도커의 설치가 완료됩니다.&lt;/p&gt;
&lt;p&gt;도커의 버전을 확인하며 제대로 설치되었는지 체크해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ sudo docker version

...
Client: Docker Engine - Community
 Version:           20.10.21&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자 그런데 이번에 깜빡하고 sudo를 붙이지 않고 명령어를 입력했더니..&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Got permission denied while trying to connect to the Docker daemon socket...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 에러가 출력됩니다.&lt;/p&gt;
&lt;p&gt;읽어보니 권한이 없어 거부되었고, 도커데몬에 연결해보라는 해결책을 줍니다.&lt;/p&gt;
&lt;p&gt;그렇습니다. 루트계정이 아니기때문에 도커서비스 접속에 권한이 없는것입니다. 해당문제는 루트계정으로 접속하거나 해당계정을 도커그룹에 추가해주시는 것으로 해결이 가능합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ sudo usermod -aG docker ${USER}
// $USER은 유저 이름이 들어있는 변수입니다.
// 해당 변수와 계정의 이름이 맞는지 확인해줍시다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이후 추가된것을 확인하고 도커를 새로 시작해주면 sudo없이도 도커서비스에 접근이 가능한것을 확인해볼수 있습니다.&lt;/p&gt;
&lt;p&gt;그럼 이제 이미지도 확인해줍시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ docker image


REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

// 현재 설치된 이미지가 없습니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;여기서-이미지란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%AC%EA%B8%B0%EC%84%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%9E%80&quot; aria-label=&quot;여기서 이미지란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;여기서 이미지란..&lt;/h4&gt;
&lt;p&gt;도커에는 중요한 개념 이미지와 컨테이너가 있습니다. 컨테이너는 위와 같은 개념이며, 이미지는 어플리케이션 실행에 필요한 다양한 파일들을 모아 도커파일을 통해 이미지를 빌드합니다. 그리고 해당 이미지를 실행하여 도커 컨테이너를 사용할 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;자 그럼 이제 새로운 이미지를 받아봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ docker pull centos

...이후 다시 이미지를 확인하면
REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
centos       latest    5d0da3dc9764   14 months ago   231MB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;centOS의 이미지가 받아졌습니다. 즉 해당 이미지를 실행하면 centOS의 환경을 실행할수 있는 것입니다.&lt;/p&gt;
&lt;p&gt;자 이렇게 간단히 도커란 무엇인지와 도커를 설치해보고 이미지를 받아보는것까지 했습니다. 사실 이제 이미지를 실행시켜 컨테이너를 띄우면 아주아주 기본적인 도커실행은 끝이긴 합니다.&lt;/p&gt;
&lt;p&gt;다만 개요에도 나왔듯, 제 목적은 개발환경의 통합입니다. 그렇다면 우선 해야할 것은 나의 개발환경을 도커파일을 통해 이미지로 빌드하는 것 입니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;후기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9B%84%EA%B8%B0&quot; aria-label=&quot;후기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;후기&lt;/h2&gt;
&lt;p&gt;사실 커맨드로 설치하지 않아도 공식 홈페이지에 가면 아주아주 쉽게 다운로드가 가능합니다.&lt;/p&gt;
&lt;p&gt;그렇기에 다음에 직접 이미지를 빌드시켜보고, 해당 이미지를 다른 컴퓨터에서 빌드해서 잘 작동되는지 확인해보겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[코어 자바스크립트 (2)]]></title><description><![CDATA[실행 컨텍스트 실행 컨텍스트란 Execution Context)는 scope, hoisting, this, function, closure…]]></description><link>https://jeongyeon9254.github.io/Javascript/2022.11.19코어자바스크립트_2/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Javascript/2022.11.19코어자바스크립트_2/</guid><pubDate>Sat, 19 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;실행-컨텍스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;실행 컨텍스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행 컨텍스트&lt;/h1&gt;
&lt;p&gt;실행 컨텍스트란 Execution Context)는 scope, hoisting, this, function, closure 등의 동작원리를 담고 있는 자바스크립트의 핵심원리를 담고있는 내용이라고 합니다.&lt;/p&gt;
&lt;p&gt;즉 이것은 자바스크립트의 동적언어로서의 성격을 잘 파악할수 있는 개념이라고 할수있으며, 실행 컨텍스트를 이해하지 못한다고 하면 사실상 자바스크립트에 대한 이해도가 낮다고 할수 있습니다.&lt;/p&gt;
&lt;p&gt;그래서 이 기회에 공부를 해보며, 완벽하진 않아도 ‘아 자바스크립트는 이렇게 실행되는구나!’ 라고 생각으 들정도로는 정리를 해보려 합니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;들어가기-앞서-스택-과-큐&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C-%EC%8A%A4%ED%83%9D-%EA%B3%BC-%ED%81%90&quot; aria-label=&quot;들어가기 앞서 스택 과 큐 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;들어가기 앞서 스택 과 큐&lt;/h2&gt;
&lt;p&gt;스택과 큐는 알고리즘 자료구조입니다.&lt;br&gt;
이는 자바스크립트의 개념이라기보다는 프로그래밍 개념이라고 할수 있겠습니다.&lt;/p&gt;
&lt;p&gt;완벽하게 아는것은 아니지만 짧게 개념만 공부해보겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;스택&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%83%9D&quot; aria-label=&quot;스택 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스택&lt;/h3&gt;
&lt;p&gt;스택은 바닥이 막힌 원통이라고 생각해보겠습니다.&lt;/p&gt;
&lt;p&gt;해당 원통형에 물건을 차곡차곡 넣으면 꺼낼때는 위에 있는것부터 꺼내질것입니다. 이렇게 데이터의 입출력을 후입선출 방식입니다.&lt;/p&gt;
&lt;p&gt;아마 가장 흔하게 만나볼수 있는 스택구조는 winodw.history와 같은 네비게이션 객체이지 않나 싶습니다. 페이지를 이동할때 스택구조에 페이지를 저장할 경우 뒤로가기를 클릭하면 그저 가장 최상단에 있는 페이지로 이동시키기만 하면 되기 때문입니다.&lt;/p&gt;
&lt;p&gt;참고로 이런 스택은 제한이 있기 때문에 해당 스택을 넘어가는 횟수의 함수호출을 할 경우 에러를 발생시키게 됩니다.&lt;/p&gt;
&lt;h3 id=&quot;큐&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%90&quot; aria-label=&quot;큐 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;큐&lt;/h3&gt;
&lt;p&gt;큐는 양쪽이 뚫려있는 원통형과 같습니다. 먼저 들어온것이 먼저 나가는 선입선출의 구조로 되어있습니다. 이러한 큐는 입력된 순서대로 데이터를 처리하기 때문에 순서가 정해진 작업을 할 경우 사용할 수 있습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;자바스크립를-동작하게-하는-것들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%EB%A5%BC-%EB%8F%99%EC%9E%91%ED%95%98%EA%B2%8C-%ED%95%98%EB%8A%94-%EA%B2%83%EB%93%A4&quot; aria-label=&quot;자바스크립를 동작하게 하는 것들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립를 동작하게 하는 것들&lt;/h2&gt;
&lt;p&gt;자바스크립트는 제목에서처럼 알수 있듯이 스크립트 언어입니다. 그런데 공부하다보면 항상 마주치는것이 하나있습니다. 바로 ECMAscript, 그러다보니 마치 ES가 자바스크립트 자체라고 오해할수도 있는데, 사실은 ES는 모든 스크립트 언어가 호환될수 있도록 만든 협약같은 것이며, 최근에 자바스크립트는 이런 ES를 기반으로 만들어졌다고 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이런 자바스크립트를 웹에서 실행시키기 위해 만들어진것이 자바스크립트 엔진입니다. 각 브라우저마다 엔진의 종류는 다르지만 기본적인 구조는 같습니다.&lt;/p&gt;
&lt;p&gt;자바스크립트 엔진은 메모리힙과 콜스택구조를 가지고 있으며, 자바스크립트가 실행되면 실행컨텍스트가 콜스택이라는 엔진내에 스택구조에 쌓이게 되고, 역시 한번에 한가지 일을 수행하게 됩니다.&lt;/p&gt;
&lt;p&gt;여담으로 콜스택구조에는 원시타입 데이터가, 메모리 힙에는 참조타입 데이터가 저장된다고 합니다.&lt;/p&gt;
&lt;p&gt;하지만 우리는 코딩을하며 비동기적으로 무언가를 실행시켜본 경험이 있을것입니다. 만약 자바스크립트가 한번에 한개의 일밖에 못한다면 어떻게 비동기적으로 일을 처리할수가 있었을까요?&lt;/p&gt;
&lt;p&gt;그 이유는 브라우저에는 자바스크립트 엔진 외에도 WebAPI, 콜백 큐, 이벤트 루프라는것이 있기 때문입니다.&lt;/p&gt;
&lt;p&gt;해당 구조들이 어떤역할을 하는지 짧게 알아보겠습니다.&lt;/p&gt;
&lt;h3 id=&quot;webapi&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#webapi&quot; aria-label=&quot;webapi permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WebAPi&lt;/h3&gt;
&lt;p&gt;첫번째로 WebApi는 우리가 사용하는 여러가지 기능들입니다. setinterval이나 domevent같은 이벤트들이 webAPi라고 할수 있으며 자세한 정리는 다음번에 하기로 하고 다음으로 넘어갑니다.&lt;/p&gt;
&lt;h3 id=&quot;콜백큐&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%9C%EB%B0%B1%ED%81%90&quot; aria-label=&quot;콜백큐 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;콜백큐&lt;/h3&gt;
&lt;p&gt;두번째인 콜백 큐는 비동기 처리를 하는 함수를 관리하는 친구입니다. 이런 콜백 큐는 ECMA2015에 joq queue라는 개념이 추가되었는데, 이는 웹 API가 아니라 다른 비동기 처리인 프로미스등이 우선권을 가지는 개념입니다.&lt;/p&gt;
&lt;h3 id=&quot;이벤트-루프&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84&quot; aria-label=&quot;이벤트 루프 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이벤트 루프&lt;/h3&gt;
&lt;p&gt;세번째인 이벤트 루프는 콜스택이 비어있을때 콜백큐에 있는 함수들을 콜스택으로 보내는 일을 합니다.&lt;/p&gt;
&lt;p&gt;이런식으로 자바스크립트는 싱글스레드이지만 비동기적 처리를 할수 있게 되었습니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;위와 같이 들어가기전 스택과 큐에대해 잠깐 알아보았습니다.&lt;/p&gt;
&lt;p&gt;다음번에는 제대로 실행컨텍스트에 대해 알아보겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[에러코드 표준화]]></title><description><![CDATA[너무 난잡한 에러코드 현재 프로젝트에서 프론트단에 API호출이 굉장히 많습니다. 물론 다른 프로젝트고 똑같겠죠. 그리고 비단 API뿐만이 아니라 모든 함수실행에 있어 try&catch…]]></description><link>https://jeongyeon9254.github.io/UX&amp;UI/2022.11.16에러코드 표준화/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/UX&amp;UI/2022.11.16에러코드 표준화/</guid><pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;너무-난잡한-에러코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%84%88%EB%AC%B4-%EB%82%9C%EC%9E%A1%ED%95%9C-%EC%97%90%EB%9F%AC%EC%BD%94%EB%93%9C&quot; aria-label=&quot;너무 난잡한 에러코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;너무 난잡한 에러코드&lt;/h1&gt;
&lt;p&gt;현재 프로젝트에서 프론트단에 API호출이 굉장히 많습니다. 물론 다른 프로젝트고 똑같겠죠. 그리고 비단 API뿐만이 아니라 모든 함수실행에 있어 try&amp;#x26;catch문으로 예외처리를 하고있습니다.&lt;/p&gt;
&lt;p&gt;에러가 났을경우 유저에게 당연히 에러사실을 인지시켜야 합니다. 그렇지 않으면 유저는 자신이 보고있는 화면이 제대로 전달된 화면인이 모를테니까요.&lt;/p&gt;
&lt;p&gt;4개월 쯤 되었을때 이런생각을 하게됩니다.&lt;br&gt;
이거 너무 불편하지 않나?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 현재 에러 핸들링\&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;response&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;502&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;현재 업데이트중입니다. 잠시후 다시 시도해주세요&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재의 에러 핸들링입니다.&lt;/p&gt;
&lt;p&gt;에러발생시 객체에 리스폰스값을 참고하여 적당한 에러미시지를 추출하고, error()함수를 통해 에러 토스트를 출력하고 있습니다.&lt;/p&gt;
&lt;p&gt;그런데 반드시 status코드로만 분간하는것이 아닙니다. 어떤것은 객체의 에러메시지를 넣어주는 경우가 있고, 어떤것은 백엔드와 프론트간의 통신을 위해서만 에러메시지를 넣은 경우가 있습니다.&lt;/p&gt;
&lt;p&gt;당연히 이를 고대로 유저에게 노출시킬경우 유저는 어떠한 에러인지 제대로 인지하지 못하게 됩니다.&lt;/p&gt;
&lt;p&gt;그리고 저 또한 매우 피곤한 코드를 작성하게 됩니다.&lt;/p&gt;
&lt;p&gt;가령 에러객체안의 메시지가&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;errors&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;nonFieldErrors

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/* &apos;AttributeError: 카카오 사용자 정보를 가져올 수 없습니다.
 액세스 토큰이 잘못되었거나 만료되었을 수 있습니다.&apos; */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 되어있을 경우 유저에게 저 내용 전부가 필요하지는 않습니다. 하지만 가공을 위해서는 어떤 에러인지를 알아야 할 필요가 있죠.&lt;/p&gt;
&lt;p&gt;그러다보니 이런 경우도 생깁니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;errors&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;nonFieldErrors

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;duplicate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;중복된 사용자입니다.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;백엔드에서 보내주는 에러코드도 무분별하고, 이를 받는 프론트의 에러핸들링도 무분별하다보니 모든 API에 대해서 개별적으로 에러핸들링을 해줘야했습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;백엔드와의-에러코드-표준화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%94%EB%93%9C%EC%99%80%EC%9D%98-%EC%97%90%EB%9F%AC%EC%BD%94%EB%93%9C-%ED%91%9C%EC%A4%80%ED%99%94&quot; aria-label=&quot;백엔드와의 에러코드 표준화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백엔드와의 에러코드 표준화&lt;/h2&gt;
&lt;p&gt;이런 문제는 결국 제품과 유저의 소통을 힘들게하고, 개발자와 운영팀과의 소통이 힘들게 됩니다. 그리고 매번 새로운 에러메시지를 작성해야하는 저도 힘들죠.&lt;/p&gt;
&lt;p&gt;그래서 해당 문제에대한 해결책을 몇가지 생각해보려합니다.첫번째로 백엔드와 에러코드 표준화를 진행합니다. 에러객체는 반드시 통일화 하며 저희 회사만에 에러코드를 만들게 됩니다.&lt;/p&gt;
&lt;p&gt;넘버링을 100~900 까지로 나누며, 백단위로 관련된 에러를 묶고 에러메시지도 최대한 소통하기 편한쪽으로 작성할 예정입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handlingErrorMessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;502&apos;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[에러코드 : 502] 로그인을 다시 시도해주세요&apos;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;503&apos;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[에러코드 : 503] 중복된 유저입니다. 고객센터로 문의해주세요.&apos;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;더-나은-에러를-위해&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%94-%EB%82%98%EC%9D%80-%EC%97%90%EB%9F%AC%EB%A5%BC-%EC%9C%84%ED%95%B4&quot; aria-label=&quot;더 나은 에러를 위해 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;더 나은 에러를 위해..&lt;/h2&gt;
&lt;p&gt;이 과정에서 좀더 좋은 에러를 출력하기 위해 많은 생각을 했습니다. 앞서 말했듯이 현재는 에러에 대한 메시지만을 토스트로 출력하고 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 유저는 그것을 좋은 에러라고 느끼지 못합니다. 해당에러가 어떤 에러였는지 알았다면 응당 그에 대한 해결책도 필요합니다.&lt;/p&gt;
&lt;p&gt;그렇기에 단순 토스트창보다는 어떠한 액션이 있는 에러가 좋다고 생각했습니다. 가령 중복된 사용자의 경우 고객센터로 문의를 해줘야하는데 이 경우 단순히 닫기 대신 고객센터로 전화하는 버튼을 만들어준다면 유저는 좀 더 쉽게 해당 문제를 해결할 수 있을것입니다.&lt;/p&gt;
&lt;p&gt;물론 이렇게 특정 액션을 해줄경우는 많지 않을거같지만, 적어도 단순 에러출력보다는 이 에러로 인해 유저가 어떤 행동을 해야하는지 유도해줘야겠다고 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;이것이 모두 정답일수는 없겠지만, 아주 작은 편의성이라도 유저를 위해 더 개선시켜야겠다고 생각했습니다.&lt;/p&gt;
&lt;p&gt;다음번에는 해당 코드표준화 작업 이후의 느낀점을 정리해보면 좋을거같습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[코어 자바스크립트 (1)]]></title><description><![CDATA[데이터 타입 자바스크립트 데이터에는 2가지 타입이 있습니다. 기본형 ( Number,String,Boolean,null,undefined,Symbol ) 참조형 ( Array,Function,Date,RegExp,Map,Set…]]></description><link>https://jeongyeon9254.github.io/Javascript/2022.11.10코어자바스크립트_1/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Javascript/2022.11.10코어자바스크립트_1/</guid><pubDate>Thu, 10 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;데이터-타입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85&quot; aria-label=&quot;데이터 타입 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 타입&lt;/h2&gt;
&lt;p&gt;자바스크립트 데이터에는 2가지 타입이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본형 ( Number,String,Boolean,null,undefined,Symbol )&lt;/li&gt;
&lt;li&gt;참조형 ( Array,Function,Date,RegExp,Map,Set )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우리는 기본형은 값의 주솟값을, 참조형은 값이 담긴 주솟값들에 묶음을 가리키는 주솟값을 복제한다고 알고있습니다.&lt;/p&gt;
&lt;p&gt;그런데 처음 배웠을 당시 기본형은 불변성을 가지고, 참조형은 가변성을 가진다는 말이 잘 이해가 되지 않았습니다.&lt;/p&gt;
&lt;p&gt;오히려 반대아니냐고 생각했었죠. 오늘은 그 개념을 정확하게 짚고, 더 나아가 숫자형 데이터타입에 관한 배경지식을 정리해보려 합니다.&lt;/p&gt;
&lt;h2 id=&quot;데이터의-불변성과-가변성에-대해&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%B6%88%EB%B3%80%EC%84%B1%EA%B3%BC-%EA%B0%80%EB%B3%80%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%B4&quot; aria-label=&quot;데이터의 불변성과 가변성에 대해 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터의 불변성과 가변성에 대해&lt;/h2&gt;
&lt;p&gt;자 먼저 변수에 값을 할당해봅니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 변수를 선언한 순간 메모리에서는 이런식으로 읽는다고 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

num이라는 변수를 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번이라는 방에 저장됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;의 데이터는 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번이라는 방에 저장됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번 방문을 열면 바로 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번 방과 연결됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이때 num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 라고 변수에 새로운 값을 할당한다면

num이라는 변수는 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방 그대로입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;의 데이터는 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번이라는 방에 저장됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

그리고 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방은 이제 새로운 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방과 연결됬습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

즉 변수가 바라보고 있는 데이터의 입장에서는
새로운 데이터가 변수와 연결되려면
새로운 방을 연결해야합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
절대 자기자신이 변경될수는 없습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것을 보고 기본형 데이터는 불변성을 띈다고 합니다.&lt;/p&gt;
&lt;p&gt;이걸보면 결국 데이터를 새로 선언하면 새로운 방에 저장이 되며, 결국 다 불변성을 띄는거 아니냐고 생각할수 있습니다.
제가 그렇게 생각했으니까요.&lt;/p&gt;
&lt;p&gt;그럼 참조형의 경우를 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;num_1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;num_2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;새로운 객체를 만들고 객체 안에 값을 넣었습니다. 이때 어떤식으로 처리가 될까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token literal-property property&quot;&gt;num_1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token literal-property property&quot;&gt;num_2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

object 라는 객체를 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
num_1이라는 &lt;span class=&quot;token function&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;변수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;를 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
num_2이라는 &lt;span class=&quot;token function&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;변수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;를 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;의 데이터를 &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;의 데이터를 &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이제 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방에 문을 열면 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방의 문이 보이고&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
각 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방은 &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;번방과 연결되어있습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이때 object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num_1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; 이라고 값을 변경한다면

&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;의 데이터를 &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;번방에 저장하며&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번방은 &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;번방과 새로 연결된것이 됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

즉 객체가 바라보고 있는 &lt;span class=&quot;token function&quot;&gt;데이터&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;변수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;의 입장에서는
객체와 연결된채로 자기자신의 값을 바꾸는 것이
가능합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 그저 새로운 값의 방만 연결할 뿐입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것을 보고 참조형 데이터는 불변성을 띈다라고 합니다.&lt;br&gt;
아직도 많은것을 모르지만 이젠 적어도 자바스크립트에서 변수를 선언할때 최소한 어떤식으로 선언되는지는 알게됬습니다.&lt;/p&gt;
&lt;h2 id=&quot;0과1-그리고-9223372036854775807&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#0%EA%B3%BC1-%EA%B7%B8%EB%A6%AC%EA%B3%A0-9223372036854775807&quot; aria-label=&quot;0과1 그리고 9223372036854775807 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0과1 그리고 9223372036854775807&lt;/h2&gt;
&lt;p&gt;컴퓨터는 0과1의 세계라고 합니다.&lt;br&gt;
그 0과1만을 표현할수 있는 하나의 메모리 조각을 비트라고 합니다.&lt;/p&gt;
&lt;p&gt;이런 비트를 8개 묶어 표현하는것을 1바이트라고 합니다. 1바이트는 총 256개(2^8)의 값을 표현할수 있습니다.&lt;/p&gt;
&lt;p&gt;옛날에는 하나의 데이터에 몇개의 바이트로 표현할것인가에 대해 개발자가 직접 할당을 했지만, 현대에서는 많은 메모리 제약이 사라졌고, 이 덕분에 자바스크립트 내에서 숫자의 경우 정수형인지, 부동소수형인지 구분하지 않고 8바이트를 확보할 수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;그런데 8바이트를 확보하고 있다는 말은 결국 저장할수 있는 숫자의 범위가 한정적이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;이게 무슨말이냐면 직접 변수에 큰 숫자를 넣어보면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; maxNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9223372036854775807&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

콘솔로그를 찍어보자&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 9223372036854776000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자 숫자가 정확하게 표현되지 않았습니다.&lt;br&gt;
그리고 친절하게 왜 안되는지 알려주기까지 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;절대값이 2^53보다 크거나 같은 숫자 리터럴은
너무 커서 정수로 정확하게 표시할 수 없습니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 아까 자바스크립트는 숫자에 대해서는 기본적으로 8바이트를 확보하고 있다고 알게됬습니다.&lt;/p&gt;
&lt;p&gt;즉 2^64까지의 값만 변수에 넣을수 있는것이죠. 그런데 에러를 보면 2^53과 같거나 큰 숫자라고 합니다. 너무 억울하죠. 내가 쓰지도 않는 나머지는 어디로 갔을까요?&lt;/p&gt;
&lt;h2 id=&quot;숫자는-무한하지-그래서-bigint&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%88%AB%EC%9E%90%EB%8A%94-%EB%AC%B4%ED%95%9C%ED%95%98%EC%A7%80-%EA%B7%B8%EB%9E%98%EC%84%9C-bigint&quot; aria-label=&quot;숫자는 무한하지 그래서 bigint permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;숫자는 무한하지 그래서 BigInt&lt;/h2&gt;
&lt;p&gt;이것을 알기 위해 조금 돌아가보면.. 우리세상에 숫자는 크게 2가지 타입이 있습니다. 실수와 정수입니다. 우리 세상에 모든숫자는 실수로 나타낼수 있으며, 정수는 실수의 부분집합입니다.&lt;/p&gt;
&lt;p&gt;그런데 사실 실생활에서는 정수를 더 많이 사용하기도 하고, 그토록 많은 (사실상 무한에 가까운) 실수를 모두 데이터안에 담기에는 한계가 있는것이 자명했습니다.&lt;/p&gt;
&lt;p&gt;그렇기에 정확도를 낮추는 대신 표현할수 있는 범위를 늘리기로 합니다. 그 결과 64비트를 쪼개어 가수, 지수, 부호로 나누었으며 우리가 정확하고 안전하게 표현할수 있는 숫자는 2^53까지라고 합니다.&lt;br&gt;
(정확하게는 2^53-1까지라고 하는데 이유는 다음번에 정리해봅시다.)&lt;/p&gt;
&lt;p&gt;자 그럼 왜 못넣는지도 알았으니 간단하게 어떻게 하면 넣을수 있는지도 짤막하게 알아봅시다.&lt;/p&gt;
&lt;p&gt;BigInt라는 것이 있습니다. 이것은 최대,최소범위를 초과한 정수를 안전하게 저장하고 비교하기 위해 만들어진 JS의 새로운 데이터 형입니다.&lt;/p&gt;
&lt;p&gt;2^53을 초과한 데이터 뒤에 n을 붙이거나 BigInt()를 호출하여 사용하면 된다고 합니다.&lt;/p&gt;
&lt;p&gt;이때 해당 타입은 Number가 아닌 BigInt이며, 일반 숫자와 혼합하여 사용할수 없습니다. 이때 일반 숫자형도 모두 BigInt로 바꿔줘야 합니다.&lt;/p&gt;
&lt;p&gt;또한 BigInt를 Number로 바꾸면 정확성을 잃을수 있다고 하니 조심하여 사용해야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bigNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100n&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; bigNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// BigInt&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bigNum &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bigNum &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// TypeError&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//Cannot mix BigInt and other types, use explicit conversions&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[aboussst]]></title><description><![CDATA[준비중입니다. 행복한 하루가 되시길 바랍니다.]]></description><link>https://jeongyeon9254.github.io/resume-en/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/resume-en/</guid><pubDate>Mon, 10 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;준비중입니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A4%80%EB%B9%84%EC%A4%91%EC%9E%85%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;준비중입니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;준비중입니다.&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;행복한 하루가 되시길 바랍니다.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>