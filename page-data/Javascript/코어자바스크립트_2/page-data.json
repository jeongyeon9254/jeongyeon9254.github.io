{"componentChunkName":"component---src-templates-blog-post-js","path":"/Javascript/코어자바스크립트_2/","result":{"data":{"site":{"siteMetadata":{"title":"Jeong.io","author":"JeongYeonJae","siteUrl":"https://jeongyeon9254.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"0834ef0a-4706-5010-b421-19ff4f64a318","excerpt":"실행 컨텍스트 실행 컨텍스트란 Execution Context)는 scope, hoisting, this, function, closure…","html":"<h1 id=\"실행-컨텍스트\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"실행 컨텍스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트</h1>\n<p>실행 컨텍스트란 Execution Context)는 scope, hoisting, this, function, closure 등의 동작원리를 담고 있는 자바스크립트의 핵심원리를 담고있는 내용이라고 합니다.</p>\n<p>즉 이것은 자바스크립트의 동적언어로서의 성격을 잘 파악할수 있는 개념이라고 할수있으며, 실행 컨텍스트를 이해하지 못한다고 하면 사실상 자바스크립트에 대한 이해도가 낮다고 할수 있습니다.</p>\n<p>그래서 이 기회에 공부를 해보며, 완벽하진 않아도 ‘아 자바스크립트는 이렇게 실행되는구나!’ 라고 생각으 들정도로는 정리를 해보려 합니다.</p>\n<br>\n<h2 id=\"들어가기-앞서-스택-과-큐\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C-%EC%8A%A4%ED%83%9D-%EA%B3%BC-%ED%81%90\" aria-label=\"들어가기 앞서 스택 과 큐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서 스택 과 큐</h2>\n<p>스택과 큐는 알고리즘 공부할때 자료구조로서 짧게 공부했습니다. 이는 자바스크립트의 개념이라기보다는 프로그래밍 개념이라고 할수 있겠습니다.</p>\n<p>스택은 바닥이 막힌 원통형입니다. 해당 원통형에 물건을 차곡차곡 넣으면 꺼낼때는 위에 있는것부터 꺼내질것입니다. 이렇게 데이터의 입출력을 후입선출 방식입니다.</p>\n<p>아마 가장 흔하게 만나볼수 있는 스택구조는 winodw.history와 같은 네비게이션 객체이지 않나 싶습니다. 페이지를 이동할때 스택구조에 페이지를 저장할 경우 뒤로가기를 클릭하면 그저 가장 최상단에 있는 페이지로 이동시키기만 하면 되기 때문입니다.</p>\n<p>참고로 이런 스택은 제한이 있기 때문에 해당 스택을 넘어가는 횟수의 함수호출을 할 경우 에러를 발생시키게 됩니다.</p>\n<p>큐는 양쪽이 뚫려있는 원통형과 같습니다. 먼저 들어온것이 먼저 나가는 선입선출의 구조로 되어있습니다. 이러한 큐는 입력된 순서대로 데이터를 처리하기 때문에 순서가 정해진 작업을 할 경우 사용할 수 있습니다.</p>\n<p>스택과 큐에 대해 알아보았으니 이번엔 자바스크립트와 자바스크립트를 실행하는 환경에 대해 잠시 알아봅시다.</p>\n<p>자바스크립트는 제목에서처럼 알수 있듯이 스크립트 언어입니다. 그런데 공부하다보면 항상 마주치는것이 하나있습니다. 바로 ECMAscript, 그러다보니 마치 ES가 자바스크립트 자체라고 오해할수도 있는데, 사실은 ES는 모든 스크립트 언어가 호환될수 있도록 만든 협약같은 것이며, 최근에 자바스크립트는 이런 ES를 기반으로 만들어졌다고 할 수 있습니다.</p>\n<p>이런 자바스크립트를 웹에서 실행시키기 위해 만들어진것이 자바스크립트 엔진입니다. 각 브라우저마다 엔진의 종류는 다르지만 기본적인 구조는 같습니다.</p>\n<p>자바스크립트 엔진은 메모리힙과 콜스택구조를 가지고 있으며, 자바스크립트가 실행되면 실행컨텍스트가 콜스택이라는 엔진내에 스택구조에 쌓이게 되고, 역시 한번에 한가지 일을 수행하게 됩니다.</p>\n<p>여담으로 콜스택구조에는 원시타입 데이터가, 메모리 힙에는 참조타입 데이터가 저장된다고 합니다.</p>\n<p>하지만 우리는 코딩을하며 비동기적으로 무언가를 실행시켜본 경험이 있을것입니다. 만약 자바스크립트가 한번에 한개의 일밖에 못한다면 어떻게 비동기적으로 일을 처리할수가 있었을까요?</p>\n<p>그 이유는 브라우저에는 자바스크립트 엔진 외에도 WebAPI, 콜백 큐, 이벤트 루프라는것이 있기 때문입니다.</p>\n<p>첫번째로 WebApi는 우리가 사용하는 여러가지 기능들입니다. setinterval이나 domevent같은 이벤트들이 webAPi라고 할수 있으며 자세한 정리는 다음번에 하기로 하고 다음으로 넘어갑니다.</p>\n<p>두번째인 콜백 큐는 비동기 처리를 하는 함수를 관리하는 친구입니다. 이런 콜백 큐는 ECMA2015에 joq queue라는 개념이 추가되었는데, 이는 웹 API가 아니라 다른 비동기 처리인 프로미스등이 우선권을 가지는 개념입니다.</p>\n<p>세번째인 이벤트 루프는 콜스택이 비어있을때 콜백큐에 있는 함수들을 콜스택으로 보내는 일을 합니다.</p>\n<p>이런식으로 자바스크립트는 싱글스레드이지만 비동기적 처리를 할수 있게 되었습니다.</p>\n<br>\n<h2 id=\"자-돌아와서-실행-컨텍스트\" style=\"position:relative;\"><a href=\"#%EC%9E%90-%EB%8F%8C%EC%95%84%EC%99%80%EC%84%9C-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"자 돌아와서 실행 컨텍스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자 돌아와서.. 실행 컨텍스트!</h2>\n<p>자 그럼 자바스크립트가 실행되면 어떤방식으로 동작하는지 알아보았으니, 이제 동작할 실행컨텍스트에 대해 알아보겠습니다.</p>\n<p>실행 컨텍스트는 3가지 정보를 가지고 있습니다.</p>\n<p>VariableEnvrionment, LexicalEnvrinment, ThisBinding 이렇게 3가지 정보를 가지고 있습니다.</p>\n<p>첫번째인 VE는 LE전에 정보를 먼저 담고 그 이후 그대로 복사를 해서 LE를 만듭니다.</p>\n<p>두번째인 LE는 VE의 초기값을 복사해 만든것입니다. LE는 Environment Record와 outer라는 포인터로 구성이 됩니다.</p>","frontmatter":{"title":"코어 자바스크립트 (2)","date":"November 19, 2022"}}},"pageContext":{"slug":"/Javascript/코어자바스크립트_2/","previous":{"fields":{"slug":"/UX/UI/에러코드 표준화/"},"frontmatter":{"title":"에러코드 표준화 (1)"}},"next":{"fields":{"slug":"/docker/나도 해보자 도커/"},"frontmatter":{"title":"나도 배워보자 도커 (1)"}}}}}