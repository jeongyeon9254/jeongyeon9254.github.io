{"componentChunkName":"component---src-templates-blog-post-js","path":"/UX/UI/에러코드 표준화 작업/","result":{"data":{"site":{"siteMetadata":{"title":"Jeong.io","author":"JeongYeonJae","siteUrl":"https://jeongyeon9254.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"48db84ee-7a1a-5517-ba20-36bb05fa0fc9","excerpt":"너무 난잡한 에러코드 현재 프로젝트에서 프론트단에 API호출이 굉장히 많습니다. 물론 다른 프로젝트고 똑같겠죠. 그리고 비단 API뿐만이 아니라 모든 함수실행에 있어 try&catch문으로 예외처리를 하고있습니다. 에러가 났을경우 유저에게 당연히 에러사실을 인지시켜야 합니다. 그렇지 않으면 유저는 자신이 보고있는 화면이 제대로 전달된 화면인이 모를테니까요.…","html":"<h1 id=\"너무-난잡한-에러코드\" style=\"position:relative;\"><a href=\"#%EB%84%88%EB%AC%B4-%EB%82%9C%EC%9E%A1%ED%95%9C-%EC%97%90%EB%9F%AC%EC%BD%94%EB%93%9C\" aria-label=\"너무 난잡한 에러코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>너무 난잡한 에러코드</h1>\n<p>현재 프로젝트에서 프론트단에 API호출이 굉장히 많습니다. 물론 다른 프로젝트고 똑같겠죠. 그리고 비단 API뿐만이 아니라 모든 함수실행에 있어 try&#x26;catch문으로 예외처리를 하고있습니다.</p>\n<p>에러가 났을경우 유저에게 당연히 에러사실을 인지시켜야 합니다. 그렇지 않으면 유저는 자신이 보고있는 화면이 제대로 전달된 화면인이 모를테니까요.</p>\n<p>4개월 쯤 되었을때 이런생각을 하게됩니다.<br>\n이거 너무 불편하지 않나?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 현재 에러 핸들링\\</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token operator\">?.</span>response<span class=\"token operator\">?.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">502</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'현재 업데이트중입니다. 잠시후 다시 시도해주세요'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>현재의 에러 핸들링입니다.</p>\n<p>에러발생시 객체에 리스폰스값을 참고하여 적당한 에러미시지를 추출하고, error()함수를 통해 에러 토스트를 출력하고 있습니다.</p>\n<p>그런데 반드시 status코드로만 분간하는것이 아닙니다. 어떤것은 객체의 에러메시지를 넣어주는 경우가 있고, 어떤것은 백엔드와 프론트간의 통신을 위해서만 에러메시지를 넣은 경우가 있습니다.</p>\n<p>당연히 이를 고대로 유저에게 노출시킬경우 유저는 어떠한 에러인지 제대로 인지하지 못하게 됩니다.</p>\n<p>그리고 저 또한 매우 피곤한 코드를 작성하게 됩니다.</p>\n<p>가령 에러객체안의 메시지가</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>response<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>errors<span class=\"token operator\">?.</span>nonFieldErrors\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* 'AttributeError: 카카오 사용자 정보를 가져올 수 없습니다.\n 액세스 토큰이 잘못되었거나 만료되었을 수 있습니다.' */</span></code></pre></div>\n<p>이렇게 되어있을 경우 유저에게 저 내용 전부가 필요하지는 않습니다. 하지만 가공을 위해서는 어떤 에러인지를 알아야 할 필요가 있죠.</p>\n<p>그러다보니 이런 경우도 생깁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>response<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>errors<span class=\"token operator\">?.</span>nonFieldErrors\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'duplicate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'중복된 사용자입니다.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>백엔드에서 보내주는 에러코드도 무분별하고, 이를 받는 프론트의 에러핸들링도 무분별하다보니 모든 API에 대해서 개별적으로 에러핸들링을 해줘야했습니다.</p>\n<br>\n<h2 id=\"백엔드와의-에러코드-표준화\" style=\"position:relative;\"><a href=\"#%EB%B0%B1%EC%97%94%EB%93%9C%EC%99%80%EC%9D%98-%EC%97%90%EB%9F%AC%EC%BD%94%EB%93%9C-%ED%91%9C%EC%A4%80%ED%99%94\" aria-label=\"백엔드와의 에러코드 표준화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백엔드와의 에러코드 표준화</h2>\n<p>이런 문제는 결국 제품과 유저의 소통을 힘들게하고, 개발자와 운영팀과의 소통이 힘들게 됩니다. 그리고 매번 새로운 에러메시지를 작성해야하는 저도 힘들죠.</p>\n<p>그래서 해당 문제에대해 스크럼을 가지게 되었고, 첫번째로 백엔드와 에러코드 표준화를 진행하게 됩니다. 에러객체는 반드시 통일화 하며 저희 회사만에 에러코드를 만들게 됩니다.</p>\n<p>넘버링을 100~900 까지로 나누며, 백단위로 관련된 에러를 묶기로 했습니다. 또한 에러메시지도 최대한 소통하기 편한쪽으로 작성했습니다. 시스템상 에러메시지 뒤에 백엔드단에서 해석하는 에러메시지를 더해 보내기로 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handlingErrorMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">errorCode<span class=\"token operator\">:</span> String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'502'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'[에러코드 : 502] 로그인을 다시 시도해주세요'</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'503'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'[에러코드 : 503] 중복된 유저입니다. 고객센터로 문의해주세요.'</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"더-나은-에러를-위해\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EB%82%98%EC%9D%80-%EC%97%90%EB%9F%AC%EB%A5%BC-%EC%9C%84%ED%95%B4\" aria-label=\"더 나은 에러를 위해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 나은 에러를 위해..</h2>\n<p>이후 넘버링한 에러들을 노션의 정리하였고, 이제 운영팀과 소통하며 유저에게 어떤식으로 보여줄지 정했습니다.</p>\n<p>이 과정에서 좀더 좋은 에러를 출력하기 위해 많은 생각을 했습니다. 앞서 말했듯이 현재는 에러에 대한 메시지만을 토스트로 출력하고 있습니다.</p>\n<p>하지만 유저는 그것을 좋은 에러라고 느끼지 못합니다. 해당에러가 어떤 에러였는지 알았다면 응당 그에 대한 해결책도 필요합니다.</p>\n<p>그렇기에 단순 토스트창보다는 어떠한 액션이 있는 에러가 좋다고 생각했습니다. 가령 중복된 사용자의 경우 고객센터로 문의를 해줘야하는데 이 경우 단순히 닫기 대신 고객센터로 전화하는 버튼을 만들어준다면 유저는 좀 더 쉽게 해당 문제를 해결할 수 있을것입니다.</p>\n<p>물론 이렇게 특정 액션을 해줄경우는 많지 않을거같지만, 적어도 단순 에러출력보다는 이 에러로 인해 유저가 어떤 행동을 해야하는지 유도해줘야겠다고 생각이 들었습니다.</p>\n<p>이것이 모두 정답일수는 없겠지만, 아주 작은 편의성이라도 유저를 위해 더 개선시켜야겠다고 생각했습니다.</p>","frontmatter":{"title":"에러코드 표준화","date":"November 16, 2022"}}},"pageContext":{"slug":"/UX/UI/에러코드 표준화 작업/","previous":{"fields":{"slug":"/Javascript/코어자바스크립트_1/"},"frontmatter":{"title":"코어 자바스크립트 (1)"}},"next":{"fields":{"slug":"/Javascript/코어자바스크립트_2/"},"frontmatter":{"title":"코어 자바스크립트 (2)"}}}}}