<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Jeong.io]]></title><description><![CDATA[한걸음씩 천천히]]></description><link>https://jeongyeon9254.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 12 Nov 2022 06:38:02 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><link>https://jeongyeon9254.github.io/CS/메모리 주소값/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/CS/메모리 주소값/</guid><content:encoded></content:encoded></item><item><title><![CDATA[자바스크립트 소수점 계산 오류]]></title><description><![CDATA[자바스크립트 소수점 계산 오류
가수 지수 부호에 대하여]]></description><link>https://jeongyeon9254.github.io/Math/소수점 계산 오류/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Math/소수점 계산 오류/</guid><pubDate>Thu, 10 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;자바스크립트 소수점 계산 오류
가수 지수 부호에 대하여&lt;/p&gt;</content:encoded></item><item><title><![CDATA[코어 자바스크립트 (1)]]></title><description><![CDATA[데이터 타입 자바스크립트 데이터에는 2가지 타입이 있습니다. 기본형 ( Number,String,Boolean,null,undefined,Symbol ) 참조형 ( Array,Function,Date,RegExp,Map,Set…]]></description><link>https://jeongyeon9254.github.io/Javascript/코어자바스크립트_1/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Javascript/코어자바스크립트_1/</guid><pubDate>Thu, 10 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;데이터-타입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85&quot; aria-label=&quot;데이터 타입 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 타입&lt;/h1&gt;
&lt;p&gt;자바스크립트 데이터에는 2가지 타입이 있습니다.&lt;/p&gt;
&lt;p&gt;기본형 ( Number,String,Boolean,null,undefined,Symbol )&lt;br&gt;
참조형 ( Array,Function,Date,RegExp,Map,Set )&lt;/p&gt;
&lt;p&gt;그리고 기본형은 할당 및 복제가 되며, 참조형은 참조가 된다고들 알고 있습니다. 저 역시 그렇게 알고 있었죠.&lt;/p&gt;
&lt;p&gt;기본형은 값의 주솟값을, 참조형은 값이 담긴 주솟값들에 묶음을 가리키는 주솟값을 복제한다고 말이죠.&lt;/p&gt;
&lt;p&gt;그런데 처음 배웠을 당시 기본형은 불변성을 가지고, 참조형은 가변성을 가진다는 말이 잘 이해가 되지 않았습니다.&lt;/p&gt;
&lt;p&gt;오히려 반대아니냐고 생각했었죠. 오늘은 그 개념을 정확하게 짚고, 더 나아가 각 데이터타입에 관한 배경지식을 정리해보려 합니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;데이터의-불변성과-가변성에-대해&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%B6%88%EB%B3%80%EC%84%B1%EA%B3%BC-%EA%B0%80%EB%B3%80%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%B4&quot; aria-label=&quot;데이터의 불변성과 가변성에 대해 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터의 불변성과 가변성에 대해&lt;/h2&gt;
&lt;p&gt;자 먼저 변수에 값을 할당해봅니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 변수를 선언한 순간 메모리에서는 이런식으로 읽는다고 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

num이라는 변수를 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번이라는 방에 저장됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;의 데이터는 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번이라는 방에 저장됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번 방문을 열면 바로 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번 방과 연결됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이때 num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 라고 변수에 새로운 값을 할당한다면

num이라는 변수는 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방 그대로입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;의 데이터는 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번이라는 방에 저장됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

그리고 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방은 이제 새로운 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방과 연결됬습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

즉 변수가 바라보고 있는 데이터의 입장에서는 새로운 데이터가 변수와 연결되려면 새로운 방을 연결해야합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 절대 자기자신이 변경될수는 없습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것을 보고 기본형 데이터는 불변성을 띈다고 합니다.&lt;/p&gt;
&lt;p&gt;이걸보면 결국 데이터를 새로 선언하면 새로운 방에 저장이 되며, 결국 다 불변성을 띄는거 아니냐고 생각할수 있습니다.
제가 그렇게 생각했으니까요.&lt;/p&gt;
&lt;p&gt;그럼 참조형의 경우를 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; object&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  num_1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  num_2&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;새로운 객체를 만들고 객체 안에 값을 넣었습니다. 이때 어떤식으로 처리가 될까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	num_1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	num_2&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

object 라는 객체를 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
num_1이라는 &lt;span class=&quot;token function&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;변수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;를 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
num_2이라는 &lt;span class=&quot;token function&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;변수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;를 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;의 데이터를 &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;의 데이터를 &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이제 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방에 문을 열면 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방의 문이 보이고&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
각 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방은 &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;번방과 연결되어있습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이때 object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num_1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; 이라고 값을 변경한다면

&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;의 데이터를 &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;번방에 저장하며&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번방은 &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;번방과 새로 연결된것이 됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

즉 객체가 바라보고 있는 &lt;span class=&quot;token function&quot;&gt;데이터&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;변수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;의 입장에서는 객체와 연결된채로 자기자신의 값을 바꾸는 것이 가능합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 그저 새로운 값의 방만 연결할 뿐입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것을 보고 참조형 데이터는 불변성을 띈다라고 합니다.&lt;br&gt;
아직도 많은것을 모르지만 이젠 적어도 자바스크립트에서 변수를 선언할때 최소한 어떤식으로 선언되는지는 알게됬습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;0과1-그리고-9223372036854775807&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#0%EA%B3%BC1-%EA%B7%B8%EB%A6%AC%EA%B3%A0-9223372036854775807&quot; aria-label=&quot;0과1 그리고 9223372036854775807 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0과1 그리고 9223372036854775807&lt;/h2&gt;
&lt;p&gt;컴퓨터는 0과1의 세계라고 합니다.&lt;br&gt;
그 0과1만을 표현할수 있는 하나의 메모리 조각을 비트라고 합니다.&lt;/p&gt;
&lt;p&gt;이런 비트를 8개 묶어 표현하는것을 1바이트라고 합니다. 1바이트는 총 256개(2^8)의 값을 표현할수 있습니다.&lt;/p&gt;
&lt;p&gt;옛날에는 하나의 데이터에 몇개의 바이트로 표현할것인가에 대해 개발자가 직접 할당을 했지만, 현대에서는 많은 메모리 제약이 사라졌고, 이 때문에 자바스크립트 내에서 숫자의 경우 정수형인지, 부동소수형인지 구분하지 않고 8바이트를 확보하고 있습니다.&lt;/p&gt;
&lt;p&gt;이게 무슨말이냐면 직접 변수에 큰 숫자를 넣어보면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; maxNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9223372036854775807&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

콘솔로그를 찍어보자&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 9223372036854776000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자 숫자가 정확하게 표현되지 않았습니다.&lt;br&gt;
그리고 친절하게 왜인지 알려주기까지 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;절대값이 2^53보다 크거나 같은 숫자 리터럴은 너무 커서 정수로 정확하게 표시할 수 없습니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 아까 자바스크립트는 기본적으로 8바이트를 확보하고 있다고 알게됬습니다.&lt;/p&gt;
&lt;p&gt;즉 2^64까지의 값만 변수에 넣을수 있는것이죠.&lt;br&gt;
그런데 에러를 보면 2^53과 같거나 큰 숫자라고 합니다.&lt;br&gt;
너무 억울하죠. 내가 쓰지도 않는 나머지는 어디로 갔을까요?&lt;/p&gt;
&lt;p&gt;이것을 알기 위해 조금 돌아가보면.. 우리세상에 숫자는 크게 2가지 타입이 있습니다. 실수와 정수입니다. 우리 세상에 모든숫자는 실수로 나타낼수 있으며, 정수는 실수의 부분집합입니다.&lt;/p&gt;
&lt;p&gt;그런데 사실 실생활에서는 정수를 더 많이 사용하기도 하고, 그토록 많은 (사실상 무한에 가까운) 실수를 모두 데이터안에 담기에는 한계가 있는것이 자명했습니다.&lt;/p&gt;
&lt;p&gt;그렇기에 정확도를 낮추는 대신 표현할수 있는 범위를 늘리기로 합니다. 그 결과 64비트를 쪼개어 가수, 지수, 부호로 나누었으며 우리가 정확하고 안전하게 표현할수 있는 숫자는 2^53까지라고 합니다.&lt;br&gt;
(정확하게는 2^53-1까지라고 하는데 이유는 다음번에 정리해봅시다.)&lt;/p&gt;
&lt;p&gt;자 그럼 왜 못넣는지도 알았으니 간단하게 어떻게 하면 넣을수 있는지도 짤막하게 알아봅시다.&lt;/p&gt;
&lt;p&gt;BigInt라는 것이 있습니다. 이것은 최대,최소범위를 초과한 정수를 안전하게 저장하고 비교하기 위해 만들어진 JS의 새로운 데이터 형입니다.&lt;/p&gt;
&lt;p&gt;2^53을 초과한 데이터 뒤에 n을 붙이거나 BigInt()를 호출하여 사용하면 된다고 합니다.&lt;/p&gt;
&lt;p&gt;이때 해당 타입은 Number가 아닌 BigInt이며, 일반 숫자와 혼합하여 사용할수 없습니다. 이때 일반 숫자형도 모두 BigInt로 바꿔줘야 합니다.&lt;/p&gt;
&lt;p&gt;또한 BigInt를 Number로 바꾸면 정확성을 잃을수 있다고 하니 조심하여 사용해야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bigNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100n&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; bigNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// BigInt&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bigNum &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bigNum &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// TypeError&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//Cannot mix BigInt and other types, use explicit conversions&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[JS 키워드 [BigInt]]]></title><description><![CDATA[빅인트에 대하여]]></description><link>https://jeongyeon9254.github.io/Javascript/Bigint/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Javascript/Bigint/</guid><pubDate>Thu, 10 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;빅인트에 대하여&lt;/p&gt;</content:encoded></item><item><title><![CDATA[aboussst]]></title><description><![CDATA[준비중입니다. 행복한 하루가 되시길 바랍니다.]]></description><link>https://jeongyeon9254.github.io/resume-en/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/resume-en/</guid><pubDate>Mon, 10 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;준비중입니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A4%80%EB%B9%84%EC%A4%91%EC%9E%85%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;준비중입니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;준비중입니다.&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;행복한 하루가 되시길 바랍니다.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>