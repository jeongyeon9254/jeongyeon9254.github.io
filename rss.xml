<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Jeong.io]]></title><description><![CDATA[한걸음씩 천천히]]></description><link>https://jeongyeon9254.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 11 Dec 2022 13:54:25 GMT</lastBuildDate><item><title><![CDATA[Docker! 왜 좋은걸까요?]]></title><description><![CDATA[…]]></description><link>https://jeongyeon9254.github.io/docker/2022.11.26도커 왜 좋은걸까요/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/docker/2022.11.26도커 왜 좋은걸까요/</guid><pubDate>Sat, 26 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;개발환경관리-어떻게-하고-있으신가요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B4%80%EB%A6%AC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EA%B3%A0-%EC%9E%88%EC%9C%BC%EC%8B%A0%EA%B0%80%EC%9A%94&quot; aria-label=&quot;개발환경관리 어떻게 하고 있으신가요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발환경관리 어떻게 하고 있으신가요?&lt;/h1&gt;
&lt;p&gt;회사에서 열심히 개발환경을 셋팅하고, 열심히 일하고, 열심히 퇴근했습니다. 그런데 마침 좋은 코드가 생각나서 집에서 코드를 수정해보려 합니다.&lt;/p&gt;
&lt;p&gt;그런데 생각해보니 집에서는 회사와 같이 개발환경을 셋팅하지 않았네요. 문득 여러가지 생각이 듭니다. 귀찮기도 하고, 내일할까 싶기도 하고.. 아니 애초에 좀 간단하게 개발환경 셋팅하면 안되나..&lt;/p&gt;
&lt;p&gt;이런 고민을 해결하기 위해 여러 방법을 찾던 중 도커에 대해 알게됩니다. 도커가 소프트웨어를 패키징해 쉽고 빠르게 배포를 도와준다고 합니다.&lt;/p&gt;
&lt;p&gt;무슨말인지 잘 모르겠으니 상세하게 찾아보겠습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;도커의-정의&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4%EC%9D%98-%EC%A0%95%EC%9D%98&quot; aria-label=&quot;도커의 정의 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커의 정의&lt;/h2&gt;
&lt;p&gt;자, 도커는 2013년 출시된 컨테이너 기반의 오픈소스 가상화 플랫폼입니다.&lt;/p&gt;
&lt;p&gt;이 도커를 사용하면 개발자는 쉽고 빠르게 여러 어플리케이션을 구축할수 있습니다. 그런데 컨테이너 기반이라고 한다면 컨테이너는 뭐고 가상화는 뭘까요?&lt;/p&gt;
&lt;h4 id=&quot;컨테이너&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88&quot; aria-label=&quot;컨테이너 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨테이너&lt;/h4&gt;
&lt;p&gt;컨테이너는 호스트OS (기본적으로 설치되어있는 운영체제) 상에 논리적인 구획(컨테이너)를 만들고, 어플리케이션을 작동시키기 위해 필요한 라이브러리나 여러 패키지들을 하나로 모아 마치 별도의 서버인것처럼 사용할수 있게 만든것입니다. 물론 도커를 사용하지 않고도 컨테이너를 사용할수 있긴 합니다.&lt;/p&gt;
&lt;h4 id=&quot;가상화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94&quot; aria-label=&quot;가상화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상화&lt;/h4&gt;
&lt;p&gt;가상화란 물리적인 하드웨어 장치를 논리적인 객체로 추상화하는 기술을 의미한다고 합니다. 일반적으로 우리는 하나의 OS위에서 어플리케이션이 실행됩니다. 하지만 가상화를 이용하면 기본 하드웨어의 자산인 CPU,MEMORY,Network등을 분산하거나 합쳐서 더 효율적으로 사용할수 있다고 합니다.&lt;/p&gt;
&lt;p&gt;사실 도커이전에도 이러한 고민은 많았었고, 해결책중 하나가 바로 가상화롤 통한 VM이었습니다.&lt;/p&gt;
&lt;h4 id=&quot;vm가상-머신&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vm%EA%B0%80%EC%83%81-%EB%A8%B8%EC%8B%A0&quot; aria-label=&quot;vm가상 머신 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VM(가상 머신)&lt;/h4&gt;
&lt;p&gt;가상머신은 우리 컴퓨터의 호스트OS위에 Hyperviso같은 가상머신을 관리하는 별도의 소프트웨어를 통해 가상의 하드웨어 위에 새로운 게스트OS를 설치하여 사용하는 기술입니다. 이런 가상머신은 윈도우에서 우분투를 돌리거나 할때 사용하기도 했습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;그래서-왜-도커를-쓰나요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%99%9C-%EB%8F%84%EC%BB%A4%EB%A5%BC-%EC%93%B0%EB%82%98%EC%9A%94&quot; aria-label=&quot;그래서 왜 도커를 쓰나요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그래서 왜 도커를 쓰나요?&lt;/h2&gt;
&lt;p&gt;잠깐 알아보았지만, 이전 문제를 해결하기 위한 방법으로 VM도 있었고, 그 이후에 컨테이너라는 기술도 생겼습니다. 그런데 왜 다들 도커에 열광하는걸까요?&lt;/p&gt;
&lt;p&gt;이전에 있었던 기술의 문제점은 무엇인지, 도커는 이를 어떻게 해결했는지 잠깐 알아보겠습니다.&lt;/p&gt;
&lt;h4 id=&quot;1-가상머신은-너무-무거워&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B0%80%EC%83%81%EB%A8%B8%EC%8B%A0%EC%9D%80-%EB%84%88%EB%AC%B4-%EB%AC%B4%EA%B1%B0%EC%9B%8C&quot; aria-label=&quot;1 가상머신은 너무 무거워 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 가상머신은 너무 무거워!&lt;/h4&gt;
&lt;p&gt;가상머신은 또하나의 OS를 설치하는 것입니다. 만약 100MB의 게스트OS를 10개 설치한다면? 그 메모리만 해도 벌써 많은 양을 차지하고 있습니다. 또한 가상화는 하드웨어 자원들을 쪼개거나 합친다고 했습니다. 그렇다면 CPU또한 나눠서 사용되어야 하고, 이로 인해 CPU자원을 확보하는것 또한 쉽지 않을것입니다.&lt;/p&gt;
&lt;h4 id=&quot;2-컨테이너-만들수는-있습니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%A7%8C%EB%93%A4%EC%88%98%EB%8A%94-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;2 컨테이너 만들수는 있습니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 컨테이너 만들’수’는 있습니다.&lt;/h4&gt;
&lt;p&gt;컨테이너를 직접 만들수 있습니다. 다만 해당 개념에대한 깊은 이해도가 필요하며, 이를 유지하고 관리하는것은 또 별개로 힘든 작업이 될것입니다. 애초에 도커는 LXC(리눅스 컨테이너)를 기반으로한 상위레벨의 컨테이너 기술입니다. 도커를 사용하는것은 어찌보면 더 쉽고 빠른 선택지인것이 당연합니다.&lt;/p&gt;
&lt;p&gt;우리는 ‘다양한 환경의 어플리케이션’을 개발하기 위한 방법으로 가상머신을 사용할 수 있었고, 그보다 더 빠르고 가벼운 컨테이너라는 기술을 알게 되었습니다.&lt;/p&gt;
&lt;p&gt;그리고 그 컨테이너를 기반으로 만들어진 도커는 이러한 컨테이너 기술을 개발자들이 더 쉽게 사용하고, 유지보수 할 수 있게 도와주는 소프트웨어 플랫폼입니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;도커-사용해보자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;도커 사용해보자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커 사용해보자!&lt;/h2&gt;
&lt;p&gt;자 정말 간단하게 도커에 대해 알아보았습니다. 물론 더 깊게 알기위해서는 컨테이너에 대한 깊은 이해도와 더불어 운영체제에 대한 이해도 필요할 것 입니다.&lt;/p&gt;
&lt;p&gt;하지만 그 부분은 추후에 채우도록하고, 이제 도커를 직접 사용해 봅시다.&lt;/p&gt;
&lt;p&gt;참고로 저는 WSL2를 이용하여 Ubuntu20.04.5 버전을 이용했습니다.&lt;/p&gt;
&lt;p&gt;여러가지 설치 방법중 스크립트를 이용한 설치를 진행해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ curl -fsSL https://get.docker.com/ | sudo sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;해당 명령어를 입력해주시고 좀 기다려 주시면 도커의 설치가 완료됩니다.&lt;/p&gt;
&lt;p&gt;도커의 버전을 확인하며 제대로 설치되었는지 체크해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ sudo docker version

...
Client: Docker Engine - Community
 Version:           20.10.21&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;error_1-루트계정이-아니랍니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#error_1-%EB%A3%A8%ED%8A%B8%EA%B3%84%EC%A0%95%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9E%8D%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;error_1 루트계정이 아니랍니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Error_1 루트계정이 아니랍니다.&lt;/h4&gt;
&lt;p&gt;자 그런데 sudo없이 명령어를 치니&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Got permission denied while trying to connect to the Docker daemon socket...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 에러가 출력됩니다. 읽어보니 권한이 없어 거부되었고, 도커데몬에 연결해보라는 해결책을 줍니다.&lt;/p&gt;
&lt;p&gt;그렇습니다. 루트계정이 아니기때문에 도커서비스 접속에 권한이 없는것입니다. 해당문제는 루트계정으로 접속하거나 해당계정을 도커그룹에 추가해주시는 것으로 해결이 가능합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ sudo usermod -aG docker ${USER}
// $USER은 유저 이름이 들어있는 변수입니다.
// 해당 변수와 계정의 이름이 맞는지 확인해줍시다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이후 추가된것을 확인하고 도커를 새로 시작해주면 sudo없이도 도커서비스에 접근이 가능한것을 확인해볼수 있습니다.&lt;/p&gt;
&lt;p&gt;그럼 이제 이미지도 확인해줍시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ docker image


REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

// 현재 설치된 이미지가 없습니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;여기서-이미지란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%AC%EA%B8%B0%EC%84%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%9E%80&quot; aria-label=&quot;여기서 이미지란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;여기서 이미지란..&lt;/h4&gt;
&lt;p&gt;도커에는 중요한 개념 이미지와 컨테이너가 있습니다. 컨테이너는 위와 같은 개념이며, 이미지는 어플리케이션 실행에 필요한 다양한 파일들을 모아 도커파일을 통해 이미지를 빌드합니다. 그리고 해당 이미지를 실행하여 도커 컨테이너를 사용할 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;자 그럼 이제 새로운 이미지를 받아봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ docker pull centos

...이후 다시 이미지를 확인하면
REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
centos       latest    5d0da3dc9764   14 months ago   231MB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;centOS의 이미지가 받아졌습니다. 즉 해당 이미지를 실행하면 centOS의 환경을 실행할수 있는 것입니다.&lt;/p&gt;
&lt;p&gt;자 이렇게 간단히 도커란 무엇인지와 도커를 설치해보고 이미지를 받아보는것까지 했습니다. 사실 이제 이미지를 실행시켜 컨테이너를 띄우면 아주아주 기본적인 도커실행은 끝이긴 합니다.&lt;/p&gt;
&lt;p&gt;다만 개요에도 나왔듯, 제 목적은 개발환경의 통합입니다. 그렇다면 우선 해야할 것은 나의 개발환경을 도커파일을 통해 이미지로 빌드하는 것 입니다.&lt;/p&gt;
&lt;p&gt;그렇기에 다음에 직접 이미지를 빌드시켜보고, 해당 이미지를 다른 컴퓨터에서 빌드해서 잘 작동되는지 확인해보겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[코어 자바스크립트 (2)]]></title><description><![CDATA[실행 컨텍스트 실행 컨텍스트란 Execution Context)는 scope, hoisting, this, function, closure…]]></description><link>https://jeongyeon9254.github.io/Javascript/2022.11.19코어자바스크립트_2/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Javascript/2022.11.19코어자바스크립트_2/</guid><pubDate>Sat, 19 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;실행-컨텍스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;실행 컨텍스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행 컨텍스트&lt;/h1&gt;
&lt;p&gt;실행 컨텍스트란 Execution Context)는 scope, hoisting, this, function, closure 등의 동작원리를 담고 있는 자바스크립트의 핵심원리를 담고있는 내용이라고 합니다.&lt;/p&gt;
&lt;p&gt;즉 이것은 자바스크립트의 동적언어로서의 성격을 잘 파악할수 있는 개념이라고 할수있으며, 실행 컨텍스트를 이해하지 못한다고 하면 사실상 자바스크립트에 대한 이해도가 낮다고 할수 있습니다.&lt;/p&gt;
&lt;p&gt;그래서 이 기회에 공부를 해보며, 완벽하진 않아도 ‘아 자바스크립트는 이렇게 실행되는구나!’ 라고 생각으 들정도로는 정리를 해보려 합니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;들어가기-앞서-스택-과-큐&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C-%EC%8A%A4%ED%83%9D-%EA%B3%BC-%ED%81%90&quot; aria-label=&quot;들어가기 앞서 스택 과 큐 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;들어가기 앞서 스택 과 큐&lt;/h2&gt;
&lt;p&gt;스택과 큐는 알고리즘 공부할때 자료구조로서 짧게 공부했습니다. 이는 자바스크립트의 개념이라기보다는 프로그래밍 개념이라고 할수 있겠습니다.&lt;/p&gt;
&lt;p&gt;스택은 바닥이 막힌 원통형입니다. 해당 원통형에 물건을 차곡차곡 넣으면 꺼낼때는 위에 있는것부터 꺼내질것입니다. 이렇게 데이터의 입출력을 후입선출 방식입니다.&lt;/p&gt;
&lt;p&gt;아마 가장 흔하게 만나볼수 있는 스택구조는 winodw.history와 같은 네비게이션 객체이지 않나 싶습니다. 페이지를 이동할때 스택구조에 페이지를 저장할 경우 뒤로가기를 클릭하면 그저 가장 최상단에 있는 페이지로 이동시키기만 하면 되기 때문입니다.&lt;/p&gt;
&lt;p&gt;참고로 이런 스택은 제한이 있기 때문에 해당 스택을 넘어가는 횟수의 함수호출을 할 경우 에러를 발생시키게 됩니다.&lt;/p&gt;
&lt;p&gt;큐는 양쪽이 뚫려있는 원통형과 같습니다. 먼저 들어온것이 먼저 나가는 선입선출의 구조로 되어있습니다. 이러한 큐는 입력된 순서대로 데이터를 처리하기 때문에 순서가 정해진 작업을 할 경우 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;스택과 큐에 대해 알아보았으니 이번엔 자바스크립트와 자바스크립트를 실행하는 환경에 대해 잠시 알아봅시다.&lt;/p&gt;
&lt;p&gt;자바스크립트는 제목에서처럼 알수 있듯이 스크립트 언어입니다. 그런데 공부하다보면 항상 마주치는것이 하나있습니다. 바로 ECMAscript, 그러다보니 마치 ES가 자바스크립트 자체라고 오해할수도 있는데, 사실은 ES는 모든 스크립트 언어가 호환될수 있도록 만든 협약같은 것이며, 최근에 자바스크립트는 이런 ES를 기반으로 만들어졌다고 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이런 자바스크립트를 웹에서 실행시키기 위해 만들어진것이 자바스크립트 엔진입니다. 각 브라우저마다 엔진의 종류는 다르지만 기본적인 구조는 같습니다.&lt;/p&gt;
&lt;p&gt;자바스크립트 엔진은 메모리힙과 콜스택구조를 가지고 있으며, 자바스크립트가 실행되면 실행컨텍스트가 콜스택이라는 엔진내에 스택구조에 쌓이게 되고, 역시 한번에 한가지 일을 수행하게 됩니다.&lt;/p&gt;
&lt;p&gt;여담으로 콜스택구조에는 원시타입 데이터가, 메모리 힙에는 참조타입 데이터가 저장된다고 합니다.&lt;/p&gt;
&lt;p&gt;하지만 우리는 코딩을하며 비동기적으로 무언가를 실행시켜본 경험이 있을것입니다. 만약 자바스크립트가 한번에 한개의 일밖에 못한다면 어떻게 비동기적으로 일을 처리할수가 있었을까요?&lt;/p&gt;
&lt;p&gt;그 이유는 브라우저에는 자바스크립트 엔진 외에도 WebAPI, 콜백 큐, 이벤트 루프라는것이 있기 때문입니다.&lt;/p&gt;
&lt;p&gt;첫번째로 WebApi는 우리가 사용하는 여러가지 기능들입니다. setinterval이나 domevent같은 이벤트들이 webAPi라고 할수 있으며 자세한 정리는 다음번에 하기로 하고 다음으로 넘어갑니다.&lt;/p&gt;
&lt;p&gt;두번째인 콜백 큐는 비동기 처리를 하는 함수를 관리하는 친구입니다. 이런 콜백 큐는 ECMA2015에 joq queue라는 개념이 추가되었는데, 이는 웹 API가 아니라 다른 비동기 처리인 프로미스등이 우선권을 가지는 개념입니다.&lt;/p&gt;
&lt;p&gt;세번째인 이벤트 루프는 콜스택이 비어있을때 콜백큐에 있는 함수들을 콜스택으로 보내는 일을 합니다.&lt;/p&gt;
&lt;p&gt;이런식으로 자바스크립트는 싱글스레드이지만 비동기적 처리를 할수 있게 되었습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;자-돌아와서-실행-컨텍스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90-%EB%8F%8C%EC%95%84%EC%99%80%EC%84%9C-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;자 돌아와서 실행 컨텍스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자 돌아와서.. 실행 컨텍스트!&lt;/h2&gt;
&lt;p&gt;자 그럼 자바스크립트가 실행되면 어떤방식으로 동작하는지 알아보았으니, 이제 동작할 실행컨텍스트에 대해 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;실행 컨텍스트는 3가지 정보를 가지고 있습니다.&lt;/p&gt;
&lt;p&gt;VariableEnvrionment, LexicalEnvrinment, ThisBinding 이렇게 3가지 정보를 가지고 있습니다.&lt;/p&gt;
&lt;p&gt;첫번째인 VE는 LE전에 정보를 먼저 담고 그 이후 그대로 복사를 해서 LE를 만듭니다.&lt;/p&gt;
&lt;p&gt;두번째인 LE는 VE의 초기값을 복사해 만든것입니다. LE는 Environment Record와 outer라는 포인터로 구성이 됩니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[에러코드 표준화 (1)]]></title><description><![CDATA[너무 난잡한 에러코드 현재 프로젝트에서 프론트단에 API호출이 굉장히 많습니다. 물론 다른 프로젝트고 똑같겠죠. 그리고 비단 API뿐만이 아니라 모든 함수실행에 있어 try&catch…]]></description><link>https://jeongyeon9254.github.io/UX/UI/2022.11.16에러코드 표준화/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/UX/UI/2022.11.16에러코드 표준화/</guid><pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;너무-난잡한-에러코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%84%88%EB%AC%B4-%EB%82%9C%EC%9E%A1%ED%95%9C-%EC%97%90%EB%9F%AC%EC%BD%94%EB%93%9C&quot; aria-label=&quot;너무 난잡한 에러코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;너무 난잡한 에러코드&lt;/h1&gt;
&lt;p&gt;현재 프로젝트에서 프론트단에 API호출이 굉장히 많습니다. 물론 다른 프로젝트고 똑같겠죠. 그리고 비단 API뿐만이 아니라 모든 함수실행에 있어 try&amp;#x26;catch문으로 예외처리를 하고있습니다.&lt;/p&gt;
&lt;p&gt;에러가 났을경우 유저에게 당연히 에러사실을 인지시켜야 합니다. 그렇지 않으면 유저는 자신이 보고있는 화면이 제대로 전달된 화면인이 모를테니까요.&lt;/p&gt;
&lt;p&gt;4개월 쯤 되었을때 이런생각을 하게됩니다.&lt;br&gt;
이거 너무 불편하지 않나?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 현재 에러 핸들링\&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;response&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;502&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;현재 업데이트중입니다. 잠시후 다시 시도해주세요&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재의 에러 핸들링입니다.&lt;/p&gt;
&lt;p&gt;에러발생시 객체에 리스폰스값을 참고하여 적당한 에러미시지를 추출하고, error()함수를 통해 에러 토스트를 출력하고 있습니다.&lt;/p&gt;
&lt;p&gt;그런데 반드시 status코드로만 분간하는것이 아닙니다. 어떤것은 객체의 에러메시지를 넣어주는 경우가 있고, 어떤것은 백엔드와 프론트간의 통신을 위해서만 에러메시지를 넣은 경우가 있습니다.&lt;/p&gt;
&lt;p&gt;당연히 이를 고대로 유저에게 노출시킬경우 유저는 어떠한 에러인지 제대로 인지하지 못하게 됩니다.&lt;/p&gt;
&lt;p&gt;그리고 저 또한 매우 피곤한 코드를 작성하게 됩니다.&lt;/p&gt;
&lt;p&gt;가령 에러객체안의 메시지가&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;errors&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;nonFieldErrors

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/* &apos;AttributeError: 카카오 사용자 정보를 가져올 수 없습니다.
 액세스 토큰이 잘못되었거나 만료되었을 수 있습니다.&apos; */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 되어있을 경우 유저에게 저 내용 전부가 필요하지는 않습니다. 하지만 가공을 위해서는 어떤 에러인지를 알아야 할 필요가 있죠.&lt;/p&gt;
&lt;p&gt;그러다보니 이런 경우도 생깁니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;response&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;errors&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;nonFieldErrors

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;duplicate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;중복된 사용자입니다.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;백엔드에서 보내주는 에러코드도 무분별하고, 이를 받는 프론트의 에러핸들링도 무분별하다보니 모든 API에 대해서 개별적으로 에러핸들링을 해줘야했습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;백엔드와의-에러코드-표준화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%94%EB%93%9C%EC%99%80%EC%9D%98-%EC%97%90%EB%9F%AC%EC%BD%94%EB%93%9C-%ED%91%9C%EC%A4%80%ED%99%94&quot; aria-label=&quot;백엔드와의 에러코드 표준화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백엔드와의 에러코드 표준화&lt;/h2&gt;
&lt;p&gt;이런 문제는 결국 제품과 유저의 소통을 힘들게하고, 개발자와 운영팀과의 소통이 힘들게 됩니다. 그리고 매번 새로운 에러메시지를 작성해야하는 저도 힘들죠.&lt;/p&gt;
&lt;p&gt;그래서 해당 문제에대한 해결책을 몇가지 생각해보려합니다.첫번째로 백엔드와 에러코드 표준화를 진행합니다. 에러객체는 반드시 통일화 하며 저희 회사만에 에러코드를 만들게 됩니다.&lt;/p&gt;
&lt;p&gt;넘버링을 100~900 까지로 나누며, 백단위로 관련된 에러를 묶고 에러메시지도 최대한 소통하기 편한쪽으로 작성할 예정입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handlingErrorMessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;502&apos;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[에러코드 : 502] 로그인을 다시 시도해주세요&apos;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;503&apos;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[에러코드 : 503] 중복된 유저입니다. 고객센터로 문의해주세요.&apos;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;더-나은-에러를-위해&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%94-%EB%82%98%EC%9D%80-%EC%97%90%EB%9F%AC%EB%A5%BC-%EC%9C%84%ED%95%B4&quot; aria-label=&quot;더 나은 에러를 위해 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;더 나은 에러를 위해..&lt;/h2&gt;
&lt;p&gt;이 과정에서 좀더 좋은 에러를 출력하기 위해 많은 생각을 했습니다. 앞서 말했듯이 현재는 에러에 대한 메시지만을 토스트로 출력하고 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 유저는 그것을 좋은 에러라고 느끼지 못합니다. 해당에러가 어떤 에러였는지 알았다면 응당 그에 대한 해결책도 필요합니다.&lt;/p&gt;
&lt;p&gt;그렇기에 단순 토스트창보다는 어떠한 액션이 있는 에러가 좋다고 생각했습니다. 가령 중복된 사용자의 경우 고객센터로 문의를 해줘야하는데 이 경우 단순히 닫기 대신 고객센터로 전화하는 버튼을 만들어준다면 유저는 좀 더 쉽게 해당 문제를 해결할 수 있을것입니다.&lt;/p&gt;
&lt;p&gt;물론 이렇게 특정 액션을 해줄경우는 많지 않을거같지만, 적어도 단순 에러출력보다는 이 에러로 인해 유저가 어떤 행동을 해야하는지 유도해줘야겠다고 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;이것이 모두 정답일수는 없겠지만, 아주 작은 편의성이라도 유저를 위해 더 개선시켜야겠다고 생각했습니다.&lt;/p&gt;
&lt;p&gt;다음번에는 해당 코드표준화 작업 이후의 느낀점을 정리해보면 좋을거같습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[코어 자바스크립트 (1)]]></title><description><![CDATA[데이터 타입 자바스크립트 데이터에는 2가지 타입이 있습니다. 기본형 ( Number,String,Boolean,null,undefined,Symbol ) 참조형 ( Array,Function,Date,RegExp,Map,Set…]]></description><link>https://jeongyeon9254.github.io/Javascript/2022.11.10코어자바스크립트_1/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/Javascript/2022.11.10코어자바스크립트_1/</guid><pubDate>Thu, 10 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;데이터-타입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85&quot; aria-label=&quot;데이터 타입 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 타입&lt;/h1&gt;
&lt;p&gt;자바스크립트 데이터에는 2가지 타입이 있습니다.&lt;/p&gt;
&lt;p&gt;기본형 ( Number,String,Boolean,null,undefined,Symbol )&lt;br&gt;
참조형 ( Array,Function,Date,RegExp,Map,Set )&lt;/p&gt;
&lt;p&gt;우리는 기본형은 값의 주솟값을, 참조형은 값이 담긴 주솟값들에 묶음을 가리키는 주솟값을 복제한다고 알고있습니다.&lt;/p&gt;
&lt;p&gt;그런데 처음 배웠을 당시 기본형은 불변성을 가지고, 참조형은 가변성을 가진다는 말이 잘 이해가 되지 않았습니다.&lt;/p&gt;
&lt;p&gt;오히려 반대아니냐고 생각했었죠. 오늘은 그 개념을 정확하게 짚고, 더 나아가 숫자형 데이터타입에 관한 배경지식을 정리해보려 합니다.&lt;/p&gt;
&lt;h2 id=&quot;데이터의-불변성과-가변성에-대해&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%B6%88%EB%B3%80%EC%84%B1%EA%B3%BC-%EA%B0%80%EB%B3%80%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%B4&quot; aria-label=&quot;데이터의 불변성과 가변성에 대해 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터의 불변성과 가변성에 대해&lt;/h2&gt;
&lt;p&gt;자 먼저 변수에 값을 할당해봅니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 변수를 선언한 순간 메모리에서는 이런식으로 읽는다고 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

num이라는 변수를 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번이라는 방에 저장됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;의 데이터는 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번이라는 방에 저장됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번 방문을 열면 바로 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번 방과 연결됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이때 num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 라고 변수에 새로운 값을 할당한다면

num이라는 변수는 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방 그대로입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;의 데이터는 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번이라는 방에 저장됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

그리고 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방은 이제 새로운 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방과 연결됬습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

즉 변수가 바라보고 있는 데이터의 입장에서는
새로운 데이터가 변수와 연결되려면
새로운 방을 연결해야합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
절대 자기자신이 변경될수는 없습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것을 보고 기본형 데이터는 불변성을 띈다고 합니다.&lt;/p&gt;
&lt;p&gt;이걸보면 결국 데이터를 새로 선언하면 새로운 방에 저장이 되며, 결국 다 불변성을 띄는거 아니냐고 생각할수 있습니다.
제가 그렇게 생각했으니까요.&lt;/p&gt;
&lt;p&gt;그럼 참조형의 경우를 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;num_1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;num_2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;새로운 객체를 만들고 객체 안에 값을 넣었습니다. 이때 어떤식으로 처리가 될까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token literal-property property&quot;&gt;num_1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token literal-property property&quot;&gt;num_2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

object 라는 객체를 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
num_1이라는 &lt;span class=&quot;token function&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;변수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;를 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
num_2이라는 &lt;span class=&quot;token function&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;변수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;를 &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;의 데이터를 &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;의 데이터를 &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;번방에 저장합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이제 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;번방에 문을 열면 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방의 문이 보이고&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
각 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번방은 &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;번방과 연결되어있습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

이때 object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num_1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; 이라고 값을 변경한다면

&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;의 데이터를 &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;번방에 저장하며&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;번방은 &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;번방과 새로 연결된것이 됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

즉 객체가 바라보고 있는 &lt;span class=&quot;token function&quot;&gt;데이터&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;변수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;의 입장에서는
객체와 연결된채로 자기자신의 값을 바꾸는 것이
가능합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 그저 새로운 값의 방만 연결할 뿐입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이것을 보고 참조형 데이터는 불변성을 띈다라고 합니다.&lt;br&gt;
아직도 많은것을 모르지만 이젠 적어도 자바스크립트에서 변수를 선언할때 최소한 어떤식으로 선언되는지는 알게됬습니다.&lt;/p&gt;
&lt;h2 id=&quot;0과1-그리고-9223372036854775807&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#0%EA%B3%BC1-%EA%B7%B8%EB%A6%AC%EA%B3%A0-9223372036854775807&quot; aria-label=&quot;0과1 그리고 9223372036854775807 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0과1 그리고 9223372036854775807&lt;/h2&gt;
&lt;p&gt;컴퓨터는 0과1의 세계라고 합니다.&lt;br&gt;
그 0과1만을 표현할수 있는 하나의 메모리 조각을 비트라고 합니다.&lt;/p&gt;
&lt;p&gt;이런 비트를 8개 묶어 표현하는것을 1바이트라고 합니다. 1바이트는 총 256개(2^8)의 값을 표현할수 있습니다.&lt;/p&gt;
&lt;p&gt;옛날에는 하나의 데이터에 몇개의 바이트로 표현할것인가에 대해 개발자가 직접 할당을 했지만, 현대에서는 많은 메모리 제약이 사라졌고, 이 덕분에 자바스크립트 내에서 숫자의 경우 정수형인지, 부동소수형인지 구분하지 않고 8바이트를 확보할 수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;그런데 8바이트를 확보하고 있다는 말은 결국 저장할수 있는 숫자의 범위가 한정적이라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;이게 무슨말이냐면 직접 변수에 큰 숫자를 넣어보면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; maxNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9223372036854775807&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

콘솔로그를 찍어보자&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 9223372036854776000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자 숫자가 정확하게 표현되지 않았습니다.&lt;br&gt;
그리고 친절하게 왜 안되는지 알려주기까지 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;절대값이 2^53보다 크거나 같은 숫자 리터럴은
너무 커서 정수로 정확하게 표시할 수 없습니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 아까 자바스크립트는 숫자에 대해서는 기본적으로 8바이트를 확보하고 있다고 알게됬습니다.&lt;/p&gt;
&lt;p&gt;즉 2^64까지의 값만 변수에 넣을수 있는것이죠. 그런데 에러를 보면 2^53과 같거나 큰 숫자라고 합니다. 너무 억울하죠. 내가 쓰지도 않는 나머지는 어디로 갔을까요?&lt;/p&gt;
&lt;h2 id=&quot;숫자는-무한하지-그래서-bigint&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%88%AB%EC%9E%90%EB%8A%94-%EB%AC%B4%ED%95%9C%ED%95%98%EC%A7%80-%EA%B7%B8%EB%9E%98%EC%84%9C-bigint&quot; aria-label=&quot;숫자는 무한하지 그래서 bigint permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;숫자는 무한하지 그래서 BigInt&lt;/h2&gt;
&lt;p&gt;이것을 알기 위해 조금 돌아가보면.. 우리세상에 숫자는 크게 2가지 타입이 있습니다. 실수와 정수입니다. 우리 세상에 모든숫자는 실수로 나타낼수 있으며, 정수는 실수의 부분집합입니다.&lt;/p&gt;
&lt;p&gt;그런데 사실 실생활에서는 정수를 더 많이 사용하기도 하고, 그토록 많은 (사실상 무한에 가까운) 실수를 모두 데이터안에 담기에는 한계가 있는것이 자명했습니다.&lt;/p&gt;
&lt;p&gt;그렇기에 정확도를 낮추는 대신 표현할수 있는 범위를 늘리기로 합니다. 그 결과 64비트를 쪼개어 가수, 지수, 부호로 나누었으며 우리가 정확하고 안전하게 표현할수 있는 숫자는 2^53까지라고 합니다.&lt;br&gt;
(정확하게는 2^53-1까지라고 하는데 이유는 다음번에 정리해봅시다.)&lt;/p&gt;
&lt;p&gt;자 그럼 왜 못넣는지도 알았으니 간단하게 어떻게 하면 넣을수 있는지도 짤막하게 알아봅시다.&lt;/p&gt;
&lt;p&gt;BigInt라는 것이 있습니다. 이것은 최대,최소범위를 초과한 정수를 안전하게 저장하고 비교하기 위해 만들어진 JS의 새로운 데이터 형입니다.&lt;/p&gt;
&lt;p&gt;2^53을 초과한 데이터 뒤에 n을 붙이거나 BigInt()를 호출하여 사용하면 된다고 합니다.&lt;/p&gt;
&lt;p&gt;이때 해당 타입은 Number가 아닌 BigInt이며, 일반 숫자와 혼합하여 사용할수 없습니다. 이때 일반 숫자형도 모두 BigInt로 바꿔줘야 합니다.&lt;/p&gt;
&lt;p&gt;또한 BigInt를 Number로 바꾸면 정확성을 잃을수 있다고 하니 조심하여 사용해야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bigNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100n&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; bigNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// BigInt&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bigNum &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bigNum &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// TypeError&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//Cannot mix BigInt and other types, use explicit conversions&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[aboussst]]></title><description><![CDATA[준비중입니다. 행복한 하루가 되시길 바랍니다.]]></description><link>https://jeongyeon9254.github.io/resume-en/</link><guid isPermaLink="false">https://jeongyeon9254.github.io/resume-en/</guid><pubDate>Mon, 10 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;준비중입니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A4%80%EB%B9%84%EC%A4%91%EC%9E%85%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;준비중입니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;준비중입니다.&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;행복한 하루가 되시길 바랍니다.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>