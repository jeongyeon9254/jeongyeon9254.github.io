{"componentChunkName":"component---src-templates-blog-post-js","path":"/Javascript/2023.08.15html파싱/","result":{"data":{"site":{"siteMetadata":{"title":"Jeong.io","author":"JeongYeonJae","siteUrl":"https://jeongyeon9254.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a4aaf9fd-b18b-5f3d-8f47-b81fea354aa6","excerpt":"드디어 개발을 끝냈다. 만약 제가 정말 단순한 웹페이지를 개발했다고 가정해보겠습니다. 정말 간단하게 버튼을 누르면 숫자가 증가하고, 감소하는 카운트 페이지 입니다. html과 css 그리고 조금의 자바스크립트 코드로 이루어진 아주 단촐한 페이지입니다. 그렇다면 이 페이지를 열었을때 일어나는 일에 대하여 모두 알고계신가요? 이 html…","html":"<h2 id=\"드디어-개발을-끝냈다\" style=\"position:relative;\"><a href=\"#%EB%93%9C%EB%94%94%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9D%84-%EB%81%9D%EB%83%88%EB%8B%A4\" aria-label=\"드디어 개발을 끝냈다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>드디어 개발을 끝냈다.</h2>\n<p>만약 제가 정말 단순한 웹페이지를 개발했다고 가정해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ko<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>버튼 페이지<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n      <span class=\"token selector\">#number</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">size</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token selector\">#button-box</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> lightblue<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>증가<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sub<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>감소<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> addButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> subButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sub'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> numberDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculateNumber</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> numberDiv<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>numberDiv<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'sub'</span><span class=\"token punctuation\">)</span> numberDiv<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>numberDiv<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n    addButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">calculateNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> numberDiv<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    subButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">calculateNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sub'</span><span class=\"token punctuation\">,</span> numberDiv<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>정말 간단하게 버튼을 누르면 숫자가 증가하고, 감소하는 카운트 페이지 입니다. html과 css 그리고 조금의 자바스크립트 코드로 이루어진 아주 단촐한 페이지입니다.</p>\n<p>그렇다면 이 페이지를 열었을때 일어나는 일에 대하여 모두 알고계신가요?</p>\n<p>이 html파일을 열었을때 일어나는 일에 대하여 간단하게 정리해보겠습니다.</p>\n<h2 id=\"내가만든-페이지에-접속하기\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EA%B0%80%EB%A7%8C%EB%93%A0-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0\" aria-label=\"내가만든 페이지에 접속하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내가만든 페이지에 접속하기</h2>\n<p>우선, 제가 해당 페이지를 개발후 내 웹사이트에 등록을 했다고 가정합니다. 그렇다면 당연히 먼저 사이트에 접속을 해야할 것입니다.</p>\n<h3 id=\"dns서버에서-내-웹사이트-ip-가져오기\" style=\"position:relative;\"><a href=\"#dns%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-%EB%82%B4-%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8-ip-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"dns서버에서 내 웹사이트 ip 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS서버에서 내 웹사이트 IP 가져오기</h3>\n<p>저희가 사용하는 브라우저를 켠 후 주소창에 제 웹사이트 주소를 입력합니다. jeongyeon.com이라는 웹사이트로 접속하겠습니다.</p>\n<p>그러면 브라우저는 jeongyeon.com라는 도메인과 대응되는 IP주소를 DNS서버에서 찾습니다.</p>\n<ul>\n<li>\n<p><b>DNS 서버란?</b></p>\n<p>DNS Server는 IP 주소와 Domain 이름을 기억하는 기능과 Client가 Domain 이름을 물어보면 IP를 알려주는 기능을 갖고 있습니다.</p>\n</li>\n</ul>\n<p>일반적으로 브라우저는 똑똑하기 때문에 이러한 요청이 있었다면, 캐싱된 주소를 가지고 있습니다. 이를 DNS캐시라고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 로컬 DNS 캐시를 확인하는 방법</span>\n<span class=\"token function\">sudo</span> dscacheutil <span class=\"token parameter variable\">-q</span> <span class=\"token function\">host</span> <span class=\"token parameter variable\">-a</span> name naver.com\nname: naver.com\nip_address: <span class=\"token number\">223.130</span>.195.200\nip_address: <span class=\"token number\">223.130</span>.200.104\nip_address: <span class=\"token number\">223.130</span>.200.107\nip_address: <span class=\"token number\">223.130</span>.195.95</code></pre></div>\n<p>브라우저는 다음과 같은 4단계의 DNS캐시를 확인합니다.</p>\n<ul>\n<li>브라우저 캐시 : 사용자가 방문했던 DNS기록을 보관합니다.</li>\n<li>OS 캐시 : OS가 DNS기록을 보관합니다.</li>\n<li>라우터 캐시 : 자체 DNS기록을 유지관리하는 라우터캐시입니다.</li>\n<li>ISP 캐시 : DNS서버를 가지고 있기에, 해당 서버의 DNS기록을 조회할수 있습니다.</li>\n</ul>\n<p>다만 이러한 DNS캐시들도 오래된것들은 이전정보를 가지고 있을수 있으므로 지속적으로 업데이트 해줍니다.</p>\n<p>만일 로컬 DNS 서버에 해당 주소를 찾지 못할경우 <b>루트 DNS 서버</b>에 문의합니다.</p>\n<p>루트 DNS 서버는 최상위 도메인이 .com 인것을 확인 후 “.com”이 등록된 네임 서버의 ip 주소를 전달해줍니다.</p>\n<p>이제 다시 로컬 DNS 서버는 .com DNS 서버에 주소를 물어보면, .com DNS 서버는 해당주소를 모르므로 jeongyeon.com도메인을 관리하는 DNS서버의 ip 주소를 알려줍니다.</p>\n<p>마지막으로 해당 DNS 서버에서 jeongyeon.com의 주소를 알려줌으로 우리는 jeongyeon.com의 ip 주소를 얻게되는것입니다.</p>\n<p><img src=\"/content/js/dns.png\" alt=\"ex_screenshot\"></p>\n<p>그림과 함께 정리를 해보면 다음과 같은 순서로 ip 주소를 받아올수 있습니다.</p>\n<p><b>캐싱된 로컬 DNS 서버 -> 루트 DNS 서버 -> 최상위 DNS 서버 -> 세컨드 레벨 DNS 서버</b></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 간단한 dns 계층구조\nblog.jeongyeon.com.\nsub / second / top / root</code></pre></div>\n<p>이러한 DNS 서버를 이동하며 ip주소를 찾는 과정을 <b>Recursive serch</b> 라고합니다.</p>\n<p>참고로 도메인 이름구조에서 최상위의 위치한곳은 ICANN이라는 비영리 단체입니다. 이 단체는 전세계에 있는 IP 주소를 관리함과 동시에 Root Name Server의 관리자 역할을 하고 있습니다.</p>\n<p>Root Name Server 밑에는 Registry라는 등록소가 존재하는데, 얘네는 Top-level domain(.com)을 관리합니다. 그 다음으로는 Registrar라고 하는 등록 대행자가 있는데, 등록 대행자는 등록자가 등록소에 등록하는 것을 등록해주는 대행역할을 해줍니다.</p>\n<h3 id=\"찾은-ip-주소와-연결\" style=\"position:relative;\"><a href=\"#%EC%B0%BE%EC%9D%80-ip-%EC%A3%BC%EC%86%8C%EC%99%80-%EC%97%B0%EA%B2%B0\" aria-label=\"찾은 ip 주소와 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>찾은 ip 주소와 연결</h3>\n<p>이제 찾은 주소와 브라어주는 TCP 연결을 합니다.</p>\n<p>TCP는 3-way-handshake 과정을 통해서 연결 및 데이터를 수신받습니다.</p>\n<p><img src=\"/content/js/3way.png\" alt=\"ex_screenshot\"></p>\n<ol>\n<li>클라이언트에서 서버에 접속요청을 하는 SYN 패킷을 전송합니다.</li>\n<li>서버는 접속요청을 받고 SYN_ACK flag 패킷을 전송합니다.</li>\n<li>클라이언트는 ACK 패킷을 전송하고 연결이 성립됩니다.</li>\n</ol>\n<p>다음은 연결 종료를 위한 4-way-handshake 과정입니다.</p>\n<p><img src=\"/content/js/4way.png\" alt=\"ex_screenshot\"></p>\n<ol>\n<li>클라이언트가 연결을 종료하겠다는 FIN 패킷을 전송합니다.</li>\n<li>서버는 ACK 패킷을 전송하고 자신의 통신이 끝날때까지 대기합니다.</li>\n<li>서버의 통신이 종료되면 클라이언트에게 FIN 패킷을 전송합니다.</li>\n<li>서버는 마지막으로 확인의 ACK 패킷을 전송합니다.</li>\n<li>클라이언트는 FIN을 수신하더라도 잉여 패킷이 올수있어 TIME_WAIT과정을 마지막으로 거치게 됩니다.</li>\n</ol>\n<p>3-way-handshake 통해 ip주소와 연결된 브라우저는 웹 서버에 http 요청을 진행합니다.</p>\n<h3 id=\"html-파일을-받아보자\" style=\"position:relative;\"><a href=\"#html-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EB%B0%9B%EC%95%84%EB%B3%B4%EC%9E%90\" aria-label=\"html 파일을 받아보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>html 파일을 받아보자</h3>\n<p>이렇게 TCP 연결 이후 http 통신을 통해 웹서버에 html 파일을 요청합니다. 물론 html 이나 css같은 스태틱한 파일은 웹 서버에서 줄수있지만, 나머지 동적인 처리를 위해 웹 어플리케이션 서버도 이용합니다.</p>\n<p>만약 처리될 데이터가 있다면 엡 어플리케이션 서버에서 데이터를 웹서버로 전송하고, 웹 서버는 브라우저에게 html 파일을 전달합니다.</p>\n<p>이런 과정을 통해 우리는 jeongyeon.com에 접속해 html 파일을 받아올수 있습니다.</p>\n<h2 id=\"html을-이제-어떻게할까요\" style=\"position:relative;\"><a href=\"#html%EC%9D%84-%EC%9D%B4%EC%A0%9C-%EC%96%B4%EB%96%BB%EA%B2%8C%ED%95%A0%EA%B9%8C%EC%9A%94\" aria-label=\"html을 이제 어떻게할까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>html을 이제 어떻게할까요?</h2>\n<p>이제 html 파일을 받았으니 우리는 그안에 html태그로 버튼을 만들고 css로 스타일을 입힌뒤에 js로 동작을 추가해줄것입니다. 그리고 브라우저에 사용자가 볼수있도록 화면에 보여줄것입니다.</p>\n<p>우리는 이러한 일련의 과정을 <b>렌더링</b>이라고 합니다.</p>\n<p>이러한 렌더링과정을 위해 브라우저 내에는 렌더링 엔진을 내장하고 있으며, 크롬의 경우 blink 라는 내장 렌더링 엔진을 가지고 있습니다.</p>\n<p>렌더링 엔진은 통신으로부터 요청한 문서의 내용을 얻는 것으로 시작하는데 문서의 내용은 보통 8KB 단위로 전송됩니다.</p>\n<p>우선적으로 html dom 트리를 생성합니다.</p>\n<p>해당 트리를 만들기 위해서는 다음과 같은 과정을 진행합니다.</p>\n<p><img src=\"/content/js/html.png\" alt=\"ex_screenshot\"></p>\n<ol>\n<li>\n<p>변환</p>\n<ul>\n<li>브라우저가 HTML의 원시 바이트를 읽어와서, HTML에 정의된 인코딩(예: UTF-8)에 따라 개별 문자로 변환합니다.</li>\n</ul>\n</li>\n<li>\n<p>토큰화</p>\n<ul>\n<li>브라우저가 문자열을 W3C 표준에 지정된 고유 토큰으로 변환합니다.</li>\n<li>토큰화 과정은 ”&#x3C;“을 만나면 태그열림으로 인식하고, ”>“을 만날때까지 나머지느 알파벳은 태그이름으로 인식합니다. (&#x3C;는 3C / >는 3E)</li>\n<li>이 과정을 모든 html을 읽을때까지 반복합니다.</li>\n</ul>\n</li>\n<li>\n<p>렉싱</p>\n<ul>\n<li>방출된 토큰은 해당 속성 및 규칙을 정의하는 “객체”로 변환됩니다.</li>\n</ul>\n</li>\n<li>\n<p>DOM 생성</p>\n<ul>\n<li>HTML 마크업에 정의된 여러 태그 간의 관계를 해석해서 트리 구조로 연결이 됩니다.</li>\n<li>해당 트리 데이터 구조는 원래 마크업에서 정의된 상위-하위 관계도 포함이 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>should_process_preloading<span class=\"token punctuation\">)</span>\n   <span class=\"token function\">FlushPendingPreloads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> next_token_status <span class=\"token operator\">=</span> <span class=\"token function\">CanTakeNextToken</span><span class=\"token punctuation\">(</span>time_executing_script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next_token_status <span class=\"token operator\">==</span> kNoTokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// No tokens left to process in this pump, so break</span>\n   <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next_token_status <span class=\"token operator\">==</span> kHaveTokensAfterScript <span class=\"token operator\">&amp;&amp;</span>\n     task_runner_state_<span class=\"token operator\">-></span><span class=\"token function\">HaveExitedHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// Just executed a parser-blocking script in the body. We'd probably like</span>\n   <span class=\"token comment\">// to yield at some point soon, especially if we're in \"extended budget\"</span>\n   <span class=\"token comment\">// mode. So reduce the budget back to at most the default.</span>\n   budget <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>budget<span class=\"token punctuation\">,</span> task_runner_state_<span class=\"token operator\">-></span><span class=\"token function\">GetDefaultBudget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">TimedParserBudgetEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     timed_budget <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>timed_budget<span class=\"token punctuation\">,</span> chunk_parsing_timer<span class=\"token punctuation\">.</span><span class=\"token function\">Elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                                               <span class=\"token function\">GetDefaultTimedBudget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n HTMLToken<span class=\"token operator\">*</span> token<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">RUNTIME_CALL_TIMER_SCOPE</span><span class=\"token punctuation\">(</span>\n       V8PerIsolateData<span class=\"token operator\">::</span><span class=\"token function\">MainThreadIsolate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       RuntimeCallStats<span class=\"token operator\">::</span>CounterId<span class=\"token operator\">::</span>kHTMLTokenizerNextToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   token <span class=\"token operator\">=</span> tokenizer_<span class=\"token punctuation\">.</span><span class=\"token function\">NextToken</span><span class=\"token punctuation\">(</span>input_<span class=\"token punctuation\">.</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// input이 입력데이터 객체입니다.</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n   budget<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n   tokens_parsed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n AtomicHTMLToken <span class=\"token function\">atomic_html_token</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// Clear the HTMLToken in case ConstructTree() synchronously re-enters the</span>\n <span class=\"token comment\">// parser. This has to happen after creating AtomicHTMLToken as it needs</span>\n <span class=\"token comment\">// state in the HTMLToken.</span>\n tokenizer_<span class=\"token punctuation\">.</span><span class=\"token function\">ClearToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">ConstructTreeFromToken</span><span class=\"token punctuation\">(</span>atomic_html_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 만든 토큰으로 트리를 구성합니다.</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>should_run_until_completion <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">IsPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>이렇게 만들어진 DOM은 트리형태를 가지고 있어 DOM 트리라고도 불립니다.</p>\n<h2 id=\"css로-style-그리기\" style=\"position:relative;\"><a href=\"#css%EB%A1%9C-style-%EA%B7%B8%EB%A6%AC%EA%B8%B0\" aria-label=\"css로 style 그리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css로 style 그리기</h2>\n<p>이제 css로 스타일을 그려줘야 합니다.</p>\n<p>예전에는 html내에 간단한 css 파싱 엔진이 존재했다고하지만, css의 역할이 늘어감에 따라 css 파싱 엔진을 각 브라우저에서 내장하게 되었습니다.</p>\n<p>css 역시 html과 마찬가지로 CSSOM(CSS Object Model) 트리를 생성하게 됩니다.</p>\n<p><img src=\"/content/js/css.png\" alt=\"ex_screenshot\"></p>\n<p>css 파서는 앞서 말씀드렸듯이 블링크 이전에 웹킷의 css 파서 엔진을 크롬에서도 사용하고 있었습니다. 다만 blink를 개발할때 웹킷의 코어한 부분을 가져다 개발하였기 때문에 대부분에 내용은 같습니다.</p>\n<p><img src=\"/content/js/css2.png\" alt=\"ex_screenshot\"></p>\n<p>다만 특이하게 css는 html 과 다르게 룰셋이 존재합니다. css 는 선택자와 선언블록으로 나뉘어 각각의 역할을 합니다.</p>\n<p>이러한 특징답게 각각 구문마다 토큰화를 하여, 마지막에 cssom 트리를 생성합니다.</p>\n<ul>\n<li>\n<p>문자열 css 값을 토큰화</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">CSSTokenizer <span class=\"token function\">tokenizer</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> tokens <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">TokenizeToEOF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 이후 선택자, 색상, 값등을 파싱합니다.</span></code></pre></div>\n</li>\n<li>\n<p>cssom 트리 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 전체 스타일 시트를 읽어 cssom 트리를 생성합니다.</span>\nParseSheetResult CSSParser<span class=\"token operator\">::</span><span class=\"token function\">ParseSheet</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">const</span> CSSParserContext<span class=\"token operator\">*</span> context<span class=\"token punctuation\">,</span>\n  StyleSheetContents<span class=\"token operator\">*</span> style_sheet<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">const</span> String<span class=\"token operator\">&amp;</span> text<span class=\"token punctuation\">,</span>\n  CSSDeferPropertyParsing defer_property_parsing<span class=\"token punctuation\">,</span>\n  bool allow_import_rules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> CSSParserImpl<span class=\"token operator\">::</span><span class=\"token function\">ParseStyleSheet</span><span class=\"token punctuation\">(</span>\n    text<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> style_sheet<span class=\"token punctuation\">,</span> defer_property_parsing<span class=\"token punctuation\">,</span> allow_import_rules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"완성된-완벽한-페이지\" style=\"position:relative;\"><a href=\"#%EC%99%84%EC%84%B1%EB%90%9C-%EC%99%84%EB%B2%BD%ED%95%9C-%ED%8E%98%EC%9D%B4%EC%A7%80\" aria-label=\"완성된 완벽한 페이지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완성된 완벽한 페이지</h2>\n<p>이제 우리는 html과 css를 통해 뼈대를 갖추고, 스타일을 꾸미게 되었습니다.</p>\n<p>나머지는 이것을 화면에 보여주기만 하면 끝입니다.</p>\n<p>dom 트리와 cssom 트리를 합쳐 우리는 <b>렌더 트리</b>를 만들수 있게 되었습니다.</p>\n<p><img src=\"/content/js/render.png\" alt=\"ex_screenshot\"></p>\n<p>렌더트리는 렌더링에 필요한 노드만 선택하여 페이지를 렌더링하는데 사용합니다.</p>\n<p>이후 레이아웃 단계에서는 뷰포트 내에서 각 요소의 정확한 위치와 크기를 정확하게 캡처하는 Box 모델이 출력됩니다</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> Document<span class=\"token operator\">::</span><span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 모든 레이아웃의 기준이 되는 Document 의 레이아웃을 초기화합니다.</span>\n  layout_view_ <span class=\"token operator\">=</span> new <span class=\"token function\">LayoutView</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">SetLayoutObject</span><span class=\"token punctuation\">(</span>layout_view_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// StyleResolver 로 전체 레이아웃의 기준이 될 ViewPort 크기를 계산합니다.</span>\n  layout_view_<span class=\"token operator\">-></span><span class=\"token function\">SetStyle</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetStyleResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">StyleForViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 이제 Document 에 포함되는 모든 Element 의 레이아웃을 관리할 레이아웃 트리를 구성을 시작합니다.</span>\n  AttachContext context<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">AttachLayoutTree</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Element 타입 별로 AttachLayoutTree 함수를 override 해서 Element 특성에 맞게 레이아웃 트리에 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// HTML 의 가장 기본이 되는 HTMLHtmlElement 의 AttachLayoutTree 함수입니다.</span>\n<span class=\"token keyword\">void</span> HTMLHtmlElement<span class=\"token operator\">::</span><span class=\"token function\">AttachLayoutTree</span><span class=\"token punctuation\">(</span>AttachContext<span class=\"token operator\">&amp;</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  scoped_refptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ComputedStyle<span class=\"token operator\">></span> original_style <span class=\"token operator\">=</span> <span class=\"token function\">GetComputedStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>original_style<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 레이아웃과 관련한 스타일을 재계산합니다.</span>\n    <span class=\"token function\">SetComputedStyle</span><span class=\"token punctuation\">(</span><span class=\"token function\">LayoutStyleForElement</span><span class=\"token punctuation\">(</span>original_style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Element<span class=\"token operator\">::</span><span class=\"token function\">AttachLayoutTree</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래 함수를 보면 스위치문에서 다양한 레이아웃기능이 있다는것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">LayoutObject<span class=\"token operator\">*</span> LayoutObject<span class=\"token operator\">::</span><span class=\"token function\">CreateObject</span><span class=\"token punctuation\">(</span>Element<span class=\"token operator\">*</span> element<span class=\"token punctuation\">,</span>\n                                         <span class=\"token keyword\">const</span> ComputedStyle<span class=\"token operator\">&amp;</span> style<span class=\"token punctuation\">,</span>\n                                         LegacyLayout legacy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 스타일 Display 속성에 맞는 LayoutObject 를 만들어서 반환합니다.</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kNone<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kContents<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> nullptr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kInline<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> new <span class=\"token function\">LayoutInline</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kBlock<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kFlowRoot<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kInlineBlock<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kListItem<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> LayoutObjectFactory<span class=\"token operator\">::</span><span class=\"token function\">CreateBlockFlow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>element<span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">,</span> legacy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kFlex<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kInlineFlex<span class=\"token operator\">:</span>\n      UseCounter<span class=\"token operator\">::</span><span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">-></span><span class=\"token function\">GetDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> WebFeature<span class=\"token operator\">::</span>kCSSFlexibleBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> LayoutObjectFactory<span class=\"token operator\">::</span><span class=\"token function\">CreateFlexibleBox</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>element<span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">,</span> legacy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kGrid<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> EDisplay<span class=\"token operator\">::</span>kInlineGrid<span class=\"token operator\">:</span>\n      UseCounter<span class=\"token operator\">::</span><span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">-></span><span class=\"token function\">GetDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> WebFeature<span class=\"token operator\">::</span>kCSSGridLayout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> LayoutObjectFactory<span class=\"token operator\">::</span><span class=\"token function\">CreateGrid</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>element<span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">,</span> legacy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>요약하자면 Document 를 초기화할 때 DOM 트리를 순회하며 레이아웃 관련 스타일 속성을 얻은 뒤, 스타일의 ‘Display’ 속성에 따라 일치하는 LayoutObject 을 생성하여 레이아웃 트리에 추가하는 과정을 반복해서 전체 레이아웃 트리를 완성합니다.</p>\n<p>이렇게 완성된 레이아웃 트리는 화면 위에 Element 을 어떻게 배치할지를 결정하는 작업에 활용됩니다.</p>\n<p><img src=\"/content/js/view.png\" alt=\"ex_screenshot\"></p>\n<p>마지막으로 렌더링 트리의 각 노드를 화면의 실제 픽셀로 변환하게 됩니다. 레이아웃 단계에서 모든 계산이 완료가 되면, 화면에 요소들을 그리게 됩니다. 이 단계를 “페인팅” 또는 “래스터화”라고 합니다.</p>\n<p>이미 레이아웃 단계에서 각 노드들이 위치, 크기, 색상 등 스타일이 모두 계산이 되었기 때문에 화면에 실제 픽셀로 변환하게 됩니다.</p>\n<h2 id=\"js코드는-어디서-실행할까\" style=\"position:relative;\"><a href=\"#js%EC%BD%94%EB%93%9C%EB%8A%94-%EC%96%B4%EB%94%94%EC%84%9C-%EC%8B%A4%ED%96%89%ED%95%A0%EA%B9%8C\" aria-label=\"js코드는 어디서 실행할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>js코드는 어디서 실행할까?</h2>\n<p>사실 html과 css말고 js까지 로드되야 완벽한 웹 페이지라고 할수있습니다. 다만 js가 언제 html에 적용되고 그 코드가 브라우저에서 실행되는것은 또 다른 큰 숙제라 다음에 다시 정리해보도록 하겠습니다.</p>\n<Br>\n<Br>\n<Br>\n<h4 id=\"레퍼런스\" style=\"position:relative;\"><a href=\"#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-label=\"레퍼런스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레퍼런스</h4>\n<ul>\n<li><a href=\"https://ibocon.tistory.com/\">https://ibocon.tistory.com/</a></li>\n</ul>","frontmatter":{"title":"내 웹페이지가 로딩될때 일어나는 일 (1)","date":"August 15, 2023"}}},"pageContext":{"slug":"/Javascript/2023.08.15html파싱/","previous":{"fields":{"slug":"/Javascript/웹팩!/"},"frontmatter":{"title":"WEBPACK"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}