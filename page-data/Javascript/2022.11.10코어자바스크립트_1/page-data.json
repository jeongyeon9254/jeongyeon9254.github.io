{"componentChunkName":"component---src-templates-blog-post-js","path":"/Javascript/2022.11.10코어자바스크립트_1/","result":{"data":{"site":{"siteMetadata":{"title":"Jeong.io","author":"JeongYeonJae","siteUrl":"https://jeongyeon9254.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"b0bd161d-174f-5be2-9a35-91f2b8e8149a","excerpt":"데이터 타입 자바스크립트 데이터에는 2가지 타입이 있습니다. 기본형 ( Number,String,Boolean,null,undefined,Symbol ) 참조형 ( Array,Function,Date,RegExp,Map,Set…","html":"<h1 id=\"데이터-타입\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85\" aria-label=\"데이터 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 타입</h1>\n<p>자바스크립트 데이터에는 2가지 타입이 있습니다.</p>\n<p>기본형 ( Number,String,Boolean,null,undefined,Symbol )<br>\n참조형 ( Array,Function,Date,RegExp,Map,Set )</p>\n<p>우리는 기본형은 값의 주솟값을, 참조형은 값이 담긴 주솟값들에 묶음을 가리키는 주솟값을 복제한다고 알고있습니다.</p>\n<p>그런데 처음 배웠을 당시 기본형은 불변성을 가지고, 참조형은 가변성을 가진다는 말이 잘 이해가 되지 않았습니다.</p>\n<p>오히려 반대아니냐고 생각했었죠. 오늘은 그 개념을 정확하게 짚고, 더 나아가 숫자형 데이터타입에 관한 배경지식을 정리해보려 합니다.</p>\n<h2 id=\"데이터의-불변성과-가변성에-대해\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%B6%88%EB%B3%80%EC%84%B1%EA%B3%BC-%EA%B0%80%EB%B3%80%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%B4\" aria-label=\"데이터의 불변성과 가변성에 대해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터의 불변성과 가변성에 대해</h2>\n<p>자 먼저 변수에 값을 할당해봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>이렇게 변수를 선언한 순간 메모리에서는 이런식으로 읽는다고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\nnum이라는 변수를 <span class=\"token number\">10</span>번이라는 방에 저장됩니다<span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span>의 데이터는 <span class=\"token number\">20</span>번이라는 방에 저장됩니다<span class=\"token punctuation\">.</span>\n\n<span class=\"token number\">10</span>번 방문을 열면 바로 <span class=\"token number\">20</span>번 방과 연결됩니다<span class=\"token punctuation\">.</span>\n\n이때 num <span class=\"token operator\">=</span> <span class=\"token number\">2</span> 라고 변수에 새로운 값을 할당한다면\n\nnum이라는 변수는 <span class=\"token number\">10</span>번방 그대로입니다<span class=\"token punctuation\">.</span>\n<span class=\"token number\">2</span>의 데이터는 <span class=\"token number\">21</span>번이라는 방에 저장됩니다<span class=\"token punctuation\">.</span>\n\n그리고 <span class=\"token number\">10</span>번방은 이제 새로운 <span class=\"token number\">21</span>번방과 연결됬습니다<span class=\"token punctuation\">.</span>\n\n즉 변수가 바라보고 있는 데이터의 입장에서는\n새로운 데이터가 변수와 연결되려면\n새로운 방을 연결해야합니다<span class=\"token punctuation\">.</span>\n절대 자기자신이 변경될수는 없습니다<span class=\"token punctuation\">.</span></code></pre></div>\n<p>이것을 보고 기본형 데이터는 불변성을 띈다고 합니다.</p>\n<p>이걸보면 결국 데이터를 새로 선언하면 새로운 방에 저장이 되며, 결국 다 불변성을 띄는거 아니냐고 생각할수 있습니다.\n제가 그렇게 생각했으니까요.</p>\n<p>그럼 참조형의 경우를 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token literal-property property\">object</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">num_1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">num_2</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>새로운 객체를 만들고 객체 안에 값을 넣었습니다. 이때 어떤식으로 처리가 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token literal-property property\">object</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">num_1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">num_2</span><span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\nobject 라는 객체를 <span class=\"token number\">10</span>번방에 저장합니다<span class=\"token punctuation\">.</span>\nnum_1이라는 <span class=\"token function\">key</span><span class=\"token punctuation\">(</span>변수<span class=\"token punctuation\">)</span>를 <span class=\"token number\">20</span>번방에 저장합니다<span class=\"token punctuation\">.</span>\nnum_2이라는 <span class=\"token function\">key</span><span class=\"token punctuation\">(</span>변수<span class=\"token punctuation\">)</span>를 <span class=\"token number\">21</span>번방에 저장합니다<span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span>의 데이터를 <span class=\"token number\">30</span>번방에 저장합니다<span class=\"token punctuation\">.</span>\n<span class=\"token number\">2</span>의 데이터를 <span class=\"token number\">31</span>번방에 저장합니다<span class=\"token punctuation\">.</span>\n\n이제 <span class=\"token number\">10</span>번방에 문을 열면 <span class=\"token number\">20</span>번<span class=\"token punctuation\">,</span><span class=\"token number\">21</span>번방의 문이 보이고<span class=\"token punctuation\">,</span>\n각 <span class=\"token number\">20</span>번<span class=\"token punctuation\">,</span><span class=\"token number\">21</span>번방은 <span class=\"token number\">30</span>번<span class=\"token punctuation\">,</span><span class=\"token number\">31</span>번방과 연결되어있습니다<span class=\"token punctuation\">.</span>\n\n이때 object<span class=\"token punctuation\">.</span>num_1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span> 이라고 값을 변경한다면\n\n<span class=\"token number\">3</span>의 데이터를 <span class=\"token number\">32</span>번방에 저장하며<span class=\"token punctuation\">,</span>\n<span class=\"token number\">20</span>번방은 <span class=\"token number\">32</span>번방과 새로 연결된것이 됩니다<span class=\"token punctuation\">.</span>\n\n즉 객체가 바라보고 있는 <span class=\"token function\">데이터</span><span class=\"token punctuation\">(</span>변수<span class=\"token punctuation\">)</span>의 입장에서는\n객체와 연결된채로 자기자신의 값을 바꾸는 것이\n가능합니다<span class=\"token punctuation\">.</span> 그저 새로운 값의 방만 연결할 뿐입니다<span class=\"token punctuation\">.</span></code></pre></div>\n<p>이것을 보고 참조형 데이터는 불변성을 띈다라고 합니다.<br>\n아직도 많은것을 모르지만 이젠 적어도 자바스크립트에서 변수를 선언할때 최소한 어떤식으로 선언되는지는 알게됬습니다.</p>\n<h2 id=\"0과1-그리고-9223372036854775807\" style=\"position:relative;\"><a href=\"#0%EA%B3%BC1-%EA%B7%B8%EB%A6%AC%EA%B3%A0-9223372036854775807\" aria-label=\"0과1 그리고 9223372036854775807 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0과1 그리고 9223372036854775807</h2>\n<p>컴퓨터는 0과1의 세계라고 합니다.<br>\n그 0과1만을 표현할수 있는 하나의 메모리 조각을 비트라고 합니다.</p>\n<p>이런 비트를 8개 묶어 표현하는것을 1바이트라고 합니다. 1바이트는 총 256개(2^8)의 값을 표현할수 있습니다.</p>\n<p>옛날에는 하나의 데이터에 몇개의 바이트로 표현할것인가에 대해 개발자가 직접 할당을 했지만, 현대에서는 많은 메모리 제약이 사라졌고, 이 덕분에 자바스크립트 내에서 숫자의 경우 정수형인지, 부동소수형인지 구분하지 않고 8바이트를 확보할 수 있게 되었습니다.</p>\n<p>그런데 8바이트를 확보하고 있다는 말은 결국 저장할수 있는 숫자의 범위가 한정적이라는 뜻입니다.</p>\n<p>이게 무슨말이냐면 직접 변수에 큰 숫자를 넣어보면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> maxNum <span class=\"token operator\">=</span> <span class=\"token number\">9223372036854775807</span><span class=\"token punctuation\">;</span>\n\n콘솔로그를 찍어보자<span class=\"token operator\">!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>maxNum<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 9223372036854776000</span></code></pre></div>\n<p>자 숫자가 정확하게 표현되지 않았습니다.<br>\n그리고 친절하게 왜 안되는지 알려주기까지 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">절대값이 2^53보다 크거나 같은 숫자 리터럴은\n너무 커서 정수로 정확하게 표시할 수 없습니다.</code></pre></div>\n<p>우리는 아까 자바스크립트는 숫자에 대해서는 기본적으로 8바이트를 확보하고 있다고 알게됬습니다.</p>\n<p>즉 2^64까지의 값만 변수에 넣을수 있는것이죠. 그런데 에러를 보면 2^53과 같거나 큰 숫자라고 합니다. 너무 억울하죠. 내가 쓰지도 않는 나머지는 어디로 갔을까요?</p>\n<h2 id=\"숫자는-무한하지-그래서-bigint\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90%EB%8A%94-%EB%AC%B4%ED%95%9C%ED%95%98%EC%A7%80-%EA%B7%B8%EB%9E%98%EC%84%9C-bigint\" aria-label=\"숫자는 무한하지 그래서 bigint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자는 무한하지 그래서 BigInt</h2>\n<p>이것을 알기 위해 조금 돌아가보면.. 우리세상에 숫자는 크게 2가지 타입이 있습니다. 실수와 정수입니다. 우리 세상에 모든숫자는 실수로 나타낼수 있으며, 정수는 실수의 부분집합입니다.</p>\n<p>그런데 사실 실생활에서는 정수를 더 많이 사용하기도 하고, 그토록 많은 (사실상 무한에 가까운) 실수를 모두 데이터안에 담기에는 한계가 있는것이 자명했습니다.</p>\n<p>그렇기에 정확도를 낮추는 대신 표현할수 있는 범위를 늘리기로 합니다. 그 결과 64비트를 쪼개어 가수, 지수, 부호로 나누었으며 우리가 정확하고 안전하게 표현할수 있는 숫자는 2^53까지라고 합니다.<br>\n(정확하게는 2^53-1까지라고 하는데 이유는 다음번에 정리해봅시다.)</p>\n<p>자 그럼 왜 못넣는지도 알았으니 간단하게 어떻게 하면 넣을수 있는지도 짤막하게 알아봅시다.</p>\n<p>BigInt라는 것이 있습니다. 이것은 최대,최소범위를 초과한 정수를 안전하게 저장하고 비교하기 위해 만들어진 JS의 새로운 데이터 형입니다.</p>\n<p>2^53을 초과한 데이터 뒤에 n을 붙이거나 BigInt()를 호출하여 사용하면 된다고 합니다.</p>\n<p>이때 해당 타입은 Number가 아닌 BigInt이며, 일반 숫자와 혼합하여 사용할수 없습니다. 이때 일반 숫자형도 모두 BigInt로 바꿔줘야 합니다.</p>\n<p>또한 BigInt를 Number로 바꾸면 정확성을 잃을수 있다고 하니 조심하여 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> bigNum <span class=\"token operator\">=</span> <span class=\"token number\">100n</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> bigNum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// BigInt</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigNum <span class=\"token operator\">===</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bigNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError</span>\n<span class=\"token comment\">//Cannot mix BigInt and other types, use explicit conversions</span></code></pre></div>","frontmatter":{"title":"코어 자바스크립트 (1)","date":"November 10, 2022"}}},"pageContext":{"slug":"/Javascript/2022.11.10코어자바스크립트_1/","previous":null,"next":{"fields":{"slug":"/UX/UI/2022.11.16에러코드 표준화/"},"frontmatter":{"title":"에러코드 표준화 (1)"}}}},"staticQueryHashes":["2486386679","3128451518"]}