---
title: '하이드레이트란?'
date: 2023-07-20
category: 'Javascript'
draft: false
---

# 하이드레이트이란?

우선 하이드레이트에 대해 알아보려면 짤막하게 CSR과 SSR에 대해 알아야합니다.

## CSR (클라이언트 사이드 렌더링)

![ex_screenshot](/content/js/csr.png)

CSR은 렌더링이 클라이언트에서 발생하는것을 말하며 순서는 다음과 같습니다.

- 유저가 웹사이트로 요청을 보냄
- CDN이 HTML 파일과 JS로 접근할 수 있는 링크를 클라이언트로 보냄
- 클라이언트는 HTML과 JS를 다운로드 받음 (로딩되기전까지는 볼수없음)
- dom이 그려지고 다운이 완료된 JS가 실행됨
- api가 있다면 요청후 상호작용이 가능함

<br>

서버는 요청을 받으면 빈 HTML과 JS를 클라이언트에 넘겨주고, 클라이언트는 이를 바탕으로 렌더링을 합니다.

처음에 빈 HTML파일을 받기 때문에 SEO에 적합하지 않고, HTML CSS 스크립트를 한 번에 불러와 첫 로딩 속도가 느려 유저는 빈 화면을 긴 시간동안 봐야하는 단점이 있지만, 첫 로딩 이후에 발생하는 페이지 이동에 대해서는 로딩이 짧고, 서버에는 부하가 없다는 장점이 있습니다.

## SSR (서버 사이드 렌더링)

![ex_screenshot](/content/js/ssr.png)

이와는 반대로 SSR은 렌더링이 서버에서 발생하하는것을 말하며 순서는 다음과 같습니다.

- 유저가 웹사이트로 요청을 보냄
- Server는 'Ready to Render'. 즉, 즉시 렌더링 가능한 HTML파일을 만듬
- 클라이언트에 전달되는 순간, 이미 렌더링 준비가 되어있기 때문에 HTML은 즉시 렌더링
- 클라이언트가 자바스크립트를 다운
- 브라우저가 js 프레임워크 또는 js 코드를 실행함
- 브라우저가 Javascript 프레임워크를 실행함

<br>

서버는 완성된 HTML을 클라이언트에게 전송하고, 유저는 빈 화면이 아닌 UI컨텐츠를 볼 수 있습니다. 하지만 사용자 조작은 할 수 없는 상태인데, 버튼 클릭 등의 조작했다면 동작을 기억해두었다가 JS까지 컴파일 되면 기억하고 있던 사용자 조작이 실행된다고 합니다.

## 그래서 하이드레이트란?

하이드레이트는 SSR에서 사용되는 개념(모두가 그런지는 모르겠지만)입니다. SSR의 경우 pre-rendering를 통해 완성된 HTML을 클라이언트에게 전달합니다.

이렇게 서버에서 렌더링된 정적 페이지를 클라이언트에게 보내고, react는 번들링된 js 코드를 클라이언트에게 보냅니다.

클라이언트는 전달받은 HTML과 js코드를 매칭하는 하이드레이트를 수행합니다. 하이드레이트란 전송받은 js 이전에 보내진 HTML DOM 요소 위에서 한번 더 렌더링 하게 되면서 각각 자기 자리를 찾아가며 매칭되는 것입니다. 하이드레이트 후에는 클릭과 같은 이벤트나 모듈들이 적용되어 사용자 조작이 가능해집니다.

즉, 하이드레이트는 클라이언트 측 js 정적 호스팅 또는 서버 측 렌더링을 통해 전달되는 정적 HTML 요소에 이벤트 핸들러를 첨부하여 동적 웹 페이지로 변환하는 기술입니다.

SSR 덕분에 사용자는 UI를 먼저 볼 수 있고, 하이드레이트 덕분에 JS코드가 매칭되어 추후에 사용자 조작이 가능한 것입니다.

## 여기서 잠깐! TTV와 TTI란?

![ex_screenshot](/content/js/tti.png)

TTV(Time To View)란 사용자가 브라우저의 내용을 볼 수 있는 시점이며 TTI(Time To Interact)는 사용자가 브라우저를 인터랙션 할 수 있는 시점입니다.

예를 들어 Next.js는 SSR이므로 pre-render가 되면 TTV가 가능해지고, 하이드레이트 끝나면 TTI가 가능합니다. 하지만 React(CSR)의 경우 HTML로딩과 JS로딩이 끝나야 UI가 나타나므로 TTV, TTI는 모두 완료되어야 가능한 것입니다.

## SSR과 Hydrate 문제점

짧게 위에서 본 바로는 SSR은 SEO에 좋고 유저에게 처음에 빈 화면을 보여주며 사용자 경험을 좋게 만들 수 있습니다. 그리고 하이드레이트를 이용하여 빈 화면에 JavaScript로 이벤트 헨들러를 붙여 동적으로 동작할 수 있게해줍니다.

2번 렌더링 하는것이 비효율적으로 보일 수 있지만 JavaScript가 빠진 UI를 유저에게 빠르게 로딩시켜주는 장점이 있고, 2번째 렌더에서는 Hydrate만 수행하고 UI Paint는 하지 않기 때문에 SSR이 매우 좋아보입니다.

하지만 이런 SSR과 Hydrate에도 문제점이 있습니다.
