{"componentChunkName":"component---src-templates-blog-post-js","path":"/Python/23.03.30 fastAPI3/","result":{"data":{"site":{"siteMetadata":{"title":"Jeong.io","author":"JeongYeonJae","siteUrl":"https://jeongyeon9254.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d7611e80-a9cc-5adc-96d4-48fb45ea99de","excerpt":"fastAPI doc 자습 fastAPI 에 대해 간단하게 알아보았으며, 공식문서를 통해 fastAPI를 배워보겠습니다. 경로 매개변수 매개변수 타입지정 매개변수를 받아 반환할수 있고, 해당 매개변수에 타입을 지정할 수 있습니다. 만약 user/{id} 와 user/me를 함께 사용해야 할 경우 user/me함수를 먼저 선언해주어야 합니다. 고정 상수값 지정 만약 매개변수값에 대해 고정적인 처리를 하고싶다면, enum…","html":"<h1 id=\"fastapi-doc-자습\" style=\"position:relative;\"><a href=\"#fastapi-doc-%EC%9E%90%EC%8A%B5\" aria-label=\"fastapi doc 자습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fastAPI doc 자습</h1>\n<p>fastAPI 에 대해 간단하게 알아보았으며, 공식문서를 통해 fastAPI를 배워보겠습니다.</p>\n<br>\n<h1 id=\"경로-매개변수\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\" aria-label=\"경로 매개변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로 매개변수</h1>\n<h3 id=\"매개변수-타입지정\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85%EC%A7%80%EC%A0%95\" aria-label=\"매개변수 타입지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수 타입지정</h3>\n<p>매개변수를 받아 반환할수 있고, 해당 매개변수에 타입을 지정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/{id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">user_id</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># id 의 타입은 숫자형입니다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 user/{id} 와 user/me를 함께 사용해야 할 경우</p>\n<p>user/me함수를 먼저 선언해주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/uses/me\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_user_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 해당함수가 먼저 선언되어야 합니다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"the current user\"</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/{id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">user_id</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"고정-상수값-지정\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%A0%95-%EC%83%81%EC%88%98%EA%B0%92-%EC%A7%80%EC%A0%95\" aria-label=\"고정 상수값 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고정 상수값 지정</h3>\n<p>만약 매개변수값에 대해 고정적인 처리를 하고싶다면, enum클래스를 생성하여 고정적인 처리를 할수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum\n\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelName</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># enum 클래스를 선언합니다.</span>\n    alexnet <span class=\"token operator\">=</span> <span class=\"token string\">\"alexnet\"</span>         <span class=\"token comment\"># TS 의 인터페이스와 타입을 함께 선언하는 느낌입니다.</span>\n    resnet <span class=\"token operator\">=</span> <span class=\"token string\">\"resnet\"</span>\n    lenet <span class=\"token operator\">=</span> <span class=\"token string\">\"lenet\"</span>\n\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/models/{model_name}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_model</span><span class=\"token punctuation\">(</span>model_name<span class=\"token punctuation\">:</span> ModelName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># 이경우 docs에서 ModelName클래스의 값이 정의되어 표시됩니다.</span>\n    <span class=\"token keyword\">if</span> model_name <span class=\"token keyword\">is</span> ModelName<span class=\"token punctuation\">.</span>alexnet<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"model_name\"</span><span class=\"token punctuation\">:</span> model_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Deep Learning FTW!\"</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> model_name<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token string\">\"lenet\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"model_name\"</span><span class=\"token punctuation\">:</span> model_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"LeCNN all the images\"</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"model_name\"</span><span class=\"token punctuation\">:</span> model_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Have some residuals\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"쿼리-매개변수\" style=\"position:relative;\"><a href=\"#%EC%BF%BC%EB%A6%AC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\" aria-label=\"쿼리 매개변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿼리 매개변수</h1>\n<p>경로 매개변수의 일부가 아닌 다른 함수 매개변수를 선언할 때, “쿼리” 매개변수로 자동 해석합니다.</p>\n<p>쿼리 매개변수는 경로에서 고정된 부분이 아니기 때문에 선택적일 수 있고 기본값을 가질 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Union\n\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> short<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># q = None 로 기본값을 주었기 때문에 필수값이 아니며, short는 필수값입니다.</span>\n    item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">:</span>\n        item<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">:</span> q<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> short<span class=\"token punctuation\">:</span>\n        item<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"description\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"This is an amazing item that has a long description\"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> item</code></pre></div>\n<h1 id=\"request-body\" style=\"position:relative;\"><a href=\"#request-body\" aria-label=\"request body permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request Body</h1>\n<p>보통 GET 요청이 아닌, POST/DELETE/PUT 요청의 경우 리퀘스트 바디에 요청값을 보냅니다. (필수는 아닙니다)</p>\n<p>이때 pydantic의 BaseModel을 이용하여, 데이터모델을 상속하는 클래스를 만듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Union\n\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    description<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span> <span class=\"token comment\"># 필수값은 아닙니다.</span>\n    price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>\n    tax<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span> <span class=\"token comment\"># 필수값은 아닙니다.</span>\n\n<span class=\"token comment\"># 파이썬 타입힌트만으로도 fastAPI는 다음과 같은 일을 수행합니다.</span>\n<span class=\"token comment\"># 요청 본문을 JSON으로 읽습니다.</span>\n<span class=\"token comment\"># 해당유형을 반환해줄 수 있습니다.</span>\n<span class=\"token comment\"># 데이터를 검증합니다.</span>\n<span class=\"token comment\"># 매개변수 및 파라미터에서 받은 데이터를 반환합니다.</span>\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>item_count<span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">:</span> Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 매개변수값을 반환값에 포함합니다.</span>\n    item_dict <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">.</span>tax<span class=\"token punctuation\">:</span>\n        price_with_tax <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>price <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>tax<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>item_count\n        item_dict<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"price_with_tax\"</span><span class=\"token punctuation\">:</span> price_with_tax<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> item_dict</code></pre></div>\n<h1 id=\"쿼리-매개변수와-문자열-유효성-검사\" style=\"position:relative;\"><a href=\"#%EC%BF%BC%EB%A6%AC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%99%80-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\" aria-label=\"쿼리 매개변수와 문자열 유효성 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿼리 매개변수와 문자열 유효성 검사</h1>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Union\n\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"items\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bar\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">:</span>\n        results<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">:</span> q<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> results</code></pre></div>\n<p>위와 같은 코드에서 만약 매개변수 ‘q’에 대해 문자열이 50자를 초과하지 않도록 제한하고 싶다면 어떻게 해야 할까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Query\n<span class=\"token keyword\">from</span> typing_extensions <span class=\"token keyword\">import</span> Annotated\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 매개변수 q에 타입을 Annotated으로 감싸줍니다.</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">:</span> Annotated<span class=\"token punctuation\">[</span>Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Query<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># 또한 다음과 같습니다.</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Query<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># 다음과 같으며 가장 권장하는 방식입니다.</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">:</span> Annotated<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Query<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># 해당 어노테이티드로 매개변수 'q'에 문자열 길이를 제한할 수 있습니다.</span>\n<span class=\"token comment\"># max_length 말고도 정규식등 다양한 옵션설정이 가능합니다.</span>\n\n<span class=\"token comment\"># 해당값이 필수값인경우 리터럴을 이용해 표현할 수 있습니다.</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">:</span> Annotated<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Query<span class=\"token punctuation\">(</span>min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token comment\"># 물론 Required를 이용해 표현할 수 있습니다.</span>\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> Required\n<span class=\"token keyword\">from</span> typing_extensions <span class=\"token keyword\">import</span> Annotated\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">:</span> Annotated<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Query<span class=\"token punctuation\">(</span>min_length<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></code></pre></div>\n<h1 id=\"숫자-유효성-검사\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC\" aria-label=\"숫자 유효성 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자 유효성 검사</h1>\n<p>문자열뿐 아니라 숫자형에 대해서도 유효성 검사를 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI<span class=\"token punctuation\">,</span> Path\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># ge 는 크거나 같다는 뜻으로 item_id 가 1보다 크거나 같아야 한다는 뜻입니다.</span>\n<span class=\"token comment\"># 외에 gt,ge,lt,le 가 있습니다.</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/{item_id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> item_id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"The ID of the item to get\"</span><span class=\"token punctuation\">,</span> ge<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"item_id\"</span><span class=\"token punctuation\">:</span> item_id<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> q<span class=\"token punctuation\">:</span>\n        results<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">:</span> q<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> results</code></pre></div>\n<h1 id=\"python-enum\" style=\"position:relative;\"><a href=\"#python-enum\" aria-label=\"python enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python enum</h1>\n<p>파이썬은 버전 3.4부터 다른 언어들 처럼 enum(enumeration, 이넘) 타입을 지원하고 있습니다.</p>\n<p>enum은 서로 관련이 있는 상수의 집합을 정의할 때 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># 일반적으로 클래스에 상속하여 사용합니다.</span>\n<span class=\"token comment\"># key와 value쌍으로 만들수 있습니다.</span>\n<span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Skill</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    HTML <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    CSS <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    JS <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n<span class=\"token comment\"># 자주 사용하지는 않지만 함수형으로도 정의할수 있습니다.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Skill <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">(</span><span class=\"token string\">\"Skill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HTML CSS JS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>Skill<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Skill<span class=\"token punctuation\">.</span>HTML<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Skill<span class=\"token punctuation\">.</span>CSS<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Skill<span class=\"token punctuation\">.</span>JS<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 또한 auto()를 통해 숫자 1부터 자동으로 value에 할당할 수 있습니다.</span>\n<span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum<span class=\"token punctuation\">,</span> auto\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Skill</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    HTML <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    CSS <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    JS <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># enum내의 _generate_next_value_ 매서드를 오버라이드해서 다른값을 자동으로 할당할수 있습니다.</span>\n<span class=\"token comment\"># name 의 경우 key값과 같은 value값을 가질 수 있습니다.</span>\n<span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum<span class=\"token punctuation\">,</span> auto\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Skill</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_generate_next_value_</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> last_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> name\n\n    HTML <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    CSS <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    JS <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># enum을 사용할 때 name이나 value를 사용해야 반드시 제대로된 key,value값이 나오는데,</span>\n<span class=\"token comment\"># mixin을 이용해 str을 확장하는 클래스를 만들고, 해당 클래스를 상속해 사용할 enum클래스를 만듭니다.</span>\n<span class=\"token comment\"># 아래와같이 enum또한 다른 클래스처럼 상속과 확장이 가능합니다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StrEnum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_generate_next_value_</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> last_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> name <span class=\"token comment\"># value값을 key값과 같게끔 이름을 반환합니다.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Skill</span><span class=\"token punctuation\">(</span>StrEnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    HTML <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    CSS <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    JS <span class=\"token operator\">=</span> auto<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Skill<span class=\"token punctuation\">.</span>HTML <span class=\"token operator\">==</span> <span class=\"token string\">'HTML'</span>\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>Skill<span class=\"token punctuation\">.</span>HTML<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">True</span>\n\n<span class=\"token comment\"># 근데 이렇게 쓸 바에야 차라리 함수로 상수를 리턴한다는 의견도 있다니, 취향껏 쓰시면 되지않을까 싶습니다.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_const</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1000</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>get_const<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1000</span>\n\n<span class=\"token comment\"># 참고로 상수에 대한 타입인 파이널도 있습니다.</span>\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Final\n\nconst<span class=\"token punctuation\">:</span> Final<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></code></pre></div>\n<h1 id=\"파이댄틱\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EB%8C%84%ED%8B%B1\" aria-label=\"파이댄틱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이댄틱</h1>\n<p>그리고 데코레이터, 자바에 어노테이션과 파이썬의 어노테이션은 다른의미</p>","frontmatter":{"title":"fastApi (3)","date":"March 30, 2023"}}},"pageContext":{"slug":"/Python/23.03.30 fastAPI3/","previous":{"fields":{"slug":"/CS/사설IP와퍼블릭IP/"},"frontmatter":{"title":"IP와 브라우저 캐시"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}